<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xsl" href="https://zzq8.cn/atom.xsl"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh-CN">
  <id>https://zzq8.cn/</id>
  <title>Piglet</title>
  <subtitle>自我提升笔记，记录并输出一切能让自己提升的知识。</subtitle>
  <icon>https://zzq8.cn/favicon.ico</icon>
  <updated>2025-08-23T07:39:46.054Z</updated>
  <generator>@vuepress/plugin-feed</generator>
  <link rel="self" href="https://zzq8.cn/atom.xml"/>
  <link rel="alternate" href="https://zzq8.cn/"/>
  <category term="使用指南"/>
  <category term="Code"/>
  <entry>
    <title type="text">博客文章样例</title>
    <id>https://zzq8.cn/posts/2024-03-01-blog_example.html</id>
    <link href="https://zzq8.cn/posts/2024-03-01-blog_example.html"/>
    <updated>2025-08-23T07:39:46.055Z</updated>
    <summary type="html"><![CDATA[<blockquote>
<p>博客文章内容，支持 Markdown 和 HTML 语言。</p>
</blockquote>
<p>加油！内驱力～</p>
]]></summary>
    <content type="html"><![CDATA[<blockquote>
<p>博客文章内容，支持 Markdown 和 HTML 语言。</p>
</blockquote>
<p>加油！内驱力～</p>
]]></content>
    <category term="使用指南"/>
    <published>2024-03-01T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">WTG</title>
    <id>https://zzq8.cn/posts/WTG.html</id>
    <link href="https://zzq8.cn/posts/WTG.html"/>
    <updated>2025-08-23T07:39:46.057Z</updated>
    <summary type="html"><![CDATA[
<h2>装机篇</h2>
<blockquote>
<p>自己折腾 WTG 我觉得需要记录的</p>
</blockquote>
<h3>隐藏系统磁盘</h3>
<p>看萝卜头博客，我放在ali了  有批处理解决</p>
<h3>U盘装两个系统-WTG&amp;微PE</h3>
<blockquote>
<p>这个踩坑严重。记住WTG里面装WEPE看 ali 也有问题（进不去WEPE好像）装的时候可能得取消一个勾选</p>
</blockquote>
<h3>重装系统坑</h3>
<p>场景：使用常规方法，装载装不上（Windows 安装程序：<strong>我们无法创建新的分区，也找不到现有的分区。有关详细信息，请参阅安装日志文件。</strong>）</p>]]></summary>
    <content type="html"><![CDATA[
<h2>装机篇</h2>
<blockquote>
<p>自己折腾 WTG 我觉得需要记录的</p>
</blockquote>
<h3>隐藏系统磁盘</h3>
<p>看萝卜头博客，我放在ali了  有批处理解决</p>
<h3>U盘装两个系统-WTG&amp;微PE</h3>
<blockquote>
<p>这个踩坑严重。记住WTG里面装WEPE看 ali 也有问题（进不去WEPE好像）装的时候可能得取消一个勾选</p>
</blockquote>
<h3>重装系统坑</h3>
<p>场景：使用常规方法，装载装不上（Windows 安装程序：<strong>我们无法创建新的分区，也找不到现有的分区。有关详细信息，请参阅安装日志文件。</strong>）</p>
<p>解决：用WEPE自带安装器，在安装之前需要先分好区</p>
<hr>
<h2>学校篇</h2>
<h3>一、前言</h3>
<p>u盘买了很久了也不贵，感觉很物超所值。现在我就是在学校的实验楼写这篇文章，其实很早就想写了但一直没付出行动。我觉得自己U盘的使用频率还是蛮大的。真的会让我有一种很方便的感觉。</p>
<p>因为自己是一个他律的人不想呆在寝室，需要借助学习氛围比较好的地方，去图书馆的话就还得背电脑很重，实验楼的话就离得近只要带上自己的U盘和耳机就行了。尤其是上个学期经常往学校的实验楼跑，实验楼电脑又比较好，但是由于电脑的使用习惯没到位就想到了Win To Go来弥补。事实证明我是对的。</p>
<blockquote>
<p>可以仔细看一下下面这张图，我的使用场景是三（随身携带工作环境）：</p>
</blockquote>
<figure><img src="https://pub-83c20763effa4ac69b4d6a9e22c9936e.r2.dev/img/202207191647279.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<blockquote>
<p>贴一张学校电脑的配置：</p>
</blockquote>
<figure><img src="https://pub-83c20763effa4ac69b4d6a9e22c9936e.r2.dev/img/202207191647131.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<blockquote>
<p>实验楼抢占计划：</p>
</blockquote>
<figure><img src="https://pub-83c20763effa4ac69b4d6a9e22c9936e.r2.dev/img/202207191648287.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<blockquote>
<p>贴一张U盘使用状况：</p>
</blockquote>
<figure><img src="https://pub-83c20763effa4ac69b4d6a9e22c9936e.r2.dev/img/202207191648405.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h3>二、详情介绍</h3>
<p>具体操作看 <a href="https://bbs.luobotou.org/thread-761-1-1.html" target="_blank" rel="noopener noreferrer">萝卜头IT论坛</a></p>
<p>U 盘我个人觉得蛮好200出头，摸着也舒服金属质感有分量，而且颜值也高旋转盖帽，总之满意。</p>
<p>需要注意的点：</p>
<blockquote>
<p>Q: 学校机房网络IP地址是固定的而自己坐的位置又不固定，总不能每次都要花时间手写网络IP吧?</p>
<p>A:  我是用的52破解网里面一款名叫IP地址修改器的软件解决的</p>
</blockquote>
<figure><img src="https://pub-83c20763effa4ac69b4d6a9e22c9936e.r2.dev/img/202207191648251.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>需要注意U盘冒白灯才是USB 3.2，个人使用感受就是爽。和正常用自己电脑没差，流畅的很！</p>
<p>另外windows系统的一些好用的软件，例如禁止更新，激活等都在我的网盘里。把自己的一套使用环境搭起来也蛮快。</p>
<p>欢迎下载：<a href="https://share.1024zzq.com/" target="_blank" rel="noopener noreferrer">1024zzqの宝库</a></p>
<blockquote>
<p>Q：如果 BIOS 启动时候，发现不能 U 盘启动锁了，这时候其实也是有方法的！我在学校亲测成功！</p>
<p>A：<a href="https://bios-pw.org/" target="_blank" rel="noopener noreferrer">HP BIOS输入5次错误密码后会出提示码用提示码逆向算出密码 实测有效</a></p>
</blockquote>
<h3>三、其他</h3>
<p>有了这技术其实去网吧都可以实现免费上网了，但肯定会被打而已hh~</p>
<p>闲言：很多东西仔细去想并把他们连接起来其实是可以拓宽思路的。有很多有趣的东西等着我们去发现。</p>
<p>补充：在公司用了2个月U盘的系统(因为嫌搭环境麻烦)，电脑从来没有关过机！质量真的没的说！</p>
]]></content>
    <published>2024-04-13T08:39:03.000Z</published>
  </entry>
  <entry>
    <title type="text">Prompt</title>
    <id>https://zzq8.cn/code/Prompt.html</id>
    <link href="https://zzq8.cn/code/Prompt.html"/>
    <updated>2025-08-23T07:39:46.063Z</updated>
    <summary type="html"><![CDATA[
<blockquote>
<p>https://linux.do/t/topic/405818</p>
</blockquote>
<h2>回答问题式学习</h2>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>请你把我看作一个完全零基础的新手， 我希望通过不断思考并回答你提出的问题来学习知识。我们的对话流程是这样的：</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>1. 我向你提出我想了解的问题</span></span>
<span class="line"><span>2. 你思考，要想解释明白这个问题， 我需要掌握哪些前置的基础知识，并向我提出一系列问题以便你了解我的知识基础情况，确保你的问题具体且易于回答</span></span>
<span class="line"><span>3. 根据我的回答正确情况， 你来选择合适的讲解程度， 确保我可以听明白你的解释</span></span>
<span class="line"><span>   a. 你需要向我解释明白那些我不会却必要的基础知识</span></span>
<span class="line"><span>   b. 回答我的问题。</span></span>
<span class="line"><span>   c. 最后，你还需要提出一系列问题来检验我是否听明白了，确保问题具体。</span></span>
<span class="line"><span>   d. 如果你认为我已经完全搞明白我最初提出的问题了，结束对话即可，如果没有，重复3</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></summary>
    <content type="html"><![CDATA[
<blockquote>
<p>https://linux.do/t/topic/405818</p>
</blockquote>
<h2>回答问题式学习</h2>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>请你把我看作一个完全零基础的新手， 我希望通过不断思考并回答你提出的问题来学习知识。我们的对话流程是这样的：</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>1. 我向你提出我想了解的问题</span></span>
<span class="line"><span>2. 你思考，要想解释明白这个问题， 我需要掌握哪些前置的基础知识，并向我提出一系列问题以便你了解我的知识基础情况，确保你的问题具体且易于回答</span></span>
<span class="line"><span>3. 根据我的回答正确情况， 你来选择合适的讲解程度， 确保我可以听明白你的解释</span></span>
<span class="line"><span>   a. 你需要向我解释明白那些我不会却必要的基础知识</span></span>
<span class="line"><span>   b. 回答我的问题。</span></span>
<span class="line"><span>   c. 最后，你还需要提出一系列问题来检验我是否听明白了，确保问题具体。</span></span>
<span class="line"><span>   d. 如果你认为我已经完全搞明白我最初提出的问题了，结束对话即可，如果没有，重复3</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2>Meta Prompt</h2>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span># The Dual Path Primer</span></span>
<span class="line"><span></span></span>
<span class="line"><span>**Core Identity:** You are "The Dual Path Primer," an AI meta-prompt orchestrator. Your primary function is to manage a dynamic, adaptive dialogue process to ensure high-quality, *comprehensive* context understanding and internal alignment before initiating the core task or providing a highly optimized, detailed, and synthesized prompt. You achieve this through:</span></span>
<span class="line"><span>1.  Receiving the user's initial request naturally.</span></span>
<span class="line"><span>2.  Analyzing the request and dynamically creating a relevant AI Expert Persona.</span></span>
<span class="line"><span>3.  Performing a structured **internal readiness assessment** (0-100%), now explicitly aiming to identify areas for deeper context gathering and formulating a mixed-style list of information needs.</span></span>
<span class="line"><span>4.  Iteratively engaging the user via the **Readiness Report Table** (with lettered items) to reach 100% readiness, which includes gathering both essential and elaborative context.</span></span>
<span class="line"><span>5.  Executing a rigorous **internal self-verification** of the comprehensive core understanding.</span></span>
<span class="line"><span>6.  **Asking the user how they wish to proceed** (start dialogue or get optimized prompt).</span></span>
<span class="line"><span>7.  Overseeing the delivery of the user's chosen output:</span></span>
<span class="line"><span>    * Option 1: A clean start to the dialogue.</span></span>
<span class="line"><span>    * Option 2: An **internally refined prompt snippet, now developed for maximum comprehensiveness and detail** based on richer gathered context.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>**Workflow Overview:**</span></span>
<span class="line"><span>User provides request -&gt; The Dual Path Primer analyzes, creates Persona, performs internal readiness assessment (now looking for essential *and* elaborative context gaps, and how to frame them) -&gt; If needed, interacts via Readiness Table (lettered items including elaboration prompts presented in a mixed style) until 100% (rich) readiness -&gt; The Dual Path Primer performs internal self-verification on comprehensive understanding -&gt; **Asks user to choose: Start Dialogue or Get Prompt** -&gt; Based on choice:</span></span>
<span class="line"><span>* If 1: Persona delivers **only** its first conversational turn.</span></span>
<span class="line"><span>* If 2: The Dual Path Primer synthesizes a draft prompt snippet from the richer context, then runs an **intensive sequential multi-dimensional refinement process on the snippet (emphasizing detail and comprehensiveness)**, then provides the **final highly developed prompt snippet only**.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>**AI Directives:**</span></span>
<span class="line"><span></span></span>
<span class="line"><span>**(Phase 1: User's Natural Request)**</span></span>
<span class="line"><span>*The Dual Path Primer Action:* Wait for and receive the user's first message, which contains their initial request or goal.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>**(Phase 2: Persona Crafting, Internal Readiness Assessment &amp; Iterative Clarification - Enhanced for Deeper Context)**</span></span>
<span class="line"><span>*The Dual Path Primer receives the user's initial request.*</span></span>
<span class="line"><span>*The Dual Path Primer Directs Internal AI Processing:*</span></span>
<span class="line"><span>    A.  "Analyze the user's request: `[User's Initial Request]`. Identify the core task, implied goals, type of expertise needed, and also *potential areas where deeper context, examples, or background would significantly enrich understanding and the final output*."</span></span>
<span class="line"><span>    B.  "Create a suitable AI Expert Persona. Define:</span></span>
<span class="line"><span>        1.  **Persona Name:** (Invent a relevant name, e.g., 'Data Insight Analyst', 'Code Companion', 'Strategic Planner Bot').</span></span>
<span class="line"><span>        2.  **Persona Role/Expertise:** (Clearly describe its function and skills relevant to the task, e.g., 'Specializing in statistical analysis of marketing data,' 'Focused on Python code optimization and debugging'). **Do NOT invent or claim specific academic credentials, affiliations, or past employers.**"</span></span>
<span class="line"><span>    C.  "Perform an **Internal Readiness Assessment** by answering the following structured queries:"</span></span>
<span class="line"><span>        * `"internal_query_goal_clarity": "&lt;Rate the clarity of the user's primary goal from 1 (very unclear) to 10 (perfectly clear).&gt;"`</span></span>
<span class="line"><span>        * `"internal_query_context_sufficiency_level": "&lt;Assess if background context is 'Barely Sufficient', 'Adequate for Basics', or 'Needs Significant Elaboration for Rich Output'. The AI should internally note what level is achieved as information is gathered.&gt;"`</span></span>
<span class="line"><span>        * `"internal_query_constraint_identification": "&lt;Assess if key constraints are defined: 'Defined' / 'Ambiguous' / 'Missing'.&gt;"`</span></span>
<span class="line"><span>        * `"internal_query_information_gaps": ["&lt;List specific, actionable items of information or clarification needed from the user. This list MUST include: 1. *Essential missing data* required for core understanding and task feasibility. 2. *Areas for purposeful elaboration* where additional detail, examples, background, user preferences, or nuanced explanations (identified from the initial request analysis in Step A) would significantly enhance the depth, comprehensiveness, and potential for creating a more elaborate and effective final output (especially if Option 2 prompt snippet is chosen). Frame these elaboration points as clear questions or invitations for more detail. **Ensure the generated list for the user-facing table aims for a helpful mix of direct questions for facts and open invitations for detail, in the spirit of this example style: 'A. The specific dataset for analysis. B. Clarification on the primary KPI. C. Elaboration on the strategic importance of this project. D. Examples of previous reports you found effective.'**&gt;"]`</span></span>
<span class="line"><span>        * `"internal_query_calculated_readiness_percentage": "&lt;Derive a readiness percentage (0-100). 100% readiness requires: goal clarity &gt;= 8, constraint identification = 'Defined', AND all points (both essential data and requested elaborations) listed in `internal_query_information_gaps` have been satisfactorily addressed by user input to the AI's judgment. The 'context sufficiency level' should naturally improve as these gaps are filled.&gt;"`</span></span>
<span class="line"><span>    D.  "Store the results of these internal queries."</span></span>
<span class="line"><span></span></span>
<span class="line"><span>*The Dual Path Primer Action (Conditional Interaction Logic):*</span></span>
<span class="line"><span>    * **If `internal_query_calculated_readiness_percentage` is 100 (meaning all essential AND identified elaboration points are gathered):** Proceed directly to Phase 3 (Internal Self-Verification).</span></span>
<span class="line"><span>    * **If `internal_query_calculated_readiness_percentage` is &lt; 100:** Initiate interaction with the user.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>*The Dual Path Primer to User (Presenting Persona and Requesting Info via Table, only if readiness &lt; 100%):*</span></span>
<span class="line"><span>    1.  "Hello! To best address your request regarding '[Briefly paraphrase user's request]', I will now embody the role of **[Persona Name]**, [Persona Role/Expertise Description]."</span></span>
<span class="line"><span>    2.  "To ensure I can develop a truly comprehensive understanding and provide the most effective outcome, here's my current assessment of information that would be beneficial:"</span></span>
<span class="line"><span>    3.  **(Display Readiness Report Table with Lettered Items - including elaboration points):**</span></span>
<span class="line"><span>        ```</span></span>
<span class="line"><span>        | Readiness Assessment      | Details                                                                  |</span></span>
<span class="line"><span>        |</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content>
    <published>2025-08-23T07:38:23.000Z</published>
  </entry>
  <entry>
    <title type="text">CDN</title>
    <id>https://zzq8.cn/code/408-Network/CDN.html</id>
    <link href="https://zzq8.cn/code/408-Network/CDN.html"/>
    <updated>2025-08-23T07:39:46.088Z</updated>
    <summary type="html"><![CDATA[
<blockquote>
<p>感觉怪怪的还是没搞好，先就这么用着吧。好像网站貌似变快了？！</p>
<p><a href="https://www.17ce.com/site" target="_blank" rel="noopener noreferrer">测速网站</a></p>
<p>还是得看官方文档，搞了一天端午加一周的晚上时间看别人二手文章描述又描述不清！！混淆我！！！！突然开窍看了眼官网描述，草  原来是这个意思：</p>
<p>回源 HOST
即回源域名，CDN 节点在回源时，能够指定访问的源站 IP 地址下具体的站点域名。当您的源站只有一个和加速域名一致的站点，默认为加速域名即可，若源站为 COS 源或第三方对象存储时，回源 HOST 不可修改，控制台默认为回源地址。</p>
<p>说明：
什么是 CDN 回源 HOST 配置?
回源 HOST 是指加速域名在 CDN 节点回源过程指向源访问的站点域名，若您在源站服务器内同时部署了若干个 Web 站点，配置正确的回源 HOST 可以帮助您顺利访问指定的站点域名。</p>
</blockquote>]]></summary>
    <content type="html"><![CDATA[
<blockquote>
<p>感觉怪怪的还是没搞好，先就这么用着吧。好像网站貌似变快了？！</p>
<p><a href="https://www.17ce.com/site" target="_blank" rel="noopener noreferrer">测速网站</a></p>
<p>还是得看官方文档，搞了一天端午加一周的晚上时间看别人二手文章描述又描述不清！！混淆我！！！！突然开窍看了眼官网描述，草  原来是这个意思：</p>
<p>回源 HOST
即回源域名，CDN 节点在回源时，能够指定访问的源站 IP 地址下具体的站点域名。当您的源站只有一个和加速域名一致的站点，默认为加速域名即可，若源站为 COS 源或第三方对象存储时，回源 HOST 不可修改，控制台默认为回源地址。</p>
<p>说明：
什么是 CDN 回源 HOST 配置?
回源 HOST 是指加速域名在 CDN 节点回源过程指向源访问的站点域名，若您在源站服务器内同时部署了若干个 Web 站点，配置正确的回源 HOST 可以帮助您顺利访问指定的站点域名。</p>
</blockquote>
<h2>目前配置</h2>
<h4>DNS 设置</h4>
<p>| 类型  | 名称 | 值              |
|</p>
]]></content>
    <published>2024-06-29T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">WebSocket</title>
    <id>https://zzq8.cn/code/408-Network/SSE_WS.html</id>
    <link href="https://zzq8.cn/code/408-Network/SSE_WS.html"/>
    <updated>2025-08-23T07:39:46.092Z</updated>
    <summary type="html"><![CDATA[
<h3>优势</h3>
<p><strong>双向实时通信</strong>，特有的ws协议，可跨域
填补HTTP在实时通讯的不足</p>
<h3>场景</h3>
<p>适用低延迟实时通讯</p>
<p>即时消息传递、音视频通话、在线会议和实时数据传输等，可以实现即时的数据传输和交流，不需要用户主动请求或刷新来获取更新数据
协同编辑，想象语雀文档/腾讯文档</p>
<h3>使用</h3>
<p>如果这时候是<strong>想建立 websocket 连接</strong>，就会在 HTTP 请求里带上一些<strong>特殊的 header 头</strong>     告诉服务器，我想从HTTP升级成WS</p>]]></summary>
    <content type="html"><![CDATA[
<h3>优势</h3>
<p><strong>双向实时通信</strong>，特有的ws协议，可跨域
填补HTTP在实时通讯的不足</p>
<h3>场景</h3>
<p>适用低延迟实时通讯</p>
<p>即时消息传递、音视频通话、在线会议和实时数据传输等，可以实现即时的数据传输和交流，不需要用户主动请求或刷新来获取更新数据
协同编辑，想象语雀文档/腾讯文档</p>
<h3>使用</h3>
<p>如果这时候是<strong>想建立 websocket 连接</strong>，就会在 HTTP 请求里带上一些<strong>特殊的 header 头</strong>     告诉服务器，我想从HTTP升级成WS</p>
<div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" data-title="json" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">Connection: Upgrade</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">Upgrade: websocket</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">Sec-WebSocket-Key: T</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">a</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">6</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">wZlAwhgQNqruZ</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">YUyg==\r\n</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>
<p>header 头的意思是，浏览器想<strong>升级协议（Connection: Upgrade）</strong>，并且<strong>想升级成 websocket 协议（Upgrade: websocket）</strong>。</p>
</li>
<li>
<p>同时带上一段<strong>随机生成的 base64 码（Sec-WebSocket-Key）</strong>，发给服务器。
如果服务器正好支持升级成 websocket 协议。就会走 websocket 握手流程，同时根据客户端生成的 base64 码，用某个<strong>公开的</strong>算法变成另一段字符串，放在 HTTP 响应的 <code>Sec-WebSocket-Accept</code> 头里，同时带上<code>101状态码</code>，发回给浏览器。</p>
<blockquote>
<p>http 状态码=200（正常响应）的情况，大家见得多了。101 确实不常见，它其实是指<strong>协议切换</strong>。</p>
</blockquote>
</li>
<li></li>
</ul>
<p>![image-20240706104311784](/Users/xd/Library/Application Support/typora-user-images/image-20240706104311784.png)</p>
<h3>心跳机制</h3>
<p>为了保持 WebSocket 稳定的长连接，在连接建立之后，服务器和客户端之间通过心跳包来保持连接状态，以防止连接因为长时间没有数据传输而被切断。</p>
<p>一种特殊的数据包不包含任何实际数据，仅用来维持连接状态一个空数据帧</p>
<p>定期发送，确保链接仍然有效，避免长时间没有数据传输而被中断</p>
<p>如果一段时间内没有收到对方的心跳包，就可以认为连接已经断开</p>
<p>扫码原理：HTTP定时轮询（弊端多！）   -》 百度网盘：长轮询</p>
<p>https://www.bilibili.com/video/BV1Rh4y167Uh?t=122.6 【视频挺好】
https://www.bilibili.com/video/BV19N411474y?t=97.0</p>
<p>到网站笔记整理</p>
<p>https://golangguide.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%9C%89HTTP%E5%8D%8F%E8%AE%AE%EF%BC%8C%E8%BF%98%E8%A6%81%E6%9C%89websocket%E5%8D%8F%E8%AE%AE.html</p>
<h3>醍醐灌顶</h3>
<p><strong>HTTP/1.1 是一种半双工协议，而不是全双工协议。</strong>(设计之初只考虑看看网页，没考虑网页游戏 )</p>
<p><strong>相比之下，HTTP/2 是全双工协议。HTTP/2 允许同时在同一连接上双向传输多个消息（即多路复用），从而显著提高了传输效率和速度。这使得 HTTP/2 可以更有效地利用网络资源，减少延迟</strong></p>
<h1>SSE</h1>
<blockquote>
<p>ALMP 大语言模型平台用到 - 用户给Bot发消息</p>
</blockquote>
<p>Web服务端推送技术</p>
<p>单向通信，http GET实际还是它，不可跨域</p>
]]></content>
    <published>2024-07-07T14:54:20.000Z</published>
  </entry>
  <entry>
    <title type="text">Software</title>
    <id>https://zzq8.cn/code/408-PC/Software.html</id>
    <link href="https://zzq8.cn/code/408-PC/Software.html"/>
    <updated>2025-08-23T07:39:46.095Z</updated>
    <summary type="html"><![CDATA[
<h2>Sublime</h2>
<ul>
<li>
<h4><a class="header-anchor" href="#ctrl-shift-f-where处可以指定多个目录-排除指定目录下某个文件【高频使用】"><span></span></a><a href="https://www.cnblogs.com/daysme/p/6890979.html" target="_blank" rel="noopener noreferrer">ctrl+shift+f where处可以指定多个目录 / 排除指定目录下某个文件</a>【高频使用】</h4>
</li>
<li>
<h4>shortcut： 1）快速定位到修改过的地方的快捷键-好用     2）书签快捷键    3）还有github中python的批量保存关闭快捷键</h4>
<ul>
<li><img src="http://pub-83c20763effa4ac69b4d6a9e22c9936e.r2.dev/img/image-20240130182956675.png" alt="image-20240130182956675" tabindex="0" loading="lazy"><figcaption>image-20240130182956675</figcaption></li>
</ul>
</li>
<li>
<h4>在 Sublime Text 4 中，当你尝试替换文本时，它默认会保持替换的文本与原始文本的大小写一致。这意味着，如果你选择替换为大写文本，但原始文本是小写的，替换后的文本也会保持小写。</h4>
<ul>
<li>踩坑，ctrl h左下角有个选项 preserve case</li>
</ul>
</li>
<li>
<h4>搜索可以用正则，正则中的表达式可以用()包到里面，替换的时候可以用 $1..n（代表第1..n个括号） 来复用匹配到的内容！！！真的好用</h4>
<ul>
<li><mark>正则组引用</mark></li>
</ul>
</li>
<li>
<h4><a class="header-anchor" href="#快速插入多行递增数字"><span></span></a><a href="https://blog.csdn.net/cxrsdn/article/details/82496800" target="_blank" rel="noopener noreferrer">快速插入多行递增数字</a></h4>
<ul>
<li>
<h5>ctrl+shift+p ---&gt; install package control ---&gt; 搜索 Insert Nums</h5>
</li>
</ul>
</li>
<li>
<h4>列模式批量操作（以矩形的形式选取内容）</h4>
<p>－鼠标右键＋Shift</p>
<p>－或者鼠标中键</p>
<p>－增加选择：Ctrl，减少选择：Alt</p>
</li>
</ul>]]></summary>
    <content type="html"><![CDATA[
<h2>Sublime</h2>
<ul>
<li>
<h4><a class="header-anchor" href="#ctrl-shift-f-where处可以指定多个目录-排除指定目录下某个文件【高频使用】"><span></span></a><a href="https://www.cnblogs.com/daysme/p/6890979.html" target="_blank" rel="noopener noreferrer">ctrl+shift+f where处可以指定多个目录 / 排除指定目录下某个文件</a>【高频使用】</h4>
</li>
<li>
<h4>shortcut： 1）快速定位到修改过的地方的快捷键-好用     2）书签快捷键    3）还有github中python的批量保存关闭快捷键</h4>
<ul>
<li><img src="http://pub-83c20763effa4ac69b4d6a9e22c9936e.r2.dev/img/image-20240130182956675.png" alt="image-20240130182956675" tabindex="0" loading="lazy"><figcaption>image-20240130182956675</figcaption></li>
</ul>
</li>
<li>
<h4>在 Sublime Text 4 中，当你尝试替换文本时，它默认会保持替换的文本与原始文本的大小写一致。这意味着，如果你选择替换为大写文本，但原始文本是小写的，替换后的文本也会保持小写。</h4>
<ul>
<li>踩坑，ctrl h左下角有个选项 preserve case</li>
</ul>
</li>
<li>
<h4>搜索可以用正则，正则中的表达式可以用()包到里面，替换的时候可以用 $1..n（代表第1..n个括号） 来复用匹配到的内容！！！真的好用</h4>
<ul>
<li><mark>正则组引用</mark></li>
</ul>
</li>
<li>
<h4><a class="header-anchor" href="#快速插入多行递增数字"><span></span></a><a href="https://blog.csdn.net/cxrsdn/article/details/82496800" target="_blank" rel="noopener noreferrer">快速插入多行递增数字</a></h4>
<ul>
<li>
<h5>ctrl+shift+p</h5>
</li>
</ul>
</li>
</ul>
]]></content>
    <published>2024-06-29T10:27:54.000Z</published>
  </entry>
  <entry>
    <title type="text">Seata&amp;XTS</title>
    <id>https://zzq8.cn/code/DistributedLock/Seata_XTS.html</id>
    <link href="https://zzq8.cn/code/DistributedLock/Seata_XTS.html"/>
    <updated>2025-08-23T07:39:46.104Z</updated>
    <summary type="html"><![CDATA[
<h2>vs</h2>
<h3>对比与选择</h3>
<ol>
<li><strong>性能</strong>：
<ul>
<li>Seata的AT模式性能较高，因为其对数据源的拦截和日志生成进行了优化。</li>
<li>XTS在2PC模式下性能稍低，但在复杂事务一致性需求下更加可靠。</li>
</ul>
</li>
<li><strong>易用性</strong>：
<ul>
<li>Seata与Spring等生态系统集成度高，使用起来较为简单。</li>
<li>XTS提供简洁的API，但需要开发者更深入理解TCC模型。</li>
</ul>
</li>
<li><strong>场景适配</strong>：
<ul>
<li>Seata适用于需要高性能且事务模型灵活的场景。</li>
<li>XTS适用于对事务一致性要求较高的场景，如金融系统。</li>
</ul>
</li>
</ol>]]></summary>
    <content type="html"><![CDATA[
<h2>vs</h2>
<h3>对比与选择</h3>
<ol>
<li><strong>性能</strong>：
<ul>
<li>Seata的AT模式性能较高，因为其对数据源的拦截和日志生成进行了优化。</li>
<li>XTS在2PC模式下性能稍低，但在复杂事务一致性需求下更加可靠。</li>
</ul>
</li>
<li><strong>易用性</strong>：
<ul>
<li>Seata与Spring等生态系统集成度高，使用起来较为简单。</li>
<li>XTS提供简洁的API，但需要开发者更深入理解TCC模型。</li>
</ul>
</li>
<li><strong>场景适配</strong>：
<ul>
<li>Seata适用于需要高性能且事务模型灵活的场景。</li>
<li>XTS适用于对事务一致性要求较高的场景，如金融系统。</li>
</ul>
</li>
</ol>
<h3>选择建议</h3>
<ul>
<li>如果你需要一个高性能且易用的分布式事务框架，可以考虑使用Seata。</li>
<li>如果你对事务一致性有严格要求，且能接受更复杂的实现，可以选择XTS。</li>
</ul>
<h1><a class="header-anchor" href="#seata"><span></span></a><a href="https://seata.io/zh-cn/docs/overview/what-is-seata.html" target="_blank" rel="noopener noreferrer">Seata</a></h1>
<blockquote>
<p><a href="../gulimall/%E5%88%86%E5%B8%83%E5%BC%8F%E9%AB%98%E7%BA%A7#%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1">复习Gulimall的本地事务对照着笔记来学习！</a></p>
<p>看标题的官网链接！！！中文的通俗易懂  下面自己码的也可以看看抄过来的图带点自己好理解的逻辑去理解  <code>@GlobalTransactional</code></p>
<p><a href="../gulimall/03%E3%80%81%E6%9C%AC%E5%9C%B0%E4%BA%8B%E5%8A%A1&amp;%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1.pdf#%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E5%87%A0%E7%A7%8D%E6%96%B9%E6%A1%88">2PC（Seata是这个的一个变形）</a> 这里具体看 PDF！注意方案是方案框架是框架（落地实现这个方案）</p>
</blockquote>
<h2>概念</h2>
<p>分布式架构肯定是多数据库、多数据源！（买家库，卖家库）甚至在不同的机房。单个就搞笑了</p>
<p>单体应用被拆分成微服务应用，原来的三个模块被拆分成三个独立的应用,分别使用三个独立的数据源，业务操作需要调用三三 个服务来完成。此时<strong>每个服务内部的数据一致性由本地事务来保证， 但是全局的数据一致性问题没法保证</strong>。</p>
<figure><img src="https://pub-83c20763effa4ac69b4d6a9e22c9936e.r2.dev/img/202207081440609.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>一句话：<strong>一次业务操作需要跨多个数据源或需要跨多个系统进行远程调用，就会产生分布式事务问题</strong>。</p>
<p>**一带三：**分布式事务处理过程的一ID+三组件模型</p>
<ul>
<li>Transaction ID XID 全局唯一的事务ID</li>
<li>三组件概念
<ul>
<li>TC (Transaction Coordinator) - 事务协调者：维护 全局和分支事务的状态，驱动全局事务提交或回滚。</li>
<li>TM (Transaction Manager) - 事务管理器：定义全局事务的范围：开始全局事务、提交或回滚全局事务。</li>
<li>RM (Resource Manager) - 资源管理器：管理分支事务处理的资源，与TC交谈以注册分支事务和报告分支事务的状态，并驱动分支事务提交或回滚。</li>
</ul>
</li>
</ul>
<p>处理过程：</p>
<ol>
<li>TM向TC申请开启一个全局事务，全局事务创建成功并生成一个全局唯一的XID；</li>
<li>XID在微服务调用链路的上下文中传播；</li>
<li>RM向TC注册分支事务，将其纳入XID对应全局事务的管辖；</li>
<li>TM向TC发起针对XID的全局提交或回滚决议；</li>
<li>TC调度XID下管辖的全部分支事务完成提交或回滚请求。</li>
</ol>
<figure><img src="https://pub-83c20763effa4ac69b4d6a9e22c9936e.r2.dev/img/202207081513288.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p><mark><code>My Understand：</code>看图说话</mark>   我这里好理解</p>
<blockquote>
<p>Seata 分 TC、TM 和 RM 三个角色，TC（Server 端）为单独服务端部署，TM 和 RM（Client 端）由业务系统集成。</p>
</blockquote>
<p>TC 协调TM全局事务中的各个分支事务，这个全局调控的人就是Seata服务器（官网下下来运行）</p>
<p>TM 全局事务看成订单模块 其它小事务RM看成feign调用的</p>
<blockquote>
<p>Q：AT 模式（自动）  假如 Account 失败了，但是Stock &amp; Order成功了 那么怎么回滚？？？</p>
<p>A：UNDO_LOG Table（回滚日志表）  假如提交的是 +2 那就 -2 给补回来回复以前的状态。因为前面事务提交了没办法回滚了（魔改数据库）</p>
</blockquote>
<figure><img src="https://user-images.githubusercontent.com/68344696/145942191-7a2d469f-94c8-4cd2-8c7e-46ad75683636.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h2><a class="header-anchor" href="#快速开始"><span></span></a><a href="https://seata.io/zh-cn/docs/user/quickstart.html" target="_blank" rel="noopener noreferrer">快速开始</a></h2>
<blockquote>
<p>官方文档很清楚了！！！Git也有很多场景示例。Seata支持很多模式..   <strong>AT 模式：两阶段提交<a href="../gulimall/%E5%88%86%E5%B8%83%E5%BC%8F%E9%AB%98%E7%BA%A7">协议</a>的演变</strong></p>
</blockquote>
<p><strong>本地@Transactional     Spring的注解</strong></p>
<p><strong>全局@GlobalTransactional    SpringCloud的注解（控制分布式事务）：代表这个订单服务是一个全局事务，分支事务用@Transactional就行了</strong></p>
<p>ps：做项目订单这个全局事务需要把这两个注解都写</p>
<blockquote>
<p><a href="../gulimall/03%E3%80%81%E6%9C%AC%E5%9C%B0%E4%BA%8B%E5%8A%A1&amp;%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1.pdf">这里具体看 PDF！</a>注意方案是方案框架是框架（落地实现这个方案）  <strong>✔是高并发优先考虑的，用MQ</strong>    订单用异步确保型/商品保存可2PC</p>
</blockquote>
<ul>
<li>
<p>2PC（Seata是这个的一个变形）还有3PC
注意和MySQL写日志的两阶段提交区分，是不一样的东西。Seata AT是第一阶段提交+2第二阶段看要不要补偿-2  只适合一般的分布式事务不合适高并发</p>
</li>
<li>
<p>柔性事务-TCC 事务补偿型方案：相当于3PC的手动版
商城项目用的很多，也有很多框架给你去用。把正常的业务代码按照框架要求拆成z和三部分就行  Try+2/add  Cancel-2/delete</p>
</li>
<li>
<p>柔性事务-最大努力通知型方案（弹幕有公司是这个）✔
支付宝告诉你有没有支付成功，MQ 一会发个消息告诉你成了 一会发个消息告诉你成了</p>
</li>
<li>
<p>柔性事务-<strong>可靠消息</strong>+最终一致性方案（异步确保型，视频是这个）✔
也是借助 MQ  总结一句：异步下单，提高并发，提升响应，提升购物体验。</p>
</li>
</ul>
<h2>举例 AT 模式（自动）</h2>
<blockquote>
<p>只适用一般的分布式事务控制（例如保存商品会有几次feign优惠券之类的这里不要求高并发），<strong>不适合高并发。下单其实不适合（用MQ）</strong></p>
</blockquote>
<ol>
<li>
<p>需要数据库加一个回滚表（哪个微服务需要回滚的就得加上）</p>
</li>
<li>
<p><a href="https://github.com/seata/seata/releases" target="_blank" rel="noopener noreferrer">解压并启动seata-server</a>（TC 事务协调器）</p>
<ol>
<li>
<p>导入依赖spring-cloud-starter-alibaba-seata 会自动带上 seata-all-0.7.1</p>
</li>
<li>
<p>注意下载的Seata服务器版本要和 seata-all-0.7.1 对应！！</p>
<ul>
<li>registry.conf：服务注册/注册中心配置/事务日志存储位置（global_table&amp;branch_table&amp;lock_table）
修改 registrytype=nacos 或使用本地文件 file.conf 配置</li>
</ul>
</li>
<li>
<p>所有想要用到分布式事务的微服务使用seataDataSourceProxy代理自己的数据源</p>
<ul>
<li>1.4.1版不用配置数据源，在yaml中开启自动代理数据源，默认是开启的</li>
</ul>
</li>
<li>
<p><strong>每个微服务,都必须导入 registry.conf file.conf 配置服务名</strong></p>
<ul>
<li>
<p>问题一：<a href="https://www.cnblogs.com/LinQingYang/p/13723779.html" target="_blank" rel="noopener noreferrer">no available server to connect解决</a>（Application要配置seata： spring.cloud.alibaba.seata.tx-service-group: <strong>my_test_tx_group</strong>）</p>
</li>
<li>
<p><a href="https://juejin.cn/post/7163549166746992676" target="_blank" rel="noopener noreferrer">问题二：同一无法连接</a></p>
</li>
<li>
<p>1.4.2直接注册到nacos上 现在的没这么麻烦了吧 可能只需要一个registry.conf了</p>
</li>
</ul>
</li>
<li>
<p>给分布式大事务的入口标注@GLobalTransactional   每一个远程的小事务用@Transactional</p>
</li>
</ol>
</li>
</ol>
<p>​	P290避个坑，staea0.7不支持批量保存，我是遍历插入的，体验要stata的效果就好了，不使用高版本的stata也可以</p>
<p><mark>特别注意：Seata 为用户提供了 AT、TCC、SAGA 和 XA 事务模式</mark></p>
<blockquote>
<h4><a class="header-anchor" href="#后面看javaguide《面试指北》补充"><span>后面看JavaGuide《</span></a><a href="https://www.yuque.com/snailclimb/mf2z3k/ng9vmg" target="_blank" rel="noopener noreferrer">面试指北</a>》补充：</h4>
<p>简单总结一下 2PC 两阶段中比较重要的一些点：</p>
<ol>
<li>准备阶段 的主要目的是测试 RM 能否执行 本地数据库事务 操作（!!!注意：这一步并不会提交事务）。</li>
<li>提交阶段 中 TM 会根据 准备阶段 中 RM 的消息来决定是执行事务提交还是回滚操作。</li>
<li>提交阶段 之后一定会结束当前的分布式事务</li>
</ol>
<p>2PC 的优点：</p>
<ul>
<li>实现起来非常简单，各大主流数据库比如 MySQL、Oracle 都有自己实现。</li>
<li>针对的是数据强一致性。不过，仍然可能存在数据不一致的情况。</li>
</ul>
<p>2PC 存在的问题：</p>
<ul>
<li>同步阻塞 ：事务参与者会在正式提交事务之前会一直占用相关的资源。比如用户小明转账给小红，那其他事务也要操作用户小明或小红的话，就会阻塞。(XD：所以谷粒商城<strong>高并发</strong>的接口没用Seata，用的是MQ柔性事务)</li>
<li>数据不一致 ：由于网络问题或者TM宕机都有可能会造成数据不一致的情况。比如在第2阶段（提交阶段），部分网络出现问题导致部分参与者收不到 Commit/Rollback 消息的话，就会导致数据不一致。</li>
<li>单点问题 ：TM在其中也是一个很重要的角色，如果TM在准备(Prepare)阶段完成之后挂掉的话，事务参与者就会一直卡在提交(Commit)阶段。</li>
</ul>
</blockquote>
<h1>XTS</h1>
<blockquote>
<blockquote>
<ul>
<li>XTS（eXtended Transaction Service）是一个基于2PC的分布式事务框架，用来保障在大规模分布式环境下数据的一致性</li>
</ul>
</blockquote>
<ul>
<li>在支付宝广泛使用，涉及到账务、资金的操作，都要使用XTS来确保事务最终一致性</li>
</ul>
<p>2010 TCC分库分表（用的最多接触最多）
2020 XA模式</p>
<p><a href="https://study.antgroup-inc.cn/learn/course/293000055/content/367000437/367000438?tenant=metastudy" target="_blank" rel="noopener noreferrer">很棒的Movie</a>，视频 PPT 巨好。下面的标注很详细我懂了！
～～～</p>
<p>联想 seata
<a href="https://aliyuque.antfin.com/middleware/xts" target="_blank" rel="noopener noreferrer">https://aliyuque.antfin.com/middleware/xts</a>
TODO
永毅：现在打算去 XTS 了，XTS 太慢了
其他组会议也提到：他们好像都没用分布式锁，性能差？用的事物模板
<img src="http://pub-83c20763effa4ac69b4d6a9e22c9936e.r2.dev/img/09175e8024e7028c76cd05eff7628be7.png" alt="image.png" loading="lazy"></p>
</blockquote>
<p><strong>分布式事务：解决数据一致性问题（例如转账A扣钱，B加钱）</strong></p>
<h2>CAP</h2>
<p>单机事务：ACID
分布式事务：CAP（多了网络原因，ACID不适用）
CP / AP 不能同时存在原因：</p>
<blockquote>
<p><strong>分布式系统一定是存在网络传输的</strong>
就会出现网络延迟/不可达的问题，所以 P 分区容错性一定要满足</p>
</blockquote>
<p>分区隔离多个数据副本还没同步完，即节点间数据不一致！
此时只能在 CP / AP 权衡：
强一致：等网络恢复同步完，<strong>对外不可用</strong>（zookeeper）
可用性：读到的数据不一致，可能是还没同步好的节点数据（注册中心）</p>
<h2>BASE</h2>
<p>我们大多数的业务系统是对用户提供服务的，一般衡量标准是几个9，对可用性要求是很高的，所以分布式事务对CAP理论中的AP做了延伸，就是BASE理论，它是一种柔性事务理念，它要求分布式系统是基本可用的，允许存在中间态数据，但是一定时间后可以达到最终一致性。这里的基本可用可以理解为响应时间上的增加和非必要功能的降级，中间态数据可以理解是引入了提交过程中的中间状态或者同步过程的延迟。</p>
<p>ps：几个9的意思问了GPT
在计算机系统特别是分布式系统领域，当提到系统的可用性时，"几个9" 是衡量系统可用性的一种常用方式，即所谓的 "nine's" 模型。这种表示法指的是系统在一段时间内保持可用状态的百分比。具体来说：</p>
<ul>
<li><strong>1个9（90%）</strong>：系统在 100%的时间里，保证 90%的时间是可用的。</li>
<li><strong>2个9（99%）</strong>：系统在 100%的时间里，保证 99%的时间是可用的。</li>
</ul>
<p>以此类推。
具体来说，"几个9" 反映了系统的可靠性和可用性级别。例如：</p>
<ul>
<li><strong>99.9% 可用性</strong>（3个9）：意味着每年只有大约 8.76 小时的不可用时间，这是较高的可用性要求。</li>
<li><strong>99.999% 可用性</strong>（5个9）：意味着每年只有大约 5.26 分钟的不可用时间，这是非常高的可用性要求，通常应用于对可靠性要求极高的系统，如金融交易系统、航空控制系统等。</li>
</ul>
<h2>目标 - 一致性</h2>
<h3>1PC：无法完成</h3>
<blockquote>
<p>目标就是所有节点的提交状态达到一致，要么全部提交、要么全部回滚，
但是当节点1和节点2都提交完成时，节点3出现异常没有提交，因为只有一个阶段，这样整体就不一致了，因为节点可能在任意时刻出现异常，所以 1PC 是没办法的。</p>
</blockquote>
<figure><img src="http://pub-83c20763effa4ac69b4d6a9e22c9936e.r2.dev/img/57c20af0e574e766247d7f4e2b70e27a.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure>
<h3>2PC：即二阶段有个反悔的机会</h3>
<blockquote>
<p>所以我们必须把提交过程拆成两个部分，也就是两阶段提交，在一阶段完成后可以有一个“反悔”的机会 - 既可以继续提交、也可以撤消
前面说我们的目标就是让所有节点的提交状态达到一致，要么全部提交、要么全部回滚。其实这个目标就等价于：
从所有节点中选定一个作为协调者，然后其他节点的状态和它保持一致，就可以了。
因为事务总会有一个发起者嘛，自然这个发起者就可以作为协调者，其他节点就被称为参与者。
通过这种方式，除了发起者以外的参与者节点就可以将选择的权力交给发起者来协调，这样发起者就决定了所有节点的状态，就一定是一致的。
注意这里有一个前提，就是一阶段完成后的中间状态一定可以向前提交，也可以回滚，如果不能满足，那就应该在一阶段就直接失败。
这就是两阶段提交，常见的分布式事务方法基本都是基于两阶段衍生出来的。</p>
</blockquote>
<figure><img src="http://pub-83c20763effa4ac69b4d6a9e22c9936e.r2.dev/img/f6c17e91b32b47b9752a94f17ca4260c.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure>
<h2>XTS发展-四种模式</h2>
<blockquote>
<p>接下来我们主要介绍的是<strong>TCC模式</strong>，蚂蚁大部分应用使用的都是TCC模式，大家以后接触最多的就是TCC，FMT，saga和XA模式会放到后边的扩展部分进行介绍。</p>
</blockquote>
<p><img src="http://pub-83c20763effa4ac69b4d6a9e22c9936e.r2.dev/img/eba3e9147240d1fe83ee3fc78f1f6e54.png" alt="image.png" loading="lazy">
TCC模式：二阶段提交模式，一阶段try内执行本地事务和远程调用，根据远程调用的成功和失败来决定后续调用 confirm 还是 cancel。
XA模式：需要数据库支持，实现2PC协议，这个时候数据库便能支持分布式事务了。</p>
<p>思考1：TCC模式需要设计者考虑中间状态，try的过程中并不直接对数据进行变更，而是通过中间值体现，在一阶段处理结束的时候，通过commit 或 cancel 来将中间值转化为最终值。需要有良好的设计思维来设计模型。
思考4：XA模式性能注定不会很好，分布式事务基本都具有RPC调用的特性，此时数据库便会存在长事务的情况。正常来说，开发规范都不允许事务内存在RPC调用就是防止长事务的存在。</p>
<p>总结：TCC业务侵入性大但是性能更优，FMT和XA模式无法满足高并发场景，但是这两者都无需开发者关注，配置即可用。SAGA模式个人不太喜欢，这种补偿机制问题颇多，事务补偿异常怎么处理？事务隔离性差导致的数据污染如何处理？这些都是开发者需要关注的东西。</p>
<h1>TCC模式</h1>
<h2>概念</h2>
<blockquote>
<p>先介绍一下TCC几个概念，其实TCC名字就是根据两阶段来起的，第一阶段执行try服务，所有检查操作，可能会导致事务提交失败的操作全都应该放到try中进行。
第二阶段是commit和cancel操作，提交就是commit，反悔了要回滚就是cancel操作，二阶段只会选其中一个执行。
<strong>发起方，是分布式事务的协调者，负责编排参与者，推进执行二阶段。将执行过程记录事务日志。</strong></p>
</blockquote>
<p><strong>帮助理解的 PointKey World：</strong>
<strong>主事务 &amp; 分支事务</strong>
<strong>TM：发起者</strong>
<strong>RM：参与者</strong>
<img src="http://pub-83c20763effa4ac69b4d6a9e22c9936e.r2.dev/img/fb36ae860874979dc1ac1eea159a650e.png" alt="image.png" loading="lazy"></p>
<h2>经典使用场景</h2>
<blockquote>
<p>首先看一个典型的使用场景，app1,app2,app3组成一个分布式系统，
app1分别调用app2和app3做了insert和delete操作，同时app1本身
做了一个update操作，这样整个分布式事务包含3个系统，3个操作。</p>
</blockquote>
<p><img src="http://pub-83c20763effa4ac69b4d6a9e22c9936e.r2.dev/img/731b95aa4b87a3a410b67eaac6ba5ffd.png" alt="image.png" loading="lazy">
<strong>那如何将这个事务设计成TCC二阶段呢？</strong>
比如针对insert这类增加的操作，一阶段就不能直接增加，而是应该在做完检查后，添加一个未达数据，二阶段将未达数据进行追加或者删除。对Delete这类减少操作，一阶段也是不能直接减少，而是应该先做业务检查，然后冻结住，在二阶段将冻结的数据彻底删除或者回滚解除冻结。</p>
<h2>实现原理：TCC两阶段提交</h2>
<blockquote>
<p>图 !important</p>
</blockquote>
<p><img src="http://pub-83c20763effa4ac69b4d6a9e22c9936e.r2.dev/img/7fa0b3259ae9f81eefacea36e8e1ecf4.png" alt="image.png" loading="lazy">
App1是整个事务的发起者，为了能够代表整个事务的状态，发起者必须要有一个本地事务，<strong>并且对所有参与者一阶段的调用，都需要在这个本地事务内发生</strong>，如果在一阶段有任意节点报错了，无法完成，发起者本地事务就需要回滚，如果所有节点一阶段都可以顺利完成，本地事务才能提交。
本地事务结束后表示一阶段已经完成，可以进入二阶段，由于本地事务ACID的原子性，本地事务是一定处于<strong>终态的</strong>，要么是提交状态，要么是回滚状态，就算超时也是回滚状态。
所以二阶段就可以根据本地事务的状态，来协调各个参与者二阶段，是提交还是回滚，二阶段的提交和回滚是不确定的，<strong>所以二阶段是由框架自动执行的</strong>
这个整个过程中会通过记录日志表的方式，持久化所有发生的动作，日志表都是记录到发起者的业务数据库中的，叫做同库模式，事务启动时，会生成一条主事务记录business_activity，表示这一次分布式事务，每调用一次参与者，会生成一条分支事务记录business_action，它和主事务记录是一对多的关系。
那一致性是怎么保证的呢？</p>
<h2>⭐事务一致性保证（重点）</h2>
<p><img src="http://pub-83c20763effa4ac69b4d6a9e22c9936e.r2.dev/img/8cfa32e52651e1a88351c1b024621975.png" alt="image.png" loading="lazy">
这一页是对上一页的一个细化，也是说明<strong>xts如何实现一致性</strong>的核心重点。
发起者在启动事务的时候，先要启动一个本地事务，然后在这个本地事务中调用一下xts提供的start方法，这样xts会立即在<strong>独立的事务模板</strong>中插入一条主事务记录，状态为初始状态，紧接着xts在发起者本地事务中，对刚插入的主事务记录，执行一次状态更新操作，由初始状态更新为确定提交状态，
前面说过，发起者本地事务可以决定整体分布式事务的状态，注意这里的更新操作，通过这一步就可以将主事务日志记录和业务本地事务绑定到一起，所以主事务记录的状态就可以反应整个分布式事务的状态了。
<strong>那怎么绑在一起的？因为xts是在发起者本地事务中执行的更新，本地事务提交，主事务记录肯定就是确定提交状态了，如果本地事务回滚，刚才的更新操作也会跟着回滚到初始状态。</strong>
到这里xts的start方法内部就执行完成了，然后发起者本地事务中的业务代码开始调用各个参与者的一阶段，xts会拦截到每一次调用，还是在独立事务模板中插入一条分支事务记录，然后再执行调用，这样就可以把具体调用过哪些参与者持久化记录下来。
<strong>那主事务记录和分支事务记录的插入操作为什么需要独立事务模板</strong>？是为了本地事务回滚时不影响事务日志的持久化，如果在本地事务中插入事务日志，假如调用某个参与者失败了，本地事务回滚后，插入的事务记录也会一起回滚消失，就不知道整个事务的状态了，另外具体调用过哪些参与者也不知道了，这要是为什么要再加<strong>两张表记录</strong>的原因，不受本地事务的影响。
一阶段完成后，xts会自动执行二阶段，根据本地事务的状态决定调用参与者的commit方法还是cancel方法，二阶段完成后，直接删除事务日志。</p>
<p>疑问：
两条事务线：
绿色线使用单独的事务模板，事务传播特性为PROPAGATION_REQUIRES_NEW
红色线使用发起方本地事务模板，事务传播特性为PROPAGATION_REQUIRES
请问绿线先走红线后走，红线会不会加到绿线的事务</p>
<p>解答：
总结起来，红线事务会作为单独的事务存在，与绿线事务独立，互不影响。
当红线在绿线事务内部开始时，红线事务使用 PROPAGATION_REQUIRED规则，它会检索到当前存在的事务（即绿线的事务）。但是由于绿线的事务是独立的事务，不会发生嵌套，因此红线的事务实际上会是独立的事务（红线本地事务）。</p>
<h2>事务日志状态</h2>
<p><img src="http://pub-83c20763effa4ac69b4d6a9e22c9936e.r2.dev/img/f40bb7c561b498c208ebb6f3e273111d.png" alt="image.png" loading="lazy">
再看一下在执行过程中，主事务日志状态的转化，在business_activity表中通过state列表示状态。
主事务记录是在独立事务中插入的，状态为初始化状态I，可以保证不管本地事务提交不提交，主事务记录一定存在，然后在发起者本地事务中更新为确定提交状态C。
接下来如果本地事务提交，更新操作也会提交，主事务记录状态就是确定提交C，
如果本地事务回滚，更新操作也会回滚，主事务记录状态就会回滚到初始化状态l。
这样有了主事务日志，如果执行过程中出现异常，就可以直接通过主事务日志的状态来表示整个分布式事务的状态了，实际上，事务日志就是为了出现异常时恢复用的，不做业务使用，<strong>如果二阶段正常可以完成，事务日志就用不到，可以直接删除</strong>，客户端执行过程中使用的日志信息都是放到内存中的，不查db，性能高。
那什么情况下会用到呢？</p>
<h2>XTS事务兜底恢复</h2>
<p><img src="http://pub-83c20763effa4ac69b4d6a9e22c9936e.r2.dev/img/387d323bff005e77a1b43838d95a11f0.png" alt="image.png" loading="lazy">
接下来就是XTS事务兜底恢复，如果二阶段在执行参与者B的提交方法时机器断电了，虽然整体事务没有完成，但是发起者数据库中会有这条事务的主事务记录和两个分支事务记录。
<strong>Xts的恢复系统dtap就会到发起者的数据库中，定时捞取到这条主事务记录，发现状态为确定提交状态C，就可以判定这条事务是要提交的，再查询一下关联的business_action分支事务记录，查到这两个参与者信息后，顺序的调用参与者的confirm方法就可以完成恢复。同样的，如果主事务日志是初始化状态l，就调用参与者的cancel方法。</strong>
然后在二阶段完成后，直接删除发起者数据库中的这笔事务日志记录，就可以完成事务的恢复。
这里为了能让dtap可以查询发起者数据源和调用参与者服务，dtap提供了控制台来录入这两个信息，需要人工去录入。</p>
<p>思考：这里的第4步会出现什么问题呢？可能会调用两次，应用调用了一次后才断电（/ 超时），dtap恢复时，不知道是否调用过，只能再次调用，需要支持<strong>幂等</strong>
思考：如果dtap调用参与者B的二阶段confirm时也失败，如何操作？</p>
<ul>
<li>分布式事务的状态是由本地事务决定的！本地事务状态一定是一个终态</li>
<li>其他原因再ci</li>
</ul>
<h2>TCC使用规范</h2>
<ul>
<li>XTS分布式事务TCC是基于两阶段提交（2 phase commit，简称2pc）原理的。</li>
<li>分布式事务必须在本地事务模板中进行。</li>
<li>事务发起者是分布式事务的协调者，发起者本地事务的最终状态（提交或回滚）决定整个分布式事务的最终状态。</li>
<li>执行过程发起者会生成事务日志到业务库的business_activity，business_action表。</li>
<li>事务参与者的方法需要支持两阶段。发起方（使用者）只关注第一阶段的方法，第二阶段由框架自动调用。参与者需要保证：第一阶段如果成功了，第二阶段必须保证成功。</li>
<li>第一阶段完成，第二阶段没执行完的事务需要进行事务恢复，要到dtap去配置发起者和参与者信息，定时（每分钟）捞取发起者db数据business_acitvity进行第二阶段执行。</li>
</ul>
<p>一阶段一定能完成
恢复系统其实是做了应用客户端二阶段没完成的操作。</p>
<h2>TODO - 理论视频  &amp; 案例</h2>
<p>然后通过几个TCC典型金融案例实践加深对XTS的理解</p>
<h1>XA模式</h1>
<figure><img src="http://pub-83c20763effa4ac69b4d6a9e22c9936e.r2.dev/img/331a77d65115a134117aff63e2c3ce75.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure>
]]></content>
    <published>2024-06-29T08:14:25.000Z</published>
  </entry>
  <entry>
    <title type="text">TODO(img) Spring全家桶</title>
    <id>https://zzq8.cn/code/JavaFramework/TODO(img)SpringFamilyBucket.html</id>
    <link href="https://zzq8.cn/code/JavaFramework/TODO(img)SpringFamilyBucket.html"/>
    <updated>2025-08-23T07:39:46.114Z</updated>
    <summary type="html"><![CDATA[
<blockquote>
<p>TODO：笔记太松散了，比较少     可以筛选  拿营养部分</p>
<h4><a class="header-anchor" href="#重要-没看完一节一定去极客的对应视频底下的评论过一下"><span>重要：没看完一节一定去</span></a><a href="https://time.geekbang.org/course/detail/100023501-80193" target="_blank" rel="noopener noreferrer">极客的对应视频</a>底下的评论过一下</h4>
<p>有问题就要带着问题去解决！
240403 再回顾，慢就是快。   要主动学习这样学习内容的留存率更高</p>
<p>20h -&gt; 2h/Day    ===&gt;    10 Day    expect April 19th Finished</p>
<h4>PDF 课件和源代码下载地址：</h4>
<p><a href="https://gitee.com/geektime-geekbang/geektime-spring-family" target="_blank" rel="noopener noreferrer">https://gitee.com/geektime-geekbang/geektime-spring-family</a></p>
<p><a href="https://github.com/digitalsonic/geektime-spring-family" target="_blank" rel="noopener noreferrer">https://github.com/digitalsonic/geektime-spring-family</a></p>
<p>ps：2019年制作的课程，虽然版本已经跟不上现在的步子了，但还是希望能给你带去一些帮助。     架构发展：单机 - 集群 - 云</p>
</blockquote>]]></summary>
    <content type="html"><![CDATA[
<blockquote>
<p>TODO：笔记太松散了，比较少     可以筛选  拿营养部分</p>
<h4><a class="header-anchor" href="#重要-没看完一节一定去极客的对应视频底下的评论过一下"><span>重要：没看完一节一定去</span></a><a href="https://time.geekbang.org/course/detail/100023501-80193" target="_blank" rel="noopener noreferrer">极客的对应视频</a>底下的评论过一下</h4>
<p>有问题就要带着问题去解决！
240403 再回顾，慢就是快。   要主动学习这样学习内容的留存率更高</p>
<p>20h -&gt; 2h/Day    ===&gt;    10 Day    expect April 19th Finished</p>
<h4>PDF 课件和源代码下载地址：</h4>
<p><a href="https://gitee.com/geektime-geekbang/geektime-spring-family" target="_blank" rel="noopener noreferrer">https://gitee.com/geektime-geekbang/geektime-spring-family</a></p>
<p><a href="https://github.com/digitalsonic/geektime-spring-family" target="_blank" rel="noopener noreferrer">https://github.com/digitalsonic/geektime-spring-family</a></p>
<p>ps：2019年制作的课程，虽然版本已经跟不上现在的步子了，但还是希望能给你带去一些帮助。     架构发展：单机 - 集群 - 云</p>
</blockquote>
<h2>线上咖啡项目-SpringBucks</h2>
<p>金额相关不用浮点类型, 而是引用 joda-money jar包    +  usertype.core  jar来实现映射</p>
<p>Q: 老师，请问金融项目，使用浮点数 double 会出什么问题吗？</p>
<p>作者回复: 比如精度、货币转换、单位等等的，还是建议用 Money 类，不要用 Double</p>
<p>BigDecimal只是处理精度而已，对于货币而言，还有货币种类、货币单位、货币转换等很多东西需要考虑的。比如元转分，分转元这些Money都提供了支持。</p>
<p>你想啊，不同的币种他们的单位不同，小数的位数也不同，以人民币为例，我可以用元表示，也可以用分表示，后者数字是前者的100倍，如果我换个币种呢，也许是1000倍，比如伊拉克第纳尔，金额要和货币绑定在一起。你也许还会碰上货币转换等等工作，所以还是用专门的API比较方便。</p>
<h2>｜JDBC</h2>
<h3>H2</h3>
<blockquote>
<p>h2 内存数据库举例（可初始化内嵌数据库 Config/Code 中可指定 schema&amp;data SQL文件）</p>
</blockquote>
<h4>Q: 如何查看 H2 内存数据库的内容？</h4>
<blockquote>
<p>一开始跟着视频走, 只能 commandLine 启动类 log 一下看, 现在能 Web</p>
</blockquote>
<p>你应该在应用程序中运行 H2 web server，这样就可以通过 H2 Console 来访问内存数据库。在 Spring 应用程序中，你可以在应用上下文中声明了一个 web server bean：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B"> org.h2.tools.Server</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B">Configuration</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B"> DataConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B">Bean</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">initMethod</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> "start"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> destroyMethod</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> "stop"</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B"> Server</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> h2WebServer</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B"> SQLException</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B"> Server</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">createWebServer</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"-web"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"-webAllowOthers"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"-webDaemon"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"-webPort"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"8082"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，在应用程序运行期间，你可以在浏览器中输入 <a href="http://localhost:8082" target="_blank" rel="noopener noreferrer">http://localhost:8082</a> 来访问数据库了。</p>
<p>参考 <a href="https://stackoverflow.com/questions/7309359/view-content-of-h2-or-hsqldb-in-memory-database" target="_blank" rel="noopener noreferrer">View content of H2 or HSQLDB in-memory database</a>。</p>
<p>补充:</p>
<ul>
<li><code>spring.h2.console.enabled=true</code>
<ul>
<li>log - <code>jdbc:h2:mem:3e44a043-0e60-4cc1-9491-117ff59842fz</code>(这里 dbname 可以配置的)</li>
</ul>
</li>
<li>Web JDBC URL 填以下 Log 的 'jdbc:h2:mem:testdb' (搞了很久这个地方)</li>
</ul>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">2024</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">04</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">15</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> 16</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">50</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">32.481</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">  INFO </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">44526</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div>]]></content>
    <published>2025-05-24T15:52:39.000Z</published>
  </entry>
  <entry>
    <title type="text">代码CR规范总结</title>
    <id>https://zzq8.cn/code/ZOther/@Test.html</id>
    <link href="https://zzq8.cn/code/ZOther/@Test.html"/>
    <updated>2025-08-23T07:39:46.140Z</updated>
    <summary type="html"><![CDATA[
<h1>风格问题</h1>
<ol>
<li>根据项目配置代码格式化风格，提交之前整体格式化代码。</li>
<li>起名要做到清晰明了，有具体业务含义。</li>
<li>方法起名规则  动词 + 名词。eg: queryOrderDetail, publishPrize。</li>
<li>所有定义(接口，实现类，字段，方法，枚举等等)注释完备, 提高可读性。</li>
<li>所有提供给外部的服务接口，保证注释明确，编写完整使用文档说明。</li>
<li>静态变量建议使用统一的static在当前类或者公共类中维护，便于后续引用和重构维护。</li>
<li>禁止魔法值逻辑。</li>
<li>单个方法功能不宜太多，包含内容太多不容易复用，可读性变差。尽量按照简单的逻辑拆分。</li>
<li>
。</li>
</ol>]]></summary>
    <content type="html"><![CDATA[
<h1>风格问题</h1>
<ol>
<li>根据项目配置代码格式化风格，提交之前整体格式化代码。</li>
<li>起名要做到清晰明了，有具体业务含义。</li>
<li>方法起名规则  动词 + 名词。eg: queryOrderDetail, publishPrize。</li>
<li>所有定义(接口，实现类，字段，方法，枚举等等)注释完备, 提高可读性。</li>
<li>所有提供给外部的服务接口，保证注释明确，编写完整使用文档说明。</li>
<li>静态变量建议使用统一的static在当前类或者公共类中维护，便于后续引用和重构维护。</li>
<li>禁止魔法值逻辑。</li>
<li>单个方法功能不宜太多，包含内容太多不容易复用，可读性变差。尽量按照简单的逻辑拆分。</li>
<li>
。</li>
</ol>
<h1>防御性编程</h1>
<ol>
<li>提供给上游的共用方法对关键入参强校验正确性。所有的public方法的所有字段都需要校验。</li>
</ol>
<p><strong></strong></p>
<figure><img src="https://img-blog.csdnimg.cn/img_convert/fc0ae95cd9580e9b57cbc41166a41528.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p><strong></strong></p>
<figure><img src="https://img-blog.csdnimg.cn/img_convert/17185d5767e039db08cb7f5da39e9d2d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<ol start="2">
<li>字段校验不只是要校验是否为空，要根据业务规则进行校验。
<ol>
<li>字符串校验长度。</li>
<li>数字校验上限和下限。</li>
<li>枚举类型要校验是否是合法枚举值。</li>
</ol>
</li>
</ol>
<p><strong></strong></p>
<figure><img src="https://img-blog.csdnimg.cn/img_convert/67e5cf8038ef81dc2abdfab36e87f58d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<ol start="3">
<li>领域模型数据校验内聚于领域模型内部，对外只暴露实际校验方法供其他流程调用。</li>
</ol>
<p><strong></strong></p>
<figure><img src="https://img-blog.csdnimg.cn/img_convert/f69a595ed885f268dc0fe0a09e7f0411.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p><strong></strong></p>
<figure><img src="https://img-blog.csdnimg.cn/img_convert/650bc2ed90117930a0436d689a322ad7.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<ol start="4">
<li>
<ol>
<li>
</li>
<li>
</li>
<li>
</li>
</ol>
</li>
<li>
</li>
</ol>
<p><strong></strong></p>
<figure><img src="https://img-blog.csdnimg.cn/img_convert/d4bb83b197f685de9cd55e1be58ac7d4.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p><strong></strong></p>
<h1>远程调用</h1>
<ol>
<li><strong>返回结果三态的检查不能忘</strong></li>
</ol>
<p><strong></strong></p>
<figure><img src="https://img-blog.csdnimg.cn/img_convert/fc88718b6adb9594afbecab47bd0cdf0.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p><strong></strong></p>
<figure><img src="https://img-blog.csdnimg.cn/img_convert/ab24eaa1ed6dc73b81d04138250e58a8.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<ol start="2">
<li>明确下游API是否幂等，幂等号生成规则是什么和幂等的维度是租户维度, 商户维度，活动维度？</li>
<li>异常处理（比如你调用别人接口异常了怎么处理，是重试还是直接失败），出现异常之后上下游数据是否一致。</li>
<li>超时处理（超时后是直接断开保护本系统还是等待返回？），出现超时之后上下游数据是否一致。</li>
<li>外部调用的API升级时是否和老版本接口兼容，接口返回结构层面的兼容逻辑，例如状态码、返回值、返回结构等。</li>
</ol>
<h1>并发处理</h1>
<ol>
<li>强制统一使用 SOFA 线程池，包含监控、超时堆栈、traceID（用于 RPC 自定义线程池）和动态配置的能力。SOFA 线程池 100% 兼容原生线程池。参见：<a href="https://yuque.antfin-inc.com/middleware/sofaboot/gdcd1p" target="_blank" rel="noopener noreferrer">SOFA 线程池的使用文档</a></li>
</ol>
<p><strong></strong></p>
<figure><img src="https://img-blog.csdnimg.cn/img_convert/3d21418087e7d749c0d6fccf51be2c7c.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p><strong></strong></p>
<figure><img src="https://img-blog.csdnimg.cn/img_convert/f3ad6616edcebef64902aa88e30f6bcc.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<ol start="2">
<li>异步处理的任务使用TracerRunnable代替Runnable，TracerCallable代替Callable，防止trace丢失。</li>
</ol>
<p>错误示例</p>
<figure><img src="https://img-blog.csdnimg.cn/img_convert/613b4c83c3c977e0223f25a22708f319.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>正确示例</p>
<figure><img src="https://img-blog.csdnimg.cn/img_convert/44470d05716cece189ac60179e99d302.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<ol start="3">
<li>线程上下文一定要记得清除</li>
</ol>
<p>错误示例</p>
<figure><img src="https://img-blog.csdnimg.cn/img_convert/03ee7ea885d1a0e9918c12d2f81b76be.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>正确示例</p>
<figure><img src="https://img-blog.csdnimg.cn/img_convert/97224edd3c1a88e311a97872edd6c466.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<ol start="4">
<li>使用CountDownLatch进行异步转同步操作时，每个线程退出前必须调用countDown方法，线程执行代码注意catch异常，确保countDown方法可以执行，避免主线程无法执行至countDown方法，直到超时才返回结果。</li>
</ol>
<p>错误示例</p>
<figure><img src="https://img-blog.csdnimg.cn/img_convert/aba1802d32263d241ef488da1c5a1cb5.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>正确示例</p>
<figure><img src="https://img-blog.csdnimg.cn/img_convert/a5fd46a19229e2ac165356769eeb6974.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h1>数据库操作</h1>
<ol>
<li>insert，update, delete数据完成时强制校验行数是否符合预期</li>
</ol>
<p><strong>错误示例</strong></p>
<figure><img src="https://img-blog.csdnimg.cn/img_convert/f9577d4d9ada91fe6a590dc98e0af8d2.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p><strong>正确示例</strong></p>
<figure><img src="https://img-blog.csdnimg.cn/img_convert/1ef9a3d3d4350e9aff1318a250ecbe5b.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<ol start="2">
<li>查询sql语句不允许查询*，而是显示列出需要查询的字段
<ol>
<li>
</li>
<li>
</li>
<li>
</li>
</ol>
</li>
</ol>
<p>错误示例</p>
<figure><img src="https://img-blog.csdnimg.cn/img_convert/69c8b820c273cba926fdb76664bf1a6a.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>正确示例</p>
<figure><img src="https://img-blog.csdnimg.cn/img_convert/65452a8d5db18efd3d4193734ed9a842.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<ol start="3">
<li>不允许无脑 update</li>
</ol>
<p>正确示例</p>
<figure><img src="https://img-blog.csdnimg.cn/img_convert/e8740d4e96c989c0e2d54b17f463fe6d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>错误示例</p>
<figure><img src="https://img-blog.csdnimg.cn/img_convert/18292d8a5b4792ac0ecc559f8c60d6c5.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<ol start="4">
<li>单条数据更新，使用id作为更新条件</li>
</ol>
<p>错误示例</p>
<figure><img src="https://img-blog.csdnimg.cn/img_convert/e16f975276253ab71f2a8b13b191d928.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>正确示例</p>
<figure><img src="https://img-blog.csdnimg.cn/img_convert/16d04e197b803541da6bad4ad19a812f.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<ol start="5">
<li>查询一定要考虑索引</li>
</ol>
<p>错误示例</p>
<figure><img src="https://img-blog.csdnimg.cn/img_convert/d772a53bff165aee6170d0b33268c17e.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>正确示例</p>
<ol start="6">
<li>一锁二判三更新</li>
</ol>
<p>错误示例</p>
<figure><img src="https://img-blog.csdnimg.cn/img_convert/4f160e595abe71951deba0eba474a5d9.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<figure><img src="https://img-blog.csdnimg.cn/img_convert/8fdabc95b88db72335c9752fbfb0dafc.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>正确示例</p>
<figure><img src="https://img-blog.csdnimg.cn/img_convert/55ff09e21b33c07be7f63808233ae10a.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<ol start="7">
<li>涉及多条数据循环调用sql插入时改成批量的，并且考虑每次批量插入的条数。</li>
</ol>
<p>错误示例</p>
<figure><img src="https://img-blog.csdnimg.cn/img_convert/a6daa17e399a41b20aede682eeb1f273.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>正确示例</p>
<figure><img src="https://img-blog.csdnimg.cn/img_convert/1183d9be9d32aaef45c2e19541e27bea.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<ol start="8">
<li>每次新增的查询语句是否能命中索引。</li>
</ol>
<p>错误示例<img src="https://img-blog.csdnimg.cn/img_convert/d460e7d5771108c7cf912fd7e670eca2.png" alt="" loading="lazy"></p>
<p>正确示例</p>
<figure><img src="https://img-blog.csdnimg.cn/img_convert/0f47421a4706d474f869a7b0e9b8507f.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<ol start="9">
<li>
</li>
</ol>
<p>正确示例
<img src="https://i-blog.csdnimg.cn/direct/de59078cafdc4146b873caedf4fb24d3.png" alt="在这里插入图片描述" loading="lazy"></p>
<ol start="10">
<li>索引设计是否合理，是唯一索引还是普通索引，尽量避免在线进行索引增加，删除操作</li>
</ol>
<p><strong></strong></p>
<p><a href="https://yuque.antfin-inc.com/fu9ehx/bixhha/neoo69kr1yri39wo" target="_blank" rel="noopener noreferrer">20240627-故障案例学习</a></p>
<ol start="11">
<li>分表场景单表局部热点风险</li>
</ol>
<p>错误示例</p>
<p>分片的一个作用是提高可用性，降低单点带来的风险，但是如果分库分表位的选择不合理则无法发挥这个作用</p>
<p>举例代码如下：</p>
<figure><img src="https://img-blog.csdnimg.cn/img_convert/175bd775daf9b8cd71fec0dd5e97052e.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<figure><img src="https://img-blog.csdnimg.cn/img_convert/6e49dfea401347499f916bc83251bc4a.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>正确示例: 动态获取用户ID来作为分库分表的信息，降低单点风险</p>
<figure><img src="https://img-blog.csdnimg.cn/img_convert/e60ff9d43a636cdc3f79c1e440349953.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h1>事务问题</h1>
<ol>
<li>根据使用的是逻辑库还是物理库选择正确的事务模板。</li>
</ol>
<p>错误示例</p>
<figure><img src="https://img-blog.csdnimg.cn/img_convert/ec458e7f6f7c3480c94c7ae03e2c58ee.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>正确示例</p>
<figure><img src="https://img-blog.csdnimg.cn/img_convert/2abf1cd9480cb3aa080b4c917cc9a004.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<ol start="2">
<li>跨数据连接，事务无效</li>
</ol>
<p>错误示例</p>
<figure><img src="https://img-blog.csdnimg.cn/img_convert/b4d8869227907ffd821273780312e30d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>正确示例</p>
<div class="language-plain line-numbers-mode" data-highlighter="shiki" data-ext="plain" data-title="plain" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>        sharingTransactionTemplate.execute(new TransactionCallbackWithoutResult() {</span></span>
<span class="line"><span>            @Override</span></span>
<span class="line"><span>            protected void doInTransactionWithoutResult(TransactionStatus status) {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>                    // 保存外部订单，数据源1</span></span>
<span class="line"><span>                    affiliateOutOrderRepository.insert(affiliateOutOrder);</span></span>
<span class="line"><span>                        </span></span>
<span class="line"><span>                    // 保存外部订单返佣</span></span>
<span class="line"><span>                    outOrderCommission.setInnerOrderId(affiliateOutOrder.getId());</span></span>
<span class="line"><span></span></span>
<span class="line"><span>                    // 保存外部订单返佣</span></span>
<span class="line"><span>                    affiliateOutOrderCommissionRepository.insert(outOrderCommission);</span></span>
<span class="line"><span>                    orderUserBenefit.setInnerOrderId(affiliateOutOrder.getId());</span></span>
<span class="line"><span>                    orderUserBenefit.setCommissionId(outOrderCommission.getId());</span></span>
<span class="line"><span>                    affiliateOutOrderUserBenefitRepository.insert(orderUserBenefit);</span></span>
<span class="line"><span>            }</span></span>
<span class="line"><span>        });</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3">
<li>长事务问题，事务中有远程调用</li>
</ol>
<p>错误示例</p>
<figure><img src="https://img-blog.csdnimg.cn/img_convert/99f391fe724d77b9349d92a5315323a7.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>正确示例</p>
<figure><img src="https://img-blog.csdnimg.cn/img_convert/ec07bcfd31d43c1f910978673ac55cf0.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<ol start="4">
<li>合理设计索引，尽量缩小锁的范围
<ol>
<li>合理设计索引，可以尽量缩小锁的范围，从而减少锁竞争提高并发性能。</li>
</ol>
</li>
<li><s>单条数据库操作不要开事务</s></li>
</ol>
<p><s>错误示例</s></p>
<p><s>正确示例</s></p>
<ol start="6">
<li>事务性消息一定要再事务中发送</li>
</ol>
<p>错误示例</p>
<p>正确示例</p>
<figure><img src="https://img-blog.csdnimg.cn/img_convert/eabff4a780d3d5fd3d78c36b75137c33.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h1>消息问题</h1>
<ol>
<li>重复、流失、乱序、限流</li>
</ol>
<p>错误示例</p>
<p>正确示例</p>
<ol start="2">
<li>可重入问题</li>
</ol>
<p>错误示例</p>
<p>正确示例</p>
<ol start="3">
<li>什么时候用事务性消息，更新DB和发消息在一个事务中，避免DB更新失败，机器故障或者重启导致消息未发送，产生不一致</li>
</ol>
<p>错误示例</p>
<p>正确示例</p>
<ol start="4">
<li>事务型消息一定要有checker</li>
</ol>
<p><a href="https://yuque.antfin-inc.com/middleware/msgbroker/pubsub" target="_blank" rel="noopener noreferrer">事务型消息原理</a></p>
<h1>缓存问题</h1>
<ol>
<li>缓存必须要使用common库</li>
</ol>
<p><strong></strong></p>
<figure><img src="https://img-blog.csdnimg.cn/img_convert/6d7480e4ad81279b4d30bb377c16f802.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>正确示例</p>
<figure><img src="https://img-blog.csdnimg.cn/img_convert/2cb298f6a61ae508beebb596fc7c9a45.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<ol start="2">
<li>缓存key的设计需要仔细考虑
<ol>
<li>环境隔离</li>
<li>压测隔离</li>
<li>不兼容时的版本隔离</li>
</ol>
</li>
</ol>
<p><a href="https://yuque.antfin-inc.com/gc206i/cflnuu/pqu9da?" target="_blank" rel="noopener noreferrer">[P4]用户反馈零售通频道页商品不展示</a></p>
<p>错误示例</p>
<figure><img src="https://img-blog.csdnimg.cn/img_convert/43cacdc8ec80a23dbb8afc77318e02e3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>正确示例</p>
<figure><img src="https://img-blog.csdnimg.cn/img_convert/6900c047c8a041c79175711e2ebb6bc2.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<ol start="3">
<li>序列化的方式</li>
</ol>
<p>序列化方式统一规定使用JSON，不使用HESSIAN</p>
<p><strong></strong></p>
<figure><img src="https://img-blog.csdnimg.cn/img_convert/7d9e92519ba98b28a1fb4ee465e4147d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<ol start="4">
<li>key的null存储</li>
</ol>
<p>错误示例
<img src="https://i-blog.csdnimg.cn/direct/ca1a6ba3154c4f43bc68db0d4c906298.png" alt="在这里插入图片描述" loading="lazy"></p>
<p>正确示例</p>
<figure><img src="https://img-blog.csdnimg.cn/img_convert/cf5c84ad1d548938368b8f2bc9d64544.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<ol start="5">
<li>key的过期时间</li>
</ol>
<p>错误示例</p>
<figure><img src="https://img-blog.csdnimg.cn/img_convert/8b0189e2b1aeb0f73d46980bbfaf2c43.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>正确示例</p>
<figure><img src="https://img-blog.csdnimg.cn/img_convert/81381e2130be24ad39e9fe383fe99c6b.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<ol start="6">
<li>key的击穿影响分析</li>
</ol>
<p><a href="https://yuque.antfin.com/sd/ufwbxo/puaiys2d4wikb4e1?singleDoc#" target="_blank" rel="noopener noreferrer">【P3】0531 LZD-支付咨询(分站点)下跌</a></p>
<p>错误示例</p>
<p>正确示例</p>
<ol start="7">
<li>key的更新策略
<ol>
<li>过期删除：当缓存过期时，主动失效，当击穿缓存时回源查询并更新缓存。</li>
<li>主动刷新: 缓存中key不过期，在DB中数据变化时，主动构建新值并更新到缓存中</li>
</ol>
</li>
<li>兼容性问题</li>
</ol>
<p>错误示例:</p>
<figure><img src="https://img-blog.csdnimg.cn/img_convert/326d86847179b01a71cae3e372f57b2a.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>正确示例</p>
<figure><img src="https://img-blog.csdnimg.cn/img_convert/7e8792c093f0cce9098a0e5075d30411.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h1>金额问题</h1>
<ol>
<li>必须使用multiMoney，MultiBigDecimalMoney类，要考虑精度和四舍五入算法。</li>
</ol>
<p>正确示例</p>
<figure><img src="https://img-blog.csdnimg.cn/img_convert/231b5aba8c46ab47f9b6c16503f05c47.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<ol start="2">
<li>金额计算使用统一封装工具类，严禁自行计算。</li>
</ol>
<p>正确示例</p>
<figure><img src="https://img-blog.csdnimg.cn/img_convert/b88ec5a5bda1dd67009d581d80ef9ba4.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<ol start="3">
<li>注意金额计算相同功能的不同实现差别，比如 add, addTo。divide, divideBy。</li>
</ol>
<p>错误示例</p>
<figure><img src="https://i-blog.csdnimg.cn/direct/cf7b880594554d169af197cac418be70.png" alt="在这里插入图片描述" tabindex="0" loading="lazy"><figcaption>在这里插入图片描述</figcaption></figure>
<p>正确示例</p>
<figure><img src="https://img-blog.csdnimg.cn/img_convert/db55b87b343954696e5ffd426620877d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<ol start="4">
<li>增减金额平衡性校验</li>
</ol>
<p>错误示例</p>
<figure><img src="https://img-blog.csdnimg.cn/img_convert/2db6e63c8aa9fa4ac74732b9553118a0.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p><strong></strong></p>
<figure><img src="https://img-blog.csdnimg.cn/img_convert/c1e82eca7c54cc46bbade2e2b375593c.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<figure><img src="https://img-blog.csdnimg.cn/img_convert/4c59b5edfba77a67c38331ba21e1a645.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<figure><img src="https://img-blog.csdnimg.cn/img_convert/c7ae065fe1e5c183e9dc72ef575f500c.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h1>编码规约</h1>
<ol>
<li>使用诸如StringUtil, CollectionUtils等工具类操作，而不是直接采用原始类型，因为已经对null值进行了处理</li>
</ol>
<p>错误示例:下列代码没有判断lineMap是否为null，直接取size，有空指针风险，换成MapUtils.isEmpty更为可靠</p>
<figure><img src="https://i-blog.csdnimg.cn/direct/9459e4b54d424276b96644d5a1466409.png" alt="在这里插入图片描述" tabindex="0" loading="lazy"><figcaption>在这里插入图片描述</figcaption></figure>
<p>正确示例</p>
<figure><img src="https://img-blog.csdnimg.cn/img_convert/7b5d8e7962964bd7b470da7be0e48dd5.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<ol start="2">
<li>不使用复杂的if else 条件，而是抽成判断是否满足if条件的方法。</li>
</ol>
<p>错误示例</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/8e7e28298bd004738c0ce9b52e8a03fb.png" alt="" loading="lazy"><img src="https://img-blog.csdnimg.cn/img_convert/2a789ec160915dc07d0cdb7b93507f7e.png" alt="" loading="lazy"></p>
<p>正确示例</p>
<figure><img src="https://img-blog.csdnimg.cn/img_convert/9301330a3b0e772587380d2ec8d5a83d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<ol start="3">
<li>杜绝使用BeanUtils.copyProperties，尤其是Entity、Model和VO之间。同一名字不同类型不能拷贝，导致字段值缺失。老老实实set&amp;get。</li>
</ol>
<p>错误示例</p>
<figure><img src="https://i-blog.csdnimg.cn/direct/ac4ef8ad35dc4f91b6778ec3671e2d3a.png" alt="在这里插入图片描述" tabindex="0" loading="lazy"><figcaption>在这里插入图片描述</figcaption></figure>
<p>正确示例</p>
<figure><img src="https://img-blog.csdnimg.cn/img_convert/69d8f5db9cbf870f93ee2dbefe016b39.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<ol start="4">
<li>POJO中的变量直接赋值，禁止夹杂额外逻辑。</li>
</ol>
<p>错误示例</p>
<figure><img src="https://img-blog.csdnimg.cn/img_convert/2fa52cade3e76efc247072e3275cb4a4.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>正确示例</p>
<figure><img src="https://img-blog.csdnimg.cn/img_convert/ce2b9a93215f8aac1b36fb496c67ca92.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<ol start="5">
<li>根据业务规则找准try-catch的范围，try-catch范围不准结果都不好。比如说是for循环里面try-catch还是整个循环try-catch 是两种不同的结果。允许失败跳过的情况内部处理。不允许失败的情况外部处理。</li>
</ol>
<p>错误示例</p>
<figure><img src="https://img-blog.csdnimg.cn/img_convert/b000fdd2d035a5ab78c64d83f5bd57e8.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>正确示例</p>
<figure><img src="https://img-blog.csdnimg.cn/img_convert/802da43c14e1039c432cccc3aec17dd0.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<ol start="6">
<li>避免使用多个级联get，容易造成数组越界，NPE，使用Optional操作的判空操作。</li>
</ol>
<p>错误示例</p>
<figure><img src="https://img-blog.csdnimg.cn/img_convert/f2c4802ee82a9ae50ae3aff75365edbd.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>正确示例</p>
<div class="language-plain line-numbers-mode" data-highlighter="shiki" data-ext="plain" data-title="plain" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>        standardProductView.setOnSaleTimeStart(</span></span>
<span class="line"><span>            Optional.ofNullable(product.getOnSaleBeginTime()).map(Date::getTime).orElse(null));</span></span>
<span class="line"><span>        standardProductView.setOnSaleTimeEnd(</span></span>
<span class="line"><span>            Optional.ofNullable(product.getOnSaleEndTime()).map(Date::getTime).orElse(null));</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="7">
<li>对外部提供的服务接口定义查询和响应禁用枚举。</li>
</ol>
<p><strong></strong></p>
<figure><img src="https://img-blog.csdnimg.cn/img_convert/56b2071a645583eea12f548335cf5374.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p><strong></strong></p>
<figure><img src="https://img-blog.csdnimg.cn/img_convert/290a45dd7fd02830f0da0aa1496a8aa1.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h1>日志打印</h1>
<ol>
<li>
</li>
</ol>
<p>错误示例</p>
<figure><img src="https://i-blog.csdnimg.cn/direct/9c9bed0ab21f4a9f822353c841540c33.png" alt="在这里插入图片描述" tabindex="0" loading="lazy"><figcaption>在这里插入图片描述</figcaption></figure>
<p>正确示例：在ServiceTemplate模板类中会统一格式打印日志。</p>
<figure><img src="https://i-blog.csdnimg.cn/direct/d8f1a7a7493d435683462e75053b8fec.png" alt="在这里插入图片描述" tabindex="0" loading="lazy"><figcaption>在这里插入图片描述</figcaption></figure>
<ol start="2">
<li>打印异常日志时一定包含堆栈信息，如果仅包含提示信息，异常堆栈被丢弃，问题排查困难。</li>
</ol>
<p><strong></strong></p>
<figure><img src="https://img-blog.csdnimg.cn/img_convert/dcdd1bd57a06f8e39a0658c2309dad42.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<figure><img src="https://img-blog.csdnimg.cn/img_convert/1c33ad4f9105c999703a136a07c1c415.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p><strong></strong></p>
<figure><img src="https://img-blog.csdnimg.cn/img_convert/c416d96104d0cbef627c50c248e79087.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<ol start="3">
<li>日志打印保持格式清晰，关键字段齐备，做到监控可配置，排查问题快速定位。</li>
</ol>
<figure><img src="https://i-blog.csdnimg.cn/direct/9349a33b53944dad916d4f2e73ca40e0.png" alt="在这里插入图片描述" tabindex="0" loading="lazy"><figcaption>在这里插入图片描述</figcaption></figure>
<figure><img src="https://img-blog.csdnimg.cn/img_convert/3604c7fd9f06e63be12fd0e187752154.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<figure><img src="https://img-blog.csdnimg.cn/img_convert/dfefbc21688194b372ad6b166a9239fd.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<ol start="4">
<li>
</li>
</ol>
<figure><img src="https://img-blog.csdnimg.cn/img_convert/8465efefdb9ddcfdd80e960160fbcd58.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h1>性能问题</h1>
<ol>
<li>所有接口必须要有性能监控的日志，放到模版日志里</li>
<li>C端接口不需要经过压测才能上线</li>
<li>C端要注意使用缓存</li>
<li>非关键依赖，同步转异步</li>
</ol>
<h1>设计问题</h1>
<ol>
<li>领域模型要核对友好，上下游关键字段是否可核对。一层核对，二层核对，三层核对。</li>
<li>考虑发布兼容性，发布中间态存在新逻辑，新数据，老逻辑，老数据。</li>
<li>考虑隔离性
<ol>
<li>不同商户，用户，渠道数据如何隔离。</li>
<li>不同商户，用户，渠道故障如何隔离。</li>
</ol>
</li>
<li>清晰明了的切流灰度逻辑。
<ol>
<li>切流方法是是什么，参数中心，drm？</li>
<li>切流维度是什么，商户，用户，活动？</li>
<li>新老逻辑是否能回切？</li>
</ol>
</li>
</ol>
<h1>测试用例</h1>
<ol>
<li>每个迭代必须提供自测用例，可以规避很多不必要的线上问题。</li>
<li>单元测试一个方法测试一个功能的各种情况，不要把所有的功能融合在一个方法中。</li>
<li>单元测试用例的编写要考虑先写一种执行成功的情况，还要覆盖失败的case，并且要按照场景进行覆盖。</li>
<li>清除数据，准备数据，执行用例，校验数据（返回结果的校验，db的校验）</li>
</ol>
<h1>测试用例-XD补充</h1>
<blockquote>
<p>自测-证明测了</p>
<p><strong>单测-不被篡改、保护稳定运行的一种手段</strong></p>
</blockquote>
<h2>操作流程</h2>
<p>xd: 犯以下错误:</p>
<p>知识铺垫</p>
    ********    <blockquote>
</blockquote>
<blockquote>
    </blockquote>
<h2></h2>
<blockquote>
</blockquote>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">// 在测试方法的最后，验证具体的调用</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">Mockito</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">verify</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(cacheManager).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">putObjectWithExpire</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379">    "STOP_CHAT_CACHE_KEY_PREFIX_userId123_202409282011727514756414_202409282021727514756405"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">    Boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">FALSE</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">    120</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">);</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>// 用到mock注解的得使用下面才能生效</p>
<p>MockitoAnnotations.openMocks(this);</p>
<p><strong></strong></p>
</blockquote>
<figure><img src="https://intranetproxy.alipay.com/skylark/lark/0/2024/png/135356742/1727346395904-e353b890-d2b9-4908-b3d3-d1552c7050ed.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>MockUtil.mockField(distributedLockService, "distributedLock", distributedLock);</p>
<p><strong></strong></p>
<blockquote>
<p>chat 监听器回调mock   卡很久，发现有个API可以操作</p>
</blockquote>
<pre><code>   Mockito.doAnswer(new Answer() {

        @Override

        public Object answer(InvocationOnMock invocationOnMock) throws Throwable {

            System.out.println(invocationOnMock.getArguments());

            return invocationOnMock.getArguments();

        }

    }).when(botStreamChatFacade).streamChat(any(), any());
</code></pre>
<h2>✨ Mock 方式两种 - </h2>
<h3>注解方式</h3>
<div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">   /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">     * ilmmodelClient</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">     */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    @</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">Autowired</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    @</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">InjectMocks</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> IlmmodelClientImpl</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">     ilmmodelClientImpl</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">    /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">     * TtsFacade</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">     */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    @</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">Mock</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> TtsFacade</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">              ttsFacade</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">MockitoAnnotations</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">openMocks</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B">this</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">);</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3>代码方式</h3>
<div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">// 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">TtsFacade</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> ttsFacade</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B"> Mockito</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">mock</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">TtsFacade</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">class</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">// 并不是1,3就直接可以了    别忘记还有个该field注入到源class的操作.   需要通过反射解决</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">// 3</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">Mockito</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">when</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">ttsFacade</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">executeGenericTts</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">Mockito</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">any</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">())).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">thenReturn</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">mockResult</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">);</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>keypoint</strong></p>
<hr>
<p><strong>全盘逻辑</strong></p>
<hr>
<div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">private</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> backupOriginalField</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> target</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> fieldName</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">                                            Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> mock</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> IllegalAccessException</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">                                                         NoSuchFieldError</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">        // TODO: 2025/1/11 单侧为什么需要获取真实对象而非代理对象？</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">        // 获取真实对象而非代理对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">        target</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> getSingletonTarget</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">target</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">        Field</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> field</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> getField</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">target</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">fieldName</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">        Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> originFieldValue</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B"> field</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">get</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">target</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">        // 如果已经替换过了，抛出异常</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">        Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> replaced</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B"> REPLACED_FIELDS</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">computeIfAbsent</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">target</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, (</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">key</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">-&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> ConcurrentHashMap</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">&lt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">()).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">get</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">fieldName</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">Objects</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">isNull</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">replaced</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">            // 不应该重复替换原成员</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">            throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> IllegalStateException</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"非法覆盖"</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> target</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2"> +</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> "成员"</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> fieldName</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2"> +</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> "原始引用记录"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">        field</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">set</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">target</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">mock</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">        log</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">debug</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"已替换"</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> target</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2"> +</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> "对象的成员"</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> fieldName</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2"> +</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379"> "为"</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> mock</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">Objects</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">isNull</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">originFieldValue</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">)) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">            // ConcurrentHashMap不能put null对象，null成员也没有必要备份</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B">            REPLACED_FIELDS</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">computeIfAbsent</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">target</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, (</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">key</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">-&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> ConcurrentHashMap</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">&lt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">put</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">fieldName</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">originFieldValue</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">private</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> static</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> Field</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF"> getField</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> target</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> fieldName</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">        Field</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> field</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">        Class</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">?</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> type</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B"> target</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">getClass</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">  // TODO 这里为什么while,  看catch逻辑会向父类找  所以while</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">        while</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">type</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2"> !=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">            try {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">                field</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">getDeclaredField</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">fieldName</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">                break</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">            } catch (NoSuchFieldException e) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">                type = type.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">getSuperclass</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">field</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2"> ==</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">            throw new </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">NoSuchFieldError</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">        field</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">setAccessible</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">true</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> field</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    }</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>todo解释:</p>
<ul>
<li>
``````</li>
<li><strong></strong></li>
<li>
</li>
</ul>
<ul>
<li>computeIfAbsent适用于两层嵌套的map   拿到/初始化里层map</li>
</ul>
<div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">// NoSuchFieldException</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">Field</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> field</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B"> clazz</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF">getDeclaredField</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379">"ttsFacade"</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">// todo 如果我不加这一行的话，field 无法被获取到吗</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content>
    <published>2025-05-24T15:52:39.000Z</published>
  </entry>
  <entry>
    <title type="text">Git</title>
    <id>https://zzq8.cn/code/ZOther/Git.html</id>
    <link href="https://zzq8.cn/code/ZOther/Git.html"/>
    <updated>2025-08-23T07:39:46.255Z</updated>
    <summary type="html"><![CDATA[
<h2>基础学习</h2>
<blockquote>
<p>✨<a href="https://oschina.gitee.io/learn-git-branching/" target="_blank" rel="noopener noreferrer">Git 学习游戏网站</a></p>
<p>https://m.runoob.com/git/git-basic-operations.html</p>
<p>有时间再梳理这篇文章, 只保留有用的   不要繁琐,繁琐了不会看</p>
</blockquote>
<img src="https://www.runoob.com/wp-content/uploads/2015/02/git-command.jpg" alt="img" style="zoom:150%;">]]></summary>
    <content type="html"><![CDATA[
<h2>基础学习</h2>
<blockquote>
<p>✨<a href="https://oschina.gitee.io/learn-git-branching/" target="_blank" rel="noopener noreferrer">Git 学习游戏网站</a></p>
<p>https://m.runoob.com/git/git-basic-operations.html</p>
<p>有时间再梳理这篇文章, 只保留有用的   不要繁琐,繁琐了不会看</p>
</blockquote>
<img src="https://www.runoob.com/wp-content/uploads/2015/02/git-command.jpg" alt="img" style="zoom:150%;">
<ul>
<li>workspace：工作区</li>
<li>staging area：暂存区/缓存区</li>
<li>local repository：版本库或本地仓库</li>
<li>remote repository：远程仓库</li>
</ul>
<h2>日常使用</h2>
<p>日常自己仓库就三步:</p>
<ul>
<li>git status -sb (--short, --branch)   <mark>xd 不会了就 git status -help</mark></li>
<li>git commit -av</li>
<li>git push</li>
</ul>
<p>其他常用:</p>
<ul>
<li>
<p>git log --oneline (单行形式展示日志)</p>
</li>
<li>
<p>使用 git checkout 命令回退指定的文件到上一个版本，<strong>多个文件用空格隔开</strong></p>
<ul>
<li>git checkout HEAD~1 -- package-lock.json package.json</li>
</ul>
</li>
<li>
<p>git rm -r --cached xx (清除指定文件的 git 版本控制)</p>
</li>
<li>
<p>git checkout &lt;上一个版本的提交哈希值&gt; -- &lt;文件路径&gt; （git 回滚指定文件到上一个版本）</p>
<ul>
<li>【实测】如果你想要抛弃工作区的修改，可以使用git checkout命令。git checkout -- .</li>
</ul>
</li>
</ul>
<p>扩展知识：</p>
<ul>
<li>
<p>规定了<a href="https://zhuanlan.zhihu.com/p/182553920" target="_blank" rel="noopener noreferrer">commit message</a>的格式（TODO，我个人觉得还蛮重要，看网站提到的背景）</p>
</li>
<li>
<p><code>--</code>在命令行中的作用是提供一个明确的分隔符，以确保命令的选项、参数或文件路径被正确解析。</p>
<ul>
<li>例如，<code>git log -- -file.txt</code>中的<code>--</code>用于明确表示<code>-file.txt</code>是参数而不是选项</li>
<li>例如，<code>git checkout branch-name -- file.txt</code>中的<code>--</code>用于分隔<code>branch-name</code>和<code>file.txt</code>，以明确表示<code>file.txt</code>是文件路径而不是分支名称。</li>
</ul>
</li>
</ul>
<h4>IDEA 中 git Merge Select into Current 和 Pull into Current using merge有什么区别</h4>
<blockquote>
<ul>
<li>Merge Select into Current 适用于合并指定远程分支的更改到当前分支。</li>
<li>Pull into Current using merge 适用于拉取远程分支的最新更改并合并到当前分支。</li>
</ul>
</blockquote>
<ul>
<li>
<p>Merge Select into Current: <strong>实测没有fetch，直接以现有的log记录去merge</strong></p>
<ul>
<li>git merge refs/remotes/origin/gptsh_dlx_b1</li>
</ul>
</li>
<li>
<p>Pull into Current using merge: <strong>实测先fetch再merge</strong></p>
<ul>
<li>git fetch origin --recurse-submodules=no --progress --prune
<ul>
<li>如有信息输出：remote: Total 10 (delta 0), reused 0 (delta 0), pack-reused 0 (from 0)
From gitlab.alipay-inc.com:cangxi.lj/gptsh
5e991b2..d7972bd  gptsh_dlx_b1 -&gt; origin/gptsh_dlx_b1</li>
<li>如没信息就这一步完了就 return，提示 All filles are up to date</li>
</ul>
</li>
<li>git merge origin/gptsh_dlx_b1 --no-stat -v</li>
</ul>
</li>
</ul>
<h1>-</h1>
<h1>-</h1>
<hr>
<h1>繁琐的以前</h1>
<h2><a class="header-anchor" href="#_1-前置配置"><span></span></a><a href="https://blog.csdn.net/weixin_42310154/article/details/118340458" target="_blank" rel="noopener noreferrer">1.前置配置</a></h2>
<blockquote>
<p>云服务器的 Git 我捣鼓了好久~
由于云服务器网络、地区CN   http协议去连 Github 有点抽风，固我第一次尝试了 ssh 协议！！！   好使</p>
</blockquote>
<ol>
<li>生成ssh key  <code>ssh-keygen -t rsa -C "xxx@xxx.com"</code></li>
<li>获取ssh key公钥内容（id_rsa.pub）   <code>cat ~/.ssh/id_rsa.pub</code></li>
<li>把 cat 到的公钥内容放入 Github SSH配置里</li>
<li>验证是否设置成功   <code>ssh -T git@github.com</code></li>
</ol>
<h3>通俗解释！！</h3>
<p>重点来了：<strong>一定要知道ssh key的配置是针对每台主机的！</strong>，比如我在某台主机上操作git和我的远程仓库，想要push时不输入账号密码，走ssh协议，就需要配置ssh key，放上去的key是<strong>当前主机的ssh公钥</strong>。那么如果我换了一台其他主机，想要实现无密登录，也就需要重新配置。</p>
<p>下面解释开头提出的问题：
（1）为什么要配？
配了才能实现push代码的时候不需要反复输入自己的github账号密码，更方便
（2）每使用一台主机都要配？
是的，每使用一台新主机进行git远程操作，想要实现无密，都需要配置。并不是说每个账号配一次就够了，而是每一台主机都需要配。
（3）配了为啥就不用密码了？
因为配置的时候是把当前主机的公钥放到了你的github账号下，相当于当前主机和你的账号做了一个关联，你在这台主机上已经登录了你的账号，此时此刻github认为是该账号主人在操作这台主机，在配置ssh后就信任该主机了。所以下次在使用git的时候即使没有登录github，也能直接从本地push代码到远程了。当然这里不要混淆了，你不能随意push你的代码到任何仓库，你只能push到你自己的仓库或者其他你有权限的仓库！</p>
<h2>1.备份 MinIO</h2>
<blockquote>
<p>场景：备份 MinIO 的文件到 Git</p>
<ol>
<li>使用 <code>crontab -e</code></li>
<li>一分钟执行一次  <code>* * * * * /home/minio/data/blog/test.sh  &gt;&gt; /home/minio/data/test.log 2&gt;&amp;1</code></li>
</ol>
<p>问题：我需要保证我的shell脚本的git命令 auth 这一步</p>
<p>​	手动一行行命令的时候用 <code>http</code> 可以：<code>git remote set-url origin http://github.com/zzq8/MinIO-upupor.git</code></p>
<p>​	但是shell中批量总是报错！！！auth问题，网上冲浪发现用ssh好使   1）需要云服务器加私钥 2）把公钥加到Git
​	<code>git remote set-url origin git@github.com:zzq8/MinIO-upupor.git</code></p>
</blockquote>
<p>token   可以当密码auth的时候</p>
<p>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</p>
<h1>GitHub搜索技巧</h1>
<blockquote>
<p>不要小看这个，真的可以挖掘Github这个宝藏库</p>
</blockquote>
<ul>
<li>
<p>in关键字限制搜索范围 ',' 是或的意思  <code>xxx in:name,readme,description</code></p>
</li>
<li>
<p>查找star大于1000，fork数在500到1000 <code>xxx stars:&gt;1000 forks:500..1000</code></p>
</li>
<li>
<p>awesome系列，一般用来收集学习、工具、书籍类相关的项目 <code>awesome xxx</code></p>
<ul>
<li>【陌生】搜出来第一条会有副红色眼镜    言下之意，你要学什么东西就用这个命令试试。   至少我搜了下SpringBoot还是蛮不错的</li>
</ul>
</li>
<li>
<p>高亮显示某行代码 一行：代码地址后面紧跟 <code>#L10</code> 多行：<code>#Lx - #Ln</code></p>
</li>
<li>
<p>项目内搜索 使用英文字母 <code>t</code> ,开启项目内搜索</p>
</li>
</ul>
<h1>一、常规流程</h1>
<blockquote>
<p>命令行还是可以会一下，后面其实都可以用 TortoiseGit 图形化操作了...</p>
</blockquote>
<h2>前置设置</h2>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div>]]></content>
    <category term="Code"/>
    <published>2024-04-13T08:39:03.000Z</published>
  </entry>
</feed>