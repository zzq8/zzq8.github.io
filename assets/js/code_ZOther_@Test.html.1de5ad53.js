"use strict";(self.webpackChunklearn_data=self.webpackChunklearn_data||[]).push([[503],{9874:(i,s)=>{s.A=(i,s)=>{const a=i.__vccOpts||i;for(const[i,n]of s)a[i]=n;return a}},6976:(i,s,a)=>{a.r(s),a.d(s,{comp:()=>Ei,data:()=>bi});var n=a(2360);const l=(0,n.Lk)("h1",{id:"代码cr规范总结",tabindex:"-1"},[(0,n.Lk)("a",{class:"header-anchor",href:"#代码cr规范总结"},[(0,n.Lk)("span",null,"代码CR规范总结")])],-1),t=(0,n.Lk)("h1",{id:"风格问题",tabindex:"-1"},[(0,n.Lk)("a",{class:"header-anchor",href:"#风格问题"},[(0,n.Lk)("span",null,"风格问题")])],-1),e=(0,n.Lk)("li",null,"根据项目配置代码格式化风格，提交之前整体格式化代码。",-1),h=(0,n.Lk)("li",null,"起名要做到清晰明了，有具体业务含义。",-1),k=(0,n.Lk)("li",null,"方法起名规则 动词 + 名词。eg: queryOrderDetail, publishPrize。",-1),p=(0,n.Lk)("li",null,"所有定义(接口，实现类，字段，方法，枚举等等)注释完备, 提高可读性。",-1),d=(0,n.Lk)("li",null,"所有提供给外部的服务接口，保证注释明确，编写完整使用文档说明。",-1),r=(0,n.Lk)("li",null,"静态变量建议使用统一的static在当前类或者公共类中维护，便于后续引用和重构维护。",-1),g=(0,n.Lk)("li",null,"禁止魔法值逻辑。",-1),c=(0,n.Lk)("li",null,"单个方法功能不宜太多，包含内容太多不容易复用，可读性变差。尽量按照简单的逻辑拆分。",-1),o=(0,n.Lk)("h1",{id:"防御性编程",tabindex:"-1"},[(0,n.Lk)("a",{class:"header-anchor",href:"#防御性编程"},[(0,n.Lk)("span",null,"防御性编程")])],-1),y=(0,n.Lk)("ol",null,[(0,n.Lk)("li",null,"提供给上游的共用方法对关键入参强校验正确性。所有的public方法的所有字段都需要校验。")],-1),B=(0,n.Lk)("figure",null,[(0,n.Lk)("img",{src:"https://img-blog.csdnimg.cn/img_convert/fc0ae95cd9580e9b57cbc41166a41528.png",alt:"",tabindex:"0",loading:"lazy"}),(0,n.Lk)("figcaption")],-1),E=(0,n.Lk)("figure",null,[(0,n.Lk)("img",{src:"https://img-blog.csdnimg.cn/img_convert/17185d5767e039db08cb7f5da39e9d2d.png",alt:"",tabindex:"0",loading:"lazy"}),(0,n.Lk)("figcaption")],-1),b=(0,n.Lk)("ol",{start:"2"},[(0,n.Lk)("li",null,[(0,n.eW)("字段校验不只是要校验是否为空，要根据业务规则进行校验。 "),(0,n.Lk)("ol",null,[(0,n.Lk)("li",null,"字符串校验长度。"),(0,n.Lk)("li",null,"数字校验上限和下限。"),(0,n.Lk)("li",null,"枚举类型要校验是否是合法枚举值。")])])],-1),m=(0,n.Lk)("figure",null,[(0,n.Lk)("img",{src:"https://img-blog.csdnimg.cn/img_convert/67e5cf8038ef81dc2abdfab36e87f58d.png",alt:"",tabindex:"0",loading:"lazy"}),(0,n.Lk)("figcaption")],-1),f=(0,n.Lk)("ol",{start:"3"},[(0,n.Lk)("li",null,"领域模型数据校验内聚于领域模型内部，对外只暴露实际校验方法供其他流程调用。")],-1),u=(0,n.Lk)("figure",null,[(0,n.Lk)("img",{src:"https://img-blog.csdnimg.cn/img_convert/f69a595ed885f268dc0fe0a09e7f0411.png",alt:"",tabindex:"0",loading:"lazy"}),(0,n.Lk)("figcaption")],-1),v=(0,n.Lk)("figure",null,[(0,n.Lk)("img",{src:"https://img-blog.csdnimg.cn/img_convert/650bc2ed90117930a0436d689a322ad7.png",alt:"",tabindex:"0",loading:"lazy"}),(0,n.Lk)("figcaption")],-1),F={start:"4"},A=(0,n.Lk)("figure",null,[(0,n.Lk)("img",{src:"https://img-blog.csdnimg.cn/img_convert/d4bb83b197f685de9cd55e1be58ac7d4.png",alt:"",tabindex:"0",loading:"lazy"}),(0,n.Lk)("figcaption")],-1),C=(0,n.Lk)("h1",{id:"远程调用",tabindex:"-1"},[(0,n.Lk)("a",{class:"header-anchor",href:"#远程调用"},[(0,n.Lk)("span",null,"远程调用")])],-1),D=(0,n.Lk)("ol",null,[(0,n.Lk)("li",null,[(0,n.Lk)("strong",null,"返回结果三态的检查不能忘")])],-1),_=(0,n.Lk)("figure",null,[(0,n.Lk)("img",{src:"https://img-blog.csdnimg.cn/img_convert/fc88718b6adb9594afbecab47bd0cdf0.png",alt:"",tabindex:"0",loading:"lazy"}),(0,n.Lk)("figcaption")],-1),L=(0,n.Fv)('<figure><img src="https://img-blog.csdnimg.cn/img_convert/ab24eaa1ed6dc73b81d04138250e58a8.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol start="2"><li>明确下游API是否幂等，幂等号生成规则是什么和幂等的维度是租户维度, 商户维度，活动维度？</li><li>异常处理（比如你调用别人接口异常了怎么处理，是重试还是直接失败），出现异常之后上下游数据是否一致。</li><li>超时处理（超时后是直接断开保护本系统还是等待返回？），出现超时之后上下游数据是否一致。</li><li>外部调用的API升级时是否和老版本接口兼容，接口返回结构层面的兼容逻辑，例如状态码、返回值、返回结构等。</li></ol><h1 id="并发处理" tabindex="-1"><a class="header-anchor" href="#并发处理"><span>并发处理</span></a></h1><ol><li>强制统一使用 SOFA 线程池，包含监控、超时堆栈、traceID（用于 RPC 自定义线程池）和动态配置的能力。SOFA 线程池 100% 兼容原生线程池。参见：<a href="https://yuque.antfin-inc.com/middleware/sofaboot/gdcd1p" target="_blank" rel="noopener noreferrer">SOFA 线程池的使用文档</a></li></ol>',4),x=(0,n.Lk)("figure",null,[(0,n.Lk)("img",{src:"https://img-blog.csdnimg.cn/img_convert/3d21418087e7d749c0d6fccf51be2c7c.png",alt:"",tabindex:"0",loading:"lazy"}),(0,n.Lk)("figcaption")],-1),z=(0,n.Fv)('<figure><img src="https://img-blog.csdnimg.cn/img_convert/f3ad6616edcebef64902aa88e30f6bcc.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol start="2"><li>异步处理的任务使用TracerRunnable代替Runnable，TracerCallable代替Callable，防止trace丢失。</li></ol><p>错误示例</p><figure><img src="https://img-blog.csdnimg.cn/img_convert/613b4c83c3c977e0223f25a22708f319.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>正确示例</p><figure><img src="https://img-blog.csdnimg.cn/img_convert/44470d05716cece189ac60179e99d302.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol start="3"><li>线程上下文一定要记得清除</li></ol><p>错误示例</p><figure><img src="https://img-blog.csdnimg.cn/img_convert/03ee7ea885d1a0e9918c12d2f81b76be.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>正确示例</p><figure><img src="https://img-blog.csdnimg.cn/img_convert/97224edd3c1a88e311a97872edd6c466.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol start="4"><li>使用CountDownLatch进行异步转同步操作时，每个线程退出前必须调用countDown方法，线程执行代码注意catch异常，确保countDown方法可以执行，避免主线程无法执行至countDown方法，直到超时才返回结果。</li></ol><p>错误示例</p><figure><img src="https://img-blog.csdnimg.cn/img_convert/aba1802d32263d241ef488da1c5a1cb5.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>正确示例</p><figure><img src="https://img-blog.csdnimg.cn/img_convert/a5fd46a19229e2ac165356769eeb6974.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h1 id="数据库操作" tabindex="-1"><a class="header-anchor" href="#数据库操作"><span>数据库操作</span></a></h1><ol><li>insert，update, delete数据完成时强制校验行数是否符合预期</li></ol><p><strong>错误示例</strong></p><figure><img src="https://img-blog.csdnimg.cn/img_convert/f9577d4d9ada91fe6a590dc98e0af8d2.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>正确示例</strong></p><figure><img src="https://img-blog.csdnimg.cn/img_convert/1ef9a3d3d4350e9aff1318a250ecbe5b.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',22),O={start:"2"},q=(0,n.Fv)('<p>错误示例</p><figure><img src="https://img-blog.csdnimg.cn/img_convert/69c8b820c273cba926fdb76664bf1a6a.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>正确示例</p><figure><img src="https://img-blog.csdnimg.cn/img_convert/65452a8d5db18efd3d4193734ed9a842.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol start="3"><li>不允许无脑 update</li></ol><p>正确示例</p><figure><img src="https://img-blog.csdnimg.cn/img_convert/e8740d4e96c989c0e2d54b17f463fe6d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>错误示例</p><figure><img src="https://img-blog.csdnimg.cn/img_convert/18292d8a5b4792ac0ecc559f8c60d6c5.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol start="4"><li>单条数据更新，使用id作为更新条件</li></ol><p>错误示例</p><figure><img src="https://img-blog.csdnimg.cn/img_convert/e16f975276253ab71f2a8b13b191d928.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>正确示例</p><figure><img src="https://img-blog.csdnimg.cn/img_convert/16d04e197b803541da6bad4ad19a812f.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol start="5"><li>查询一定要考虑索引</li></ol><p>错误示例</p><figure><img src="https://img-blog.csdnimg.cn/img_convert/d772a53bff165aee6170d0b33268c17e.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>正确示例</p><ol start="6"><li>一锁二判三更新</li></ol><p>错误示例</p><figure><img src="https://img-blog.csdnimg.cn/img_convert/4f160e595abe71951deba0eba474a5d9.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://img-blog.csdnimg.cn/img_convert/8fdabc95b88db72335c9752fbfb0dafc.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>正确示例</p><figure><img src="https://img-blog.csdnimg.cn/img_convert/55ff09e21b33c07be7f63808233ae10a.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol start="7"><li>涉及多条数据循环调用sql插入时改成批量的，并且考虑每次批量插入的条数。</li></ol><p>错误示例</p><figure><img src="https://img-blog.csdnimg.cn/img_convert/a6daa17e399a41b20aede682eeb1f273.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>正确示例</p><figure><img src="https://img-blog.csdnimg.cn/img_convert/1183d9be9d32aaef45c2e19541e27bea.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol start="8"><li>每次新增的查询语句是否能命中索引。</li></ol><p>错误示例<img src="https://img-blog.csdnimg.cn/img_convert/d460e7d5771108c7cf912fd7e670eca2.png" alt="" loading="lazy"></p><p>正确示例</p><figure><img src="https://img-blog.csdnimg.cn/img_convert/0f47421a4706d474f869a7b0e9b8507f.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',33),W={start:"9"},S=(0,n.Lk)("p",null,[(0,n.eW)("正确示例 "),(0,n.Lk)("img",{src:"https://i-blog.csdnimg.cn/direct/de59078cafdc4146b873caedf4fb24d3.png",alt:"在这里插入图片描述",loading:"lazy"})],-1),j=(0,n.Lk)("ol",{start:"10"},[(0,n.Lk)("li",null,"索引设计是否合理，是唯一索引还是普通索引，尽量避免在线进行索引增加，删除操作")],-1),N=(0,n.Lk)("p",null,[(0,n.Lk)("a",{href:"https://yuque.antfin-inc.com/fu9ehx/bixhha/neoo69kr1yri39wo",target:"_blank",rel:"noopener noreferrer"},"20240627-故障案例学习")],-1),T=(0,n.Fv)('<ol start="11"><li>分表场景单表局部热点风险</li></ol><p>错误示例</p><p>分片的一个作用是提高可用性，降低单点带来的风险，但是如果分库分表位的选择不合理则无法发挥这个作用</p><p>举例代码如下：</p><figure><img src="https://img-blog.csdnimg.cn/img_convert/175bd775daf9b8cd71fec0dd5e97052e.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://img-blog.csdnimg.cn/img_convert/6e49dfea401347499f916bc83251bc4a.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>正确示例: 动态获取用户ID来作为分库分表的信息，降低单点风险</p><figure><img src="https://img-blog.csdnimg.cn/img_convert/e60ff9d43a636cdc3f79c1e440349953.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h1 id="事务问题" tabindex="-1"><a class="header-anchor" href="#事务问题"><span>事务问题</span></a></h1><ol><li>根据使用的是逻辑库还是物理库选择正确的事务模板。</li></ol><p>错误示例</p><figure><img src="https://img-blog.csdnimg.cn/img_convert/ec458e7f6f7c3480c94c7ae03e2c58ee.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>正确示例</p><figure><img src="https://img-blog.csdnimg.cn/img_convert/2abf1cd9480cb3aa080b4c917cc9a004.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol start="2"><li>跨数据连接，事务无效</li></ol><p>错误示例</p><figure><img src="https://img-blog.csdnimg.cn/img_convert/b4d8869227907ffd821273780312e30d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>正确示例</p><div class="language-plain line-numbers-mode" data-highlighter="shiki" data-ext="plain" data-title="plain" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>        sharingTransactionTemplate.execute(new TransactionCallbackWithoutResult() {</span></span>\n<span class="line"><span>            @Override</span></span>\n<span class="line"><span>            protected void doInTransactionWithoutResult(TransactionStatus status) {</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>                    // 保存外部订单，数据源1</span></span>\n<span class="line"><span>                    affiliateOutOrderRepository.insert(affiliateOutOrder);</span></span>\n<span class="line"><span>                        </span></span>\n<span class="line"><span>                    // 保存外部订单返佣</span></span>\n<span class="line"><span>                    outOrderCommission.setInnerOrderId(affiliateOutOrder.getId());</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>                    // 保存外部订单返佣</span></span>\n<span class="line"><span>                    affiliateOutOrderCommissionRepository.insert(outOrderCommission);</span></span>\n<span class="line"><span>                    orderUserBenefit.setInnerOrderId(affiliateOutOrder.getId());</span></span>\n<span class="line"><span>                    orderUserBenefit.setCommissionId(outOrderCommission.getId());</span></span>\n<span class="line"><span>                    affiliateOutOrderUserBenefitRepository.insert(orderUserBenefit);</span></span>\n<span class="line"><span>            }</span></span>\n<span class="line"><span>        });</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>长事务问题，事务中有远程调用</li></ol><p>错误示例</p><figure><img src="https://img-blog.csdnimg.cn/img_convert/99f391fe724d77b9349d92a5315323a7.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>正确示例</p><figure><img src="https://img-blog.csdnimg.cn/img_convert/ec07bcfd31d43c1f910978673ac55cf0.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol start="4"><li>合理设计索引，尽量缩小锁的范围 <ol><li>合理设计索引，可以尽量缩小锁的范围，从而减少锁竞争提高并发性能。</li></ol></li><li><s>单条数据库操作不要开事务</s></li></ol><p><s>错误示例</s></p><p><s>正确示例</s></p><ol start="6"><li>事务性消息一定要再事务中发送</li></ol><p>错误示例</p><p>正确示例</p><figure><img src="https://img-blog.csdnimg.cn/img_convert/eabff4a780d3d5fd3d78c36b75137c33.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h1 id="消息问题" tabindex="-1"><a class="header-anchor" href="#消息问题"><span>消息问题</span></a></h1><ol><li>重复、流失、乱序、限流</li></ol><p>错误示例</p><p>正确示例</p><ol start="2"><li>可重入问题</li></ol><p>错误示例</p><p>正确示例</p><ol start="3"><li>什么时候用事务性消息，更新DB和发消息在一个事务中，避免DB更新失败，机器故障或者重启导致消息未发送，产生不一致</li></ol><p>错误示例</p><p>正确示例</p><ol start="4"><li>事务型消息一定要有checker</li></ol><p><a href="https://yuque.antfin-inc.com/middleware/msgbroker/pubsub" target="_blank" rel="noopener noreferrer">事务型消息原理</a></p><h1 id="缓存问题" tabindex="-1"><a class="header-anchor" href="#缓存问题"><span>缓存问题</span></a></h1><ol><li>缓存必须要使用common库</li></ol>',45),w=(0,n.Fv)('<figure><img src="https://img-blog.csdnimg.cn/img_convert/6d7480e4ad81279b4d30bb377c16f802.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>正确示例</p><figure><img src="https://img-blog.csdnimg.cn/img_convert/2cb298f6a61ae508beebb596fc7c9a45.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol start="2"><li>缓存key的设计需要仔细考虑 <ol><li>环境隔离</li><li>压测隔离</li><li>不兼容时的版本隔离</li></ol></li></ol><p><a href="https://yuque.antfin-inc.com/gc206i/cflnuu/pqu9da?" target="_blank" rel="noopener noreferrer">[P4]用户反馈零售通频道页商品不展示</a></p><p>错误示例</p><figure><img src="https://img-blog.csdnimg.cn/img_convert/43cacdc8ec80a23dbb8afc77318e02e3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>正确示例</p><figure><img src="https://img-blog.csdnimg.cn/img_convert/6900c047c8a041c79175711e2ebb6bc2.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol start="3"><li>序列化的方式</li></ol><p>序列化方式统一规定使用JSON，不使用HESSIAN</p>',11),I=(0,n.Fv)('<figure><img src="https://img-blog.csdnimg.cn/img_convert/7d9e92519ba98b28a1fb4ee465e4147d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol start="4"><li>key的null存储</li></ol><p>错误示例 <img src="https://i-blog.csdnimg.cn/direct/ca1a6ba3154c4f43bc68db0d4c906298.png" alt="在这里插入图片描述" loading="lazy"></p><p>正确示例</p><figure><img src="https://img-blog.csdnimg.cn/img_convert/cf5c84ad1d548938368b8f2bc9d64544.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol start="5"><li>key的过期时间</li></ol><p>错误示例</p><figure><img src="https://img-blog.csdnimg.cn/img_convert/8b0189e2b1aeb0f73d46980bbfaf2c43.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>正确示例</p><figure><img src="https://img-blog.csdnimg.cn/img_convert/81381e2130be24ad39e9fe383fe99c6b.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol start="6"><li>key的击穿影响分析</li></ol><p><a href="https://yuque.antfin.com/sd/ufwbxo/puaiys2d4wikb4e1?singleDoc#" target="_blank" rel="noopener noreferrer">【P3】0531 LZD-支付咨询(分站点)下跌</a></p><p>错误示例</p><p>正确示例</p><ol start="7"><li>key的更新策略 <ol><li>过期删除：当缓存过期时，主动失效，当击穿缓存时回源查询并更新缓存。</li><li>主动刷新: 缓存中key不过期，在DB中数据变化时，主动构建新值并更新到缓存中</li></ol></li><li>兼容性问题</li></ol><p>错误示例:</p><figure><img src="https://img-blog.csdnimg.cn/img_convert/326d86847179b01a71cae3e372f57b2a.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>正确示例</p><figure><img src="https://img-blog.csdnimg.cn/img_convert/7e8792c093f0cce9098a0e5075d30411.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h1 id="金额问题" tabindex="-1"><a class="header-anchor" href="#金额问题"><span>金额问题</span></a></h1><ol><li>必须使用multiMoney，MultiBigDecimalMoney类，要考虑精度和四舍五入算法。</li></ol><p>正确示例</p><figure><img src="https://img-blog.csdnimg.cn/img_convert/231b5aba8c46ab47f9b6c16503f05c47.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol start="2"><li>金额计算使用统一封装工具类，严禁自行计算。</li></ol><p>正确示例</p><figure><img src="https://img-blog.csdnimg.cn/img_convert/b88ec5a5bda1dd67009d581d80ef9ba4.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol start="3"><li>注意金额计算相同功能的不同实现差别，比如 add, addTo。divide, divideBy。</li></ol><p>错误示例</p><figure><img src="https://i-blog.csdnimg.cn/direct/cf7b880594554d169af197cac418be70.png" alt="在这里插入图片描述" tabindex="0" loading="lazy"><figcaption>在这里插入图片描述</figcaption></figure><p>正确示例</p><figure><img src="https://img-blog.csdnimg.cn/img_convert/db55b87b343954696e5ffd426620877d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol start="4"><li>增减金额平衡性校验</li></ol><p>错误示例</p><figure><img src="https://img-blog.csdnimg.cn/img_convert/2db6e63c8aa9fa4ac74732b9553118a0.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',34),M=(0,n.Lk)("figure",null,[(0,n.Lk)("img",{src:"https://img-blog.csdnimg.cn/img_convert/c1e82eca7c54cc46bbade2e2b375593c.png",alt:"",tabindex:"0",loading:"lazy"}),(0,n.Lk)("figcaption")],-1),P=(0,n.Lk)("figure",null,[(0,n.Lk)("img",{src:"https://img-blog.csdnimg.cn/img_convert/4c59b5edfba77a67c38331ba21e1a645.png",alt:"",tabindex:"0",loading:"lazy"}),(0,n.Lk)("figcaption")],-1),R=(0,n.Lk)("figure",null,[(0,n.Lk)("img",{src:"https://img-blog.csdnimg.cn/img_convert/c7ae065fe1e5c183e9dc72ef575f500c.png",alt:"",tabindex:"0",loading:"lazy"}),(0,n.Lk)("figcaption")],-1),U=(0,n.Fv)('<h1 id="编码规约" tabindex="-1"><a class="header-anchor" href="#编码规约"><span>编码规约</span></a></h1><ol><li>使用诸如StringUtil, CollectionUtils等工具类操作，而不是直接采用原始类型，因为已经对null值进行了处理</li></ol><p>错误示例:下列代码没有判断lineMap是否为null，直接取size，有空指针风险，换成MapUtils.isEmpty更为可靠</p><figure><img src="https://i-blog.csdnimg.cn/direct/9459e4b54d424276b96644d5a1466409.png" alt="在这里插入图片描述" tabindex="0" loading="lazy"><figcaption>在这里插入图片描述</figcaption></figure><p>正确示例</p><figure><img src="https://img-blog.csdnimg.cn/img_convert/7b5d8e7962964bd7b470da7be0e48dd5.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol start="2"><li>不使用复杂的if else 条件，而是抽成判断是否满足if条件的方法。</li></ol><p>错误示例</p><p><img src="https://img-blog.csdnimg.cn/img_convert/8e7e28298bd004738c0ce9b52e8a03fb.png" alt="" loading="lazy"><img src="https://img-blog.csdnimg.cn/img_convert/2a789ec160915dc07d0cdb7b93507f7e.png" alt="" loading="lazy"></p><p>正确示例</p><figure><img src="https://img-blog.csdnimg.cn/img_convert/9301330a3b0e772587380d2ec8d5a83d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol start="3"><li>杜绝使用BeanUtils.copyProperties，尤其是Entity、Model和VO之间。同一名字不同类型不能拷贝，导致字段值缺失。老老实实set&amp;get。</li></ol><p>错误示例</p><figure><img src="https://i-blog.csdnimg.cn/direct/ac4ef8ad35dc4f91b6778ec3671e2d3a.png" alt="在这里插入图片描述" tabindex="0" loading="lazy"><figcaption>在这里插入图片描述</figcaption></figure><p>正确示例</p><figure><img src="https://img-blog.csdnimg.cn/img_convert/69d8f5db9cbf870f93ee2dbefe016b39.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol start="4"><li>POJO中的变量直接赋值，禁止夹杂额外逻辑。</li></ol><p>错误示例</p><figure><img src="https://img-blog.csdnimg.cn/img_convert/2fa52cade3e76efc247072e3275cb4a4.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>正确示例</p><figure><img src="https://img-blog.csdnimg.cn/img_convert/ce2b9a93215f8aac1b36fb496c67ca92.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol start="5"><li>根据业务规则找准try-catch的范围，try-catch范围不准结果都不好。比如说是for循环里面try-catch还是整个循环try-catch 是两种不同的结果。允许失败跳过的情况内部处理。不允许失败的情况外部处理。</li></ol><p>错误示例</p><figure><img src="https://img-blog.csdnimg.cn/img_convert/b000fdd2d035a5ab78c64d83f5bd57e8.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>正确示例</p><figure><img src="https://img-blog.csdnimg.cn/img_convert/802da43c14e1039c432cccc3aec17dd0.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol start="6"><li>避免使用多个级联get，容易造成数组越界，NPE，使用Optional操作的判空操作。</li></ol><p>错误示例</p><figure><img src="https://img-blog.csdnimg.cn/img_convert/f2c4802ee82a9ae50ae3aff75365edbd.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>正确示例</p><div class="language-plain line-numbers-mode" data-highlighter="shiki" data-ext="plain" data-title="plain" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>        standardProductView.setOnSaleTimeStart(</span></span>\n<span class="line"><span>            Optional.ofNullable(product.getOnSaleBeginTime()).map(Date::getTime).orElse(null));</span></span>\n<span class="line"><span>        standardProductView.setOnSaleTimeEnd(</span></span>\n<span class="line"><span>            Optional.ofNullable(product.getOnSaleEndTime()).map(Date::getTime).orElse(null));</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="7"><li>对外部提供的服务接口定义查询和响应禁用枚举。</li></ol>',32),H=(0,n.Lk)("figure",null,[(0,n.Lk)("img",{src:"https://img-blog.csdnimg.cn/img_convert/56b2071a645583eea12f548335cf5374.png",alt:"",tabindex:"0",loading:"lazy"}),(0,n.Lk)("figcaption")],-1),V=(0,n.Lk)("figure",null,[(0,n.Lk)("img",{src:"https://img-blog.csdnimg.cn/img_convert/290a45dd7fd02830f0da0aa1496a8aa1.png",alt:"",tabindex:"0",loading:"lazy"}),(0,n.Lk)("figcaption")],-1),G=(0,n.Lk)("h1",{id:"日志打印",tabindex:"-1"},[(0,n.Lk)("a",{class:"header-anchor",href:"#日志打印"},[(0,n.Lk)("span",null,"日志打印")])],-1),J=(0,n.Lk)("p",null,"错误示例",-1),K=(0,n.Lk)("figure",null,[(0,n.Lk)("img",{src:"https://i-blog.csdnimg.cn/direct/9c9bed0ab21f4a9f822353c841540c33.png",alt:"在这里插入图片描述",tabindex:"0",loading:"lazy"}),(0,n.Lk)("figcaption",null,"在这里插入图片描述")],-1),Z=(0,n.Lk)("p",null,"正确示例：在ServiceTemplate模板类中会统一格式打印日志。",-1),X=(0,n.Lk)("figure",null,[(0,n.Lk)("img",{src:"https://i-blog.csdnimg.cn/direct/d8f1a7a7493d435683462e75053b8fec.png",alt:"在这里插入图片描述",tabindex:"0",loading:"lazy"}),(0,n.Lk)("figcaption",null,"在这里插入图片描述")],-1),Q=(0,n.Lk)("ol",{start:"2"},[(0,n.Lk)("li",null,"打印异常日志时一定包含堆栈信息，如果仅包含提示信息，异常堆栈被丢弃，问题排查困难。")],-1),Y=(0,n.Lk)("figure",null,[(0,n.Lk)("img",{src:"https://img-blog.csdnimg.cn/img_convert/dcdd1bd57a06f8e39a0658c2309dad42.png",alt:"",tabindex:"0",loading:"lazy"}),(0,n.Lk)("figcaption")],-1),$=(0,n.Lk)("figure",null,[(0,n.Lk)("img",{src:"https://img-blog.csdnimg.cn/img_convert/1c33ad4f9105c999703a136a07c1c415.png",alt:"",tabindex:"0",loading:"lazy"}),(0,n.Lk)("figcaption")],-1),ii=(0,n.Fv)('<figure><img src="https://img-blog.csdnimg.cn/img_convert/c416d96104d0cbef627c50c248e79087.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol start="3"><li>日志打印保持格式清晰，关键字段齐备，做到监控可配置，排查问题快速定位。</li></ol><figure><img src="https://i-blog.csdnimg.cn/direct/9349a33b53944dad916d4f2e73ca40e0.png" alt="在这里插入图片描述" tabindex="0" loading="lazy"><figcaption>在这里插入图片描述</figcaption></figure><figure><img src="https://img-blog.csdnimg.cn/img_convert/3604c7fd9f06e63be12fd0e187752154.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://img-blog.csdnimg.cn/img_convert/dfefbc21688194b372ad6b166a9239fd.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',5),si={start:"4"},ai=(0,n.Fv)('<figure><img src="https://img-blog.csdnimg.cn/img_convert/8465efefdb9ddcfdd80e960160fbcd58.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h1 id="性能问题" tabindex="-1"><a class="header-anchor" href="#性能问题"><span>性能问题</span></a></h1><ol><li>所有接口必须要有性能监控的日志，放到模版日志里</li><li>C端接口不需要经过压测才能上线</li><li>C端要注意使用缓存</li><li>非关键依赖，同步转异步</li></ol><h1 id="设计问题" tabindex="-1"><a class="header-anchor" href="#设计问题"><span>设计问题</span></a></h1><ol><li>领域模型要核对友好，上下游关键字段是否可核对。一层核对，二层核对，三层核对。</li><li>考虑发布兼容性，发布中间态存在新逻辑，新数据，老逻辑，老数据。</li><li>考虑隔离性 <ol><li>不同商户，用户，渠道数据如何隔离。</li><li>不同商户，用户，渠道故障如何隔离。</li></ol></li><li>清晰明了的切流灰度逻辑。 <ol><li>切流方法是是什么，参数中心，drm？</li><li>切流维度是什么，商户，用户，活动？</li><li>新老逻辑是否能回切？</li></ol></li></ol><h1 id="测试用例" tabindex="-1"><a class="header-anchor" href="#测试用例"><span>测试用例</span></a></h1><ol><li>每个迭代必须提供自测用例，可以规避很多不必要的线上问题。</li><li>单元测试一个方法测试一个功能的各种情况，不要把所有的功能融合在一个方法中。</li><li>单元测试用例的编写要考虑先写一种执行成功的情况，还要覆盖失败的case，并且要按照场景进行覆盖。</li><li>清除数据，准备数据，执行用例，校验数据（返回结果的校验，db的校验）</li></ol><h1 id="测试用例-xd补充" tabindex="-1"><a class="header-anchor" href="#测试用例-xd补充"><span>测试用例-XD补充</span></a></h1><blockquote><p>自测-证明测了</p><p><strong>单测-不被篡改、保护稳定运行的一种手段</strong></p></blockquote><h2 id="操作流程" tabindex="-1"><a class="header-anchor" href="#操作流程"><span>操作流程</span></a></h2><p>xd: 犯以下错误:</p><p>知识铺垫</p>',12),ni={id:"碰到的问题集",tabindex:"-1"},li={class:"header-anchor",href:"#碰到的问题集"},ti=(0,n.Fv)('<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 在测试方法的最后，验证具体的调用</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">Mockito</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">verify</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(cacheManager).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">putObjectWithExpire</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">    &quot;STOP_CHAT_CACHE_KEY_PREFIX_userId123_202409282011727514756414_202409282021727514756405&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">    Boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">FALSE</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">    120</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',1),ei=(0,n.Lk)("p",null,"// 用到mock注解的得使用下面才能生效",-1),hi=(0,n.Lk)("p",null,"MockitoAnnotations.openMocks(this);",-1),ki=(0,n.Lk)("figure",null,[(0,n.Lk)("img",{src:"https://intranetproxy.alipay.com/skylark/lark/0/2024/png/135356742/1727346395904-e353b890-d2b9-4908-b3d3-d1552c7050ed.png",alt:"",tabindex:"0",loading:"lazy"}),(0,n.Lk)("figcaption")],-1),pi=(0,n.Lk)("p",null,'MockUtil.mockField(distributedLockService, "distributedLock", distributedLock);',-1),di=(0,n.Lk)("blockquote",null,[(0,n.Lk)("p",null,"chat 监听器回调mock 卡很久，发现有个API可以操作")],-1),ri=(0,n.Lk)("pre",null,[(0,n.Lk)("code",null,"   Mockito.doAnswer(new Answer() {\n\n        @Override\n\n        public Object answer(InvocationOnMock invocationOnMock) throws Throwable {\n\n            System.out.println(invocationOnMock.getArguments());\n\n            return invocationOnMock.getArguments();\n\n        }\n\n    }).when(botStreamChatFacade).streamChat(any(), any());\n")],-1),gi={id:"✨-mock-方式两种-复习反射部分应用场景",tabindex:"-1"},ci={class:"header-anchor",href:"#✨-mock-方式两种-复习反射部分应用场景"},oi=(0,n.Fv)('<h3 id="注解方式" tabindex="-1"><a class="header-anchor" href="#注解方式"><span>注解方式</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">   /**</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">     * ilmmodelClient</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">     */</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">Autowired</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">InjectMocks</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> IlmmodelClientImpl</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">     ilmmodelClientImpl</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    /**</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">     * TtsFacade</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">     */</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">Mock</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> TtsFacade</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">              ttsFacade</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">MockitoAnnotations</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">openMocks</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="代码方式" tabindex="-1"><a class="header-anchor" href="#代码方式"><span>代码方式</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 1</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">TtsFacade</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> ttsFacade</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> Mockito</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">mock</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">TtsFacade</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 并不是1,3就直接可以了    别忘记还有个该field注入到源class的操作.   需要通过反射解决</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 3</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">Mockito</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">when</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">ttsFacade</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">executeGenericTts</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">Mockito</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">any</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">())).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">thenReturn</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">mockResult</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>keypoint</strong></p><hr><p><strong>全盘逻辑</strong></p><hr><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">private</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> backupOriginalField</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> target</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> fieldName</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">                                            Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> mock</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> IllegalAccessException</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">                                                         NoSuchFieldError</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        // TODO: 2025/1/11 单侧为什么需要获取真实对象而非代理对象？</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        // 获取真实对象而非代理对象</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">        target</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> getSingletonTarget</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">target</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">        Field</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> field</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> getField</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">target</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">fieldName</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">        Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> originFieldValue</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> field</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">target</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        // 如果已经替换过了，抛出异常</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">        Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> replaced</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> REPLACED_FIELDS</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">computeIfAbsent</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">target</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, (</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">key</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">-&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> ConcurrentHashMap</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&lt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">fieldName</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">Objects</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">isNull</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">replaced</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)) {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">            // 不应该重复替换原成员</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">            throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> IllegalStateException</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;非法覆盖&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> target</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;成员&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> fieldName</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;原始引用记录&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">        field</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">target</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">mock</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">        log</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">debug</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;已替换&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> target</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;对象的成员&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> fieldName</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;为&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> mock</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">Objects</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">isNull</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">originFieldValue</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)) {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">            // ConcurrentHashMap不能put null对象，null成员也没有必要备份</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">            REPLACED_FIELDS</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">computeIfAbsent</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">target</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, (</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">key</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">-&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> ConcurrentHashMap</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&lt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">())</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">put</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">fieldName</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">originFieldValue</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">private</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> static</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> Field</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> getField</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> target</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> fieldName</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">        Field</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> field</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">        Class</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">?</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> type</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> target</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">getClass</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  // TODO 这里为什么while,  看catch逻辑会向父类找  所以while</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">        while</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">type</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> !=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">            try {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">                field</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">getDeclaredField</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">fieldName</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">                break</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">            } catch (NoSuchFieldException e) {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">                type = type.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">getSuperclass</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">            }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">field</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> ==</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">            throw new </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">NoSuchFieldError</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">        field</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">setAccessible</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> field</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>todo解释:</p>',10),yi=(0,n.Fv)('<ul><li>computeIfAbsent适用于两层嵌套的map 拿到/初始化里层map</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// NoSuchFieldException</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">Field</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> field</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> clazz</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">getDeclaredField</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;ttsFacade&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// todo 如果我不加这一行的话，field 无法被获取到吗  ---&gt; 是的  IllegalAccessException</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// --- 下面两行操作都不行</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//field.setAccessible(true);</span></span>\n<span class="line"></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> o</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> field</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">ilmmodelClientImpl</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 设置field的值为mock</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">field</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">ilmmodelClientImpl</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">ttsFacadeMock</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="todo测试-mock污染问题" tabindex="-1"><a class="header-anchor" href="#todo测试-mock污染问题"><span>TODO测试 - mock污染问题</span></a></h2><blockquote><p>用反射的形式写工具类: MockUtil.mockFieldIfNotMocked(ilmmodelClientImpl, &quot;ttsFacade&quot;,TtsFacade.class);</p><p>就是想解决这个问题</p></blockquote><p>GPT e.g. :</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> static</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> org</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">mockito</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">Mockito</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> org</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">junit</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">jupiter</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">api</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">BeforeEach</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> org</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">junit</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">jupiter</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">api</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">Test</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> org</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">mockito</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">Mock</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> org</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">mockito</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">MockitoAnnotations</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> UserServiceTest</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">Mock</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> UserRepository</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> userRepository</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> UserService</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> userService</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">BeforeEach</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> setUp</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">        MockitoAnnotations</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">openMocks</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">        userService</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">new</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> UserService</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">userRepository</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">Test</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> testGetUserById</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">        User</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> mockUser</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">new</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(&quot;1&quot;, &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">Alice</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&quot;);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">        when</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">userRepository</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">findById</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(&quot;1&quot;)).</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">thenReturn</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">mockUser</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">        User</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> user</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">userService</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">getUserById</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(&quot;1&quot;);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">        assert</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> user</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">getName</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">equals</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">Alice</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&quot;);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">Test</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> testGetUserName</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        // 这里我们没有为 userRepository 设置 mock 行为</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        // 直接调用了 getUserById，但状态可能会影响到结果</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        // precondition</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">        User</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> mockUser</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">new</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(&quot;1&quot;, &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">Bob</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&quot;);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">        when</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">userRepository</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">findById</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(&quot;1&quot;)).</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">thenReturn</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">mockUser</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        // This may lead to unexpected behavior if the previous test leaves the </span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        // mock&#39;s state unchanged or affected.</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">        String</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> userName</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">userService</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">getUserName</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(&quot;1&quot;); </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 预期得到 &quot;Bob&quot;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">        assert</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> userName</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">equals</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">Bob</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&quot;);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        // 假设我们在其他方法中没有清理任何状态</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        // 但实际上这个测试可能会失败，因为 Mock 的行为在</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        // 先前的测试中可能已经被修改。</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">/*</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> * Ant Group</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> * Copyright (c) 2004-2024 All Rights Reserved.</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">   */</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">   package</span><span style="--shiki-light:#24292E;--shiki-dark:#C678DD;"> com.alipay.ibotservice</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> org.mockito.Mockito.mock</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> org.mockito.Mockito.spy</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> java.lang.reflect.Field</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> java.util.Map</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> java.util.Map.Entry</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> java.util.Objects</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> java.util.concurrent.ConcurrentHashMap</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> org.springframework.aop.framework.AopProxyUtils</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> org.springframework.aop.support.AopUtils</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> lombok.SneakyThrows</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> lombok.extern.slf4j.Slf4j</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">/**</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> * mock工具，解决mock污染的问题</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">@author</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> yongyi</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">@version</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> MockUtil.java, v 0.1 2024年07月25日 20:28 yongyi</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">   */</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">   @</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">Slf4j</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">   public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> MockUtil</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">   private</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> final</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> Map</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> Map</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;"> Object</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> REPLACED_FIELDS </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> ConcurrentHashMap</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">   /**</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    * 替换目标的某个成员对象。</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    * 如果这个成员已经被替换过，返回现有替身，否则替换为一个mockito对象。</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    * 在每个测试方法完成后，会自动还原为原成员对象。</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">      *</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    * </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">@param</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> target</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    目标</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    * </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">@param</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> fieldName</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> 替换的成员名</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    * </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">@param</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> clazz</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">     替换的成员的类型</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">      */</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">      @</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">SneakyThrows</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">      public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> synchronized</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> T</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> mockFieldIfNotMocked</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">Object</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> target</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> fieldName</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">                                                        Class</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">clazz</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">      // 获取真实对象而非代理对象</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">      target </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> getSingletonTarget</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(target);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">      Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> replaced</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> REPLACED_FIELDS</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">          .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">computeIfAbsent</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(target, (key) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> ConcurrentHashMap</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;&gt;()).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(fieldName);</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">Objects</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">isNull</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(replaced)) {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">          // 已经替换过了，返回当前对象</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">          log</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">debug</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(target </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;对象的成员&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> fieldName </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;已被自动mock&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">          Field</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> field</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> getField</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(target, fieldName);</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">          //noinspection unchecked</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">          return</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (T) </span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">field</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(target);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">      }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">      // 替换为一个mockito mock</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">      T</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> mock</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> mock</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(clazz);</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">      backupOriginalField</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(target, fieldName, mock);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> mock;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">      }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">   /**</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    * 替换目标的某个成员对象。</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    * 如果这个成员已经被替换过，返回现有替身，否则替换为一个mockito对象。</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    * 在每个测试方法完成后，会自动还原为原成员对象。</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">      *</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    * </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">@param</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> target</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    目标</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    * </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">@param</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> fieldName</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> 替换的成员名</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    * </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">@param</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> clazz</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">     替换的成员的类型</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">      */</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">      @</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">SneakyThrows</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">      public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> synchronized</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> T</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> spyFieldIfNotMocked</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">Object</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> target</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> fieldName</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">                                                       Class</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">clazz</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">      // 获取真实对象而非代理对象</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">      target </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> getSingletonTarget</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(target);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">      Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> replaced</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> REPLACED_FIELDS</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">          .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">computeIfAbsent</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(target, (key) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> ConcurrentHashMap</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;&gt;()).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(fieldName);</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">Objects</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">isNull</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(replaced)) {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">          // 已经替换过了，返回当前对象</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">          log</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">debug</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(target </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;对象的成员&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> fieldName </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;已被自动mock&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">          Field</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> field</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> getField</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(target, fieldName);</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">          //noinspection unchecked</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">          return</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (T) </span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">field</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(target);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">      }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">      // 替换为一个mockito mock</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">      T</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> mock</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> spy</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(clazz);</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">      backupOriginalField</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(target, fieldName, mock);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> mock;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">      }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">   /**</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    * 替换目标的某个成员。如果这个成员已经替换过，依然再次替换。</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    * 在每个测试方法完成后，会自动还原为原成员对象。</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    * </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">@param</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> target</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> 目标</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    * </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">@param</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> fieldName</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> 替换的成员名</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    * </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">@param</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> mock</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> 替身</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">      */</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">      @</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">SneakyThrows</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">      public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> synchronized</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> mockField</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">Object</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> target</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> fieldName</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">Object</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> mock</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">      // 获取真实对象而非代理对象</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">      target </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> getSingletonTarget</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(target);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">      Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> replaced</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> REPLACED_FIELDS</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">          .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">computeIfAbsent</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(target, (key) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> ConcurrentHashMap</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;&gt;()).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(fieldName);</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">Objects</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">isNull</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(replaced)) {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">          // 已经替换过了，覆盖</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">          log</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;发现重复替换&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> target </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;对象的成员&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> fieldName);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">          Field</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> field</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> getField</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(target, fieldName);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">          field</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(target, mock);</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">          return</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">      }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">      backupOriginalField</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(target, fieldName, mock);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">      }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">   @</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">SneakyThrows</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">   public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> synchronized</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> resetOriginalFields</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">       for</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">Entry</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">Map</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;&gt; </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">entry</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> :</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> REPLACED_FIELDS</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">entrySet</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()) {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">           Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> target</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> entry</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">getKey</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">           for</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">Entry</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">origin</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> :</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> entry</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">getValue</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">entrySet</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()) {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">               Field</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> field</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> getField</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(target, </span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">origin</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">getKey</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">());</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">               field</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(target, </span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">origin</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">getValue</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">());</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">           }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">       }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">       REPLACED_FIELDS</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">clear</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">   }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">   private</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> Object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> getSingletonTarget</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">Object</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> target</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">       while</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">AopUtils</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">isAopProxy</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(target)) {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">           // 获取真实对象而非代理对象</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">           target </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> AopProxyUtils</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">getSingletonTarget</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(target);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">       }</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">       if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">Objects</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">isNull</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(target)) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">           throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> IllegalArgumentException</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;target is null&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">       }</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">       return</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> target;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">   }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">   private</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> Field</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> getField</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">Object</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> target</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> fieldName</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">       Field</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> field</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">       Class</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">type</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> target</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">getClass</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">       while</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (type </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">           try</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">               field </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">getDeclaredField</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(fieldName);</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">               break</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">           } </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">NoSuchFieldException</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> e</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">               type </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">getSuperclass</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">           }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">       }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">       if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (field </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">           throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> NoSuchFieldError</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">       }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">       </span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">       field</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">setAccessible</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">       return</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> field;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">   }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">   private</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> backupOriginalField</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">Object</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> target</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> fieldName</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">                                           Object</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> mock</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> IllegalAccessException</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">                                                        NoSuchFieldError</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">       // 获取真实对象而非代理对象</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">       target </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> getSingletonTarget</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(target);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">       Field</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> field</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> getField</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(target, fieldName);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">       Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> originFieldValue</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> field</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(target);</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">       // 如果已经替换过了，抛出异常</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">       Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> replaced</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> REPLACED_FIELDS</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">           .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">computeIfAbsent</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(target, (key) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> ConcurrentHashMap</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;&gt;()).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(fieldName);</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">       if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">Objects</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">isNull</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(replaced)) {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">           // 不应该重复替换原成员</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">           throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> IllegalStateException</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;非法覆盖&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> target </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;成员&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> fieldName </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;原始引用记录&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">       }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">       </span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">       field</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(target, mock);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">       log</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">debug</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;已替换&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> target </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;对象的成员&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> fieldName </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;为&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> mock);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">       </span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">       if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">Objects</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">isNull</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(originFieldValue)) {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">           // ConcurrentHashMap不能put null对象，null成员也没有必要备份</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">           REPLACED_FIELDS</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">computeIfAbsent</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(target, (key) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> ConcurrentHashMap</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;&gt;())</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">               .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">put</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(fieldName, originFieldValue);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">       }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">   }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">   }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',7),Bi={},Ei=(0,a(9874).A)(Bi,[["render",function(i,s){const a=(0,n.g2)("font");return(0,n.uX)(),(0,n.CE)("div",null,[l,t,(0,n.Lk)("ol",null,[e,h,k,p,d,r,g,c,(0,n.Lk)("li",null,[(0,n.bF)(a,{style:{color:"#DF2A3F"}},{default:(0,n.k6)((()=>[(0,n.eW)("不要随意修改与本次迭代开发无关的其他人的代码")])),_:1}),(0,n.eW)("。")])]),o,y,(0,n.Lk)("p",null,[(0,n.Lk)("strong",null,[(0,n.bF)(a,{style:{color:"#DF2A3F"}},{default:(0,n.k6)((()=>[(0,n.eW)("错误示例")])),_:1})])]),B,(0,n.Lk)("p",null,[(0,n.Lk)("strong",null,[(0,n.bF)(a,{style:{color:"#74B602"}},{default:(0,n.k6)((()=>[(0,n.eW)("正确示例")])),_:1})])]),E,b,(0,n.Lk)("p",null,[(0,n.Lk)("strong",null,[(0,n.bF)(a,{style:{color:"#74B602"}},{default:(0,n.k6)((()=>[(0,n.eW)("正确示例")])),_:1})])]),m,f,(0,n.Lk)("p",null,[(0,n.Lk)("strong",null,[(0,n.bF)(a,{style:{color:"#DF2A3F"}},{default:(0,n.k6)((()=>[(0,n.eW)("错误示例")])),_:1})])]),u,(0,n.Lk)("p",null,[(0,n.Lk)("strong",null,[(0,n.bF)(a,{style:{color:"#8CCF17"}},{default:(0,n.k6)((()=>[(0,n.eW)("正确示例")])),_:1})])]),v,(0,n.Lk)("ol",F,[(0,n.Lk)("li",null,[(0,n.bF)(a,{style:{color:"rgb(23, 26, 29)"}},{default:(0,n.k6)((()=>[(0,n.eW)("模型自检的关键场景")])),_:1}),(0,n.Lk)("ol",null,[(0,n.Lk)("li",null,[(0,n.bF)(a,{style:{color:"rgb(23, 26, 29)"}},{default:(0,n.k6)((()=>[(0,n.eW)("外部RPC请求在模板方法中校验request模型")])),_:1})]),(0,n.Lk)("li",null,[(0,n.bF)(a,{style:{color:"rgb(23, 26, 29)"}},{default:(0,n.k6)((()=>[(0,n.eW)("接收到MQ消息时对DTO校验")])),_:1})]),(0,n.Lk)("li",null,[(0,n.bF)(a,{style:{color:"rgb(23, 26, 29)"}},{default:(0,n.k6)((()=>[(0,n.eW)("插入数据库时对DO校验")])),_:1})])])]),(0,n.Lk)("li",null,[(0,n.bF)(a,{style:{color:"rgb(23, 26, 29)"}},{default:(0,n.k6)((()=>[(0,n.eW)("尽量做快速返回式编程，比如if null return，不是if !=null xxx，减少代码层级")])),_:1})])]),(0,n.Lk)("p",null,[(0,n.Lk)("strong",null,[(0,n.bF)(a,{style:{color:"#74B602"}},{default:(0,n.k6)((()=>[(0,n.eW)("正确示例")])),_:1})])]),A,(0,n.Lk)("p",null,[(0,n.Lk)("strong",null,[(0,n.bF)(a,{style:{color:"#74B602"}})])]),C,D,(0,n.Lk)("p",null,[(0,n.Lk)("strong",null,[(0,n.bF)(a,{style:{color:"#DF2A3F"}},{default:(0,n.k6)((()=>[(0,n.eW)("错误示例: 未判断下游返回体状态，直接返回体内的字段进行使用，导致NPE。")])),_:1})])]),_,(0,n.Lk)("p",null,[(0,n.Lk)("strong",null,[(0,n.bF)(a,{style:{color:"#74B602"}},{default:(0,n.k6)((()=>[(0,n.eW)("正确示例：校验下游返回值状态，根据不同校验情况返回错误码。")])),_:1})])]),L,(0,n.Lk)("p",null,[(0,n.Lk)("strong",null,[(0,n.bF)(a,{style:{color:"#DF2A3F"}},{default:(0,n.k6)((()=>[(0,n.eW)("错误示例")])),_:1})])]),x,(0,n.Lk)("p",null,[(0,n.Lk)("strong",null,[(0,n.bF)(a,{style:{color:"#74B602"}},{default:(0,n.k6)((()=>[(0,n.eW)("正确示例")])),_:1})])]),z,(0,n.Lk)("ol",O,[(0,n.Lk)("li",null,[(0,n.eW)("查询sql语句不允许查询*，而是显示列出需要查询的字段 "),(0,n.Lk)("ol",null,[(0,n.Lk)("li",null,[(0,n.bF)(a,{style:{color:"rgb(13, 26, 38)"}},{default:(0,n.k6)((()=>[(0,n.eW)("增加查询分析器解析成本。")])),_:1})]),(0,n.Lk)("li",null,[(0,n.bF)(a,{style:{color:"rgb(13, 26, 38)"}},{default:(0,n.k6)((()=>[(0,n.eW)("增减字段容易与resultMap配置不一致。")])),_:1})]),(0,n.Lk)("li",null,[(0,n.bF)(a,{style:{color:"rgb(13, 26, 38)"}},{default:(0,n.k6)((()=>[(0,n.eW)("多余字段增加网络消耗，尤其是 text 类型的字段。")])),_:1})])])])]),q,(0,n.Lk)("ol",W,[(0,n.Lk)("li",null,[(0,n.bF)(a,{style:{color:"rgb(13, 26, 38)"}},{default:(0,n.k6)((()=>[(0,n.eW)("在代码中写分页查询逻辑时，若count为0应直接返回，避免执行后面的分页语句")])),_:1})])]),S,j,(0,n.Lk)("p",null,[(0,n.Lk)("strong",null,[(0,n.bF)(a,{style:{color:"#DF2A3F"}},{default:(0,n.k6)((()=>[(0,n.eW)("错误示例")])),_:1})])]),N,(0,n.bF)(a,{style:{color:"rgba(0, 0, 0, 0.88)"}},{default:(0,n.k6)((()=>[(0,n.eW)("增加用信记录新增资产类型字段，同时删除了一个索引。导致查询请求走到全表，导致数据库RT飙高、CPU飙高，影响访问该库的所有业务。")])),_:1}),T,(0,n.Lk)("p",null,[(0,n.Lk)("strong",null,[(0,n.bF)(a,{style:{color:"#DF2A3F"}},{default:(0,n.k6)((()=>[(0,n.eW)("错误示例")])),_:1})])]),w,(0,n.Lk)("p",null,[(0,n.Lk)("strong",null,[(0,n.bF)(a,{style:{color:"#74B602"}},{default:(0,n.k6)((()=>[(0,n.eW)("正确示例")])),_:1})])]),I,(0,n.Lk)("p",null,[(0,n.Lk)("strong",null,[(0,n.bF)(a,{style:{color:"#74B602"}},{default:(0,n.k6)((()=>[(0,n.eW)("正确示例")])),_:1})])]),(0,n.bF)(a,{style:{color:"rgba(0, 10, 26, 0.89)"}},{default:(0,n.k6)((()=>[(0,n.eW)("组合商品中，子订单中金额总和(total_pay_amount)等于支付总单中金额(pay_amount)")])),_:1}),M,P,R,(0,n.bF)(a,{style:{color:"rgba(0, 10, 26, 0.89)"}}),U,(0,n.Lk)("p",null,[(0,n.Lk)("strong",null,[(0,n.bF)(a,{style:{color:"#DF2A3F"}},{default:(0,n.k6)((()=>[(0,n.eW)("错误示例")])),_:1})])]),H,(0,n.Lk)("p",null,[(0,n.Lk)("strong",null,[(0,n.bF)(a,{style:{color:"#74B602"}},{default:(0,n.k6)((()=>[(0,n.eW)("正确示例")])),_:1})])]),V,G,(0,n.Lk)("ol",null,[(0,n.Lk)("li",null,[(0,n.bF)(a,{style:{color:"rgb(64, 64, 64)"}},{default:(0,n.k6)((()=>[(0,n.eW)("模板类尽量把应该打的日志统一打好，并且统一格式，开发同学尽量使用模板类。")])),_:1})])]),J,K,Z,X,Q,(0,n.Lk)("p",null,[(0,n.Lk)("strong",null,[(0,n.bF)(a,{style:{color:"#DF2A3F"}},{default:(0,n.k6)((()=>[(0,n.eW)("错误示例")])),_:1})])]),Y,$,(0,n.Lk)("p",null,[(0,n.Lk)("strong",null,[(0,n.bF)(a,{style:{color:"#74B602"}},{default:(0,n.k6)((()=>[(0,n.eW)("正确示例")])),_:1})])]),ii,(0,n.Lk)("ol",si,[(0,n.Lk)("li",null,[(0,n.bF)(a,{style:{color:"rgba(0, 0, 0, 0.8)"}},{default:(0,n.k6)((()=>[(0,n.eW)("在日志输出时，字符串变量之间的拼接使用占位符的方式。String字符串的拼接会使用StringBuilder的append，有性能影响。")])),_:1})])]),ai,(0,n.bF)(a,{style:{color:"rgb(0, 0, 0)"}},{default:(0,n.k6)((()=>[(0,n.eW)("1、")])),_:1}),(0,n.bF)(a,{style:{color:"#DF2A3F"}},{default:(0,n.k6)((()=>[(0,n.eW)("接口入参对象除了校验NotNull,NotBlank，还需要检验字段长度，枚举字段要校验在枚举范围内")])),_:1}),(0,n.eW)(),(0,n.bF)(a,{style:{color:"rgb(0, 0, 0)"}},{default:(0,n.k6)((()=>[(0,n.eW)("2、打印")])),_:1}),(0,n.bF)(a,{style:{color:"#DF2A3F"}},{default:(0,n.k6)((()=>[(0,n.eW)("错误日志，需要有关键信息")])),_:1}),(0,n.bF)(a,{style:{color:"rgb(0, 0, 0)"}},{default:(0,n.k6)((()=>[(0,n.eW)("，比如判断订单不存在，需要把orderId打印出来")])),_:1}),(0,n.eW)(),(0,n.bF)(a,{style:{color:"rgb(0, 0, 0)"}},{default:(0,n.k6)((()=>[(0,n.eW)("3、")])),_:1}),(0,n.eW)("**"),(0,n.bF)(a,{style:{color:"rgb(0, 0, 0)"}},{default:(0,n.k6)((()=>[(0,n.eW)("代码可重入，做好幂等，保证")])),_:1}),(0,n.eW)("****"),(0,n.bF)(a,{style:{color:"#DF2A3F","background-color":"#FBDE28"}},{default:(0,n.k6)((()=>[(0,n.eW)("中途任何地方失败，这段代码可以从头再跑一遍")])),_:1}),(0,n.eW)("** "),(0,n.bF)(a,{style:{color:"rgb(0, 0, 0)"}},{default:(0,n.k6)((()=>[(0,n.eW)("4、尽量做快速返回式编程，比如if null return，不是if !=null xxx，减少代码层级")])),_:1}),(0,n.eW)(),(0,n.bF)(a,{style:{color:"rgb(0, 0, 0)"}},{default:(0,n.k6)((()=>[(0,n.eW)("5、代码可读性，代码分段，写好注释，或者抽方法出来，不要把全部逻辑写在一起，还没有换行，要有结构性")])),_:1}),(0,n.Lk)("blockquote",null,[(0,n.bF)(a,{style:{color:"rgb(0, 0, 0)"}},{default:(0,n.k6)((()=>[(0,n.eW)("文案也校验一下，Assert的异常文案")])),_:1}),(0,n.bF)(a,{style:{color:"rgb(0, 0, 0)"}},{default:(0,n.k6)((()=>[(0,n.eW)("不要只notNull，对象里面的关键字段也校验")])),_:1}),(0,n.bF)(a,{style:{color:"#DF2A3F","background-color":"#FBDE28"}},{default:(0,n.k6)((()=>[(0,n.eW)("DB 不能 mock！！！sql grammar")])),_:1})]),(0,n.bF)(a,{style:{color:"rgb(0, 0, 0)"}}),(0,n.bF)(a,{style:{color:"rgb(0, 0, 0)"}},{default:(0,n.k6)((()=>[(0,n.eW)("步骤-mock yy")])),_:1}),(0,n.Lk)("blockquote",null,[(0,n.bF)(a,{style:{color:"rgb(0, 0, 0)"}},{default:(0,n.k6)((()=>[(0,n.eW)("1.构建你的请求，以及定义一些mock能力")])),_:1}),(0,n.eW)(),(0,n.bF)(a,{style:{color:"rgb(0, 0, 0)"}},{default:(0,n.k6)((()=>[(0,n.eW)("2.去调用你要测试的目标方法")])),_:1}),(0,n.eW)(),(0,n.bF)(a,{style:{color:"rgb(0, 0, 0)"}},{default:(0,n.k6)((()=>[(0,n.eW)("3.去检测目标方法返回的东西是不是你预期的")])),_:1})]),(0,n.bF)(a,{style:{color:"rgb(0, 0, 0)"}}),(0,n.Lk)("h2",ni,[(0,n.Lk)("a",li,[(0,n.Lk)("span",null,[(0,n.bF)(a,{style:{color:"rgb(0, 0, 0)"}},{default:(0,n.k6)((()=>[(0,n.eW)("碰到的问题集")])),_:1})])])]),(0,n.Lk)("blockquote",null,[(0,n.bF)(a,{style:{color:"rgb(0, 0, 0)"}},{default:(0,n.k6)((()=>[(0,n.eW)("Mockito when效果老是没生效，用 verify 校验问题！发现第二个参数实际用的是 String")])),_:1}),(0,n.bF)(a,{style:{color:"rgb(0, 0, 0)"}},{default:(0,n.k6)((()=>[(0,n.eW)("入参类型搞错，排错xxx")])),_:1})]),ti,(0,n.Lk)("blockquote",null,[ei,hi,(0,n.Lk)("p",null,[(0,n.Lk)("strong",null,[(0,n.bF)(a,{style:{"background-color":"#FBDE28"}},{default:(0,n.k6)((()=>[(0,n.eW)("引申出 - 学解决思路：看包是属于哪里的，到源码定位到jar包名字然后 Google这个jar名字使用手册！！！")])),_:1})])])]),ki,pi,(0,n.Lk)("p",null,[(0,n.Lk)("strong",null,[(0,n.bF)(a,{style:{"background-color":"#FBDE28"}})])]),di,ri,(0,n.Lk)("h2",gi,[(0,n.Lk)("a",ci,[(0,n.Lk)("span",null,[(0,n.eW)("✨ Mock 方式两种 - "),(0,n.bF)(a,{style:{color:"#DF2A3F"}},{default:(0,n.k6)((()=>[(0,n.eW)("复习反射部分应用场景")])),_:1})])])]),oi,(0,n.Lk)("ul",null,[(0,n.Lk)("li",null,[(0,n.bF)(a,{style:{color:"rgb(51, 51, 51)"}},{default:(0,n.k6)((()=>[(0,n.eW)("如果 ")])),_:1}),(0,n.eW)("`"),(0,n.bF)(a,{style:{color:"rgb(51, 51, 51)"}},{default:(0,n.k6)((()=>[(0,n.eW)("IlmmodelClientImpl")])),_:1}),(0,n.eW)("`"),(0,n.bF)(a,{style:{color:"rgb(51, 51, 51)"}},{default:(0,n.k6)((()=>[(0,n.eW)(" 是作为一个 Spring Bean 声明的，并且这个类中使用了 AOP 相关注解（如 ")])),_:1}),(0,n.eW)("`"),(0,n.bF)(a,{style:{color:"rgb(51, 51, 51)"}},{default:(0,n.k6)((()=>[(0,n.eW)("@Transactional")])),_:1}),(0,n.eW)("`"),(0,n.bF)(a,{style:{color:"rgb(51, 51, 51)"}},{default:(0,n.k6)((()=>[(0,n.eW)(" 或 ")])),_:1}),(0,n.eW)("`"),(0,n.bF)(a,{style:{color:"rgb(51, 51, 51)"}},{default:(0,n.k6)((()=>[(0,n.eW)("@Aspect")])),_:1}),(0,n.eW)("`"),(0,n.bF)(a,{style:{color:"rgb(51, 51, 51)"}},{default:(0,n.k6)((()=>[(0,n.eW)("），则在注入时通常会得到一个代理对象")])),_:1})]),(0,n.Lk)("li",null,[(0,n.Lk)("strong",null,[(0,n.bF)(a,{style:{color:"rgb(51, 51, 51)"}},{default:(0,n.k6)((()=>[(0,n.eW)("Proxy 类型")])),_:1})]),(0,n.bF)(a,{style:{color:"rgb(51, 51, 51)"}},{default:(0,n.k6)((()=>[(0,n.eW)("：Spring 可以使用两种类型的代理：基于 JDK 的代理（接口代理）和基于 CGLIB 的代理（子类代理）。")])),_:1})]),(0,n.Lk)("li",null,[(0,n.bF)(a,{style:{color:"rgb(51, 51, 51)"}},{default:(0,n.k6)((()=>[(0,n.eW)("AopUtils.isAopProxy(ilmmodelClientImpl)")])),_:1})])]),(0,n.bF)(a,{style:{color:"rgb(51, 51, 51)"}}),yi])}]]),bi=JSON.parse('{"path":"/code/ZOther/@Test.html","title":"代码CR规范总结","lang":"zh-CN","frontmatter":{"description":"代码CR规范总结 风格问题 根据项目配置代码格式化风格，提交之前整体格式化代码。 起名要做到清晰明了，有具体业务含义。 方法起名规则 动词 + 名词。eg: queryOrderDetail, publishPrize。 所有定义(接口，实现类，字段，方法，枚举等等)注释完备, 提高可读性。 所有提供给外部的服务接口，保证注释明确，编写完整使用文档说明...","head":[["meta",{"property":"og:url","content":"https://zzq8.cn/code/ZOther/@Test.html"}],["meta",{"property":"og:site_name","content":"Piglet"}],["meta",{"property":"og:title","content":"代码CR规范总结"}],["meta",{"property":"og:description","content":"代码CR规范总结 风格问题 根据项目配置代码格式化风格，提交之前整体格式化代码。 起名要做到清晰明了，有具体业务含义。 方法起名规则 动词 + 名词。eg: queryOrderDetail, publishPrize。 所有定义(接口，实现类，字段，方法，枚举等等)注释完备, 提高可读性。 所有提供给外部的服务接口，保证注释明确，编写完整使用文档说明..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://img-blog.csdnimg.cn/img_convert/fc0ae95cd9580e9b57cbc41166a41528.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"Piglet"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"代码CR规范总结\\",\\"image\\":[\\"https://img-blog.csdnimg.cn/img_convert/fc0ae95cd9580e9b57cbc41166a41528.png\\",\\"https://img-blog.csdnimg.cn/img_convert/17185d5767e039db08cb7f5da39e9d2d.png\\",\\"https://img-blog.csdnimg.cn/img_convert/67e5cf8038ef81dc2abdfab36e87f58d.png\\",\\"https://img-blog.csdnimg.cn/img_convert/f69a595ed885f268dc0fe0a09e7f0411.png\\",\\"https://img-blog.csdnimg.cn/img_convert/650bc2ed90117930a0436d689a322ad7.png\\",\\"https://img-blog.csdnimg.cn/img_convert/d4bb83b197f685de9cd55e1be58ac7d4.png\\",\\"https://img-blog.csdnimg.cn/img_convert/fc88718b6adb9594afbecab47bd0cdf0.png\\",\\"https://img-blog.csdnimg.cn/img_convert/ab24eaa1ed6dc73b81d04138250e58a8.png\\",\\"https://img-blog.csdnimg.cn/img_convert/3d21418087e7d749c0d6fccf51be2c7c.png\\",\\"https://img-blog.csdnimg.cn/img_convert/f3ad6616edcebef64902aa88e30f6bcc.png\\",\\"https://img-blog.csdnimg.cn/img_convert/613b4c83c3c977e0223f25a22708f319.png\\",\\"https://img-blog.csdnimg.cn/img_convert/44470d05716cece189ac60179e99d302.png\\",\\"https://img-blog.csdnimg.cn/img_convert/03ee7ea885d1a0e9918c12d2f81b76be.png\\",\\"https://img-blog.csdnimg.cn/img_convert/97224edd3c1a88e311a97872edd6c466.png\\",\\"https://img-blog.csdnimg.cn/img_convert/aba1802d32263d241ef488da1c5a1cb5.png\\",\\"https://img-blog.csdnimg.cn/img_convert/a5fd46a19229e2ac165356769eeb6974.png\\",\\"https://img-blog.csdnimg.cn/img_convert/f9577d4d9ada91fe6a590dc98e0af8d2.png\\",\\"https://img-blog.csdnimg.cn/img_convert/1ef9a3d3d4350e9aff1318a250ecbe5b.png\\",\\"https://img-blog.csdnimg.cn/img_convert/69c8b820c273cba926fdb76664bf1a6a.png\\",\\"https://img-blog.csdnimg.cn/img_convert/65452a8d5db18efd3d4193734ed9a842.png\\",\\"https://img-blog.csdnimg.cn/img_convert/e8740d4e96c989c0e2d54b17f463fe6d.png\\",\\"https://img-blog.csdnimg.cn/img_convert/18292d8a5b4792ac0ecc559f8c60d6c5.png\\",\\"https://img-blog.csdnimg.cn/img_convert/e16f975276253ab71f2a8b13b191d928.png\\",\\"https://img-blog.csdnimg.cn/img_convert/16d04e197b803541da6bad4ad19a812f.png\\",\\"https://img-blog.csdnimg.cn/img_convert/d772a53bff165aee6170d0b33268c17e.png\\",\\"https://img-blog.csdnimg.cn/img_convert/4f160e595abe71951deba0eba474a5d9.png\\",\\"https://img-blog.csdnimg.cn/img_convert/8fdabc95b88db72335c9752fbfb0dafc.png\\",\\"https://img-blog.csdnimg.cn/img_convert/55ff09e21b33c07be7f63808233ae10a.png\\",\\"https://img-blog.csdnimg.cn/img_convert/a6daa17e399a41b20aede682eeb1f273.png\\",\\"https://img-blog.csdnimg.cn/img_convert/1183d9be9d32aaef45c2e19541e27bea.png\\",\\"https://img-blog.csdnimg.cn/img_convert/d460e7d5771108c7cf912fd7e670eca2.png\\",\\"https://img-blog.csdnimg.cn/img_convert/0f47421a4706d474f869a7b0e9b8507f.png\\",\\"https://i-blog.csdnimg.cn/direct/de59078cafdc4146b873caedf4fb24d3.png\\",\\"https://img-blog.csdnimg.cn/img_convert/175bd775daf9b8cd71fec0dd5e97052e.png\\",\\"https://img-blog.csdnimg.cn/img_convert/6e49dfea401347499f916bc83251bc4a.png\\",\\"https://img-blog.csdnimg.cn/img_convert/e60ff9d43a636cdc3f79c1e440349953.png\\",\\"https://img-blog.csdnimg.cn/img_convert/ec458e7f6f7c3480c94c7ae03e2c58ee.png\\",\\"https://img-blog.csdnimg.cn/img_convert/2abf1cd9480cb3aa080b4c917cc9a004.png\\",\\"https://img-blog.csdnimg.cn/img_convert/b4d8869227907ffd821273780312e30d.png\\",\\"https://img-blog.csdnimg.cn/img_convert/99f391fe724d77b9349d92a5315323a7.png\\",\\"https://img-blog.csdnimg.cn/img_convert/ec07bcfd31d43c1f910978673ac55cf0.png\\",\\"https://img-blog.csdnimg.cn/img_convert/eabff4a780d3d5fd3d78c36b75137c33.png\\",\\"https://img-blog.csdnimg.cn/img_convert/6d7480e4ad81279b4d30bb377c16f802.png\\",\\"https://img-blog.csdnimg.cn/img_convert/2cb298f6a61ae508beebb596fc7c9a45.png\\",\\"https://img-blog.csdnimg.cn/img_convert/43cacdc8ec80a23dbb8afc77318e02e3.png\\",\\"https://img-blog.csdnimg.cn/img_convert/6900c047c8a041c79175711e2ebb6bc2.png\\",\\"https://img-blog.csdnimg.cn/img_convert/7d9e92519ba98b28a1fb4ee465e4147d.png\\",\\"https://i-blog.csdnimg.cn/direct/ca1a6ba3154c4f43bc68db0d4c906298.png\\",\\"https://img-blog.csdnimg.cn/img_convert/cf5c84ad1d548938368b8f2bc9d64544.png\\",\\"https://img-blog.csdnimg.cn/img_convert/8b0189e2b1aeb0f73d46980bbfaf2c43.png\\",\\"https://img-blog.csdnimg.cn/img_convert/81381e2130be24ad39e9fe383fe99c6b.png\\",\\"https://img-blog.csdnimg.cn/img_convert/326d86847179b01a71cae3e372f57b2a.png\\",\\"https://img-blog.csdnimg.cn/img_convert/7e8792c093f0cce9098a0e5075d30411.png\\",\\"https://img-blog.csdnimg.cn/img_convert/231b5aba8c46ab47f9b6c16503f05c47.png\\",\\"https://img-blog.csdnimg.cn/img_convert/b88ec5a5bda1dd67009d581d80ef9ba4.png\\",\\"https://i-blog.csdnimg.cn/direct/cf7b880594554d169af197cac418be70.png\\",\\"https://img-blog.csdnimg.cn/img_convert/db55b87b343954696e5ffd426620877d.png\\",\\"https://img-blog.csdnimg.cn/img_convert/2db6e63c8aa9fa4ac74732b9553118a0.png\\",\\"https://img-blog.csdnimg.cn/img_convert/c1e82eca7c54cc46bbade2e2b375593c.png\\",\\"https://img-blog.csdnimg.cn/img_convert/4c59b5edfba77a67c38331ba21e1a645.png\\",\\"https://img-blog.csdnimg.cn/img_convert/c7ae065fe1e5c183e9dc72ef575f500c.png\\",\\"https://i-blog.csdnimg.cn/direct/9459e4b54d424276b96644d5a1466409.png\\",\\"https://img-blog.csdnimg.cn/img_convert/7b5d8e7962964bd7b470da7be0e48dd5.png\\",\\"https://img-blog.csdnimg.cn/img_convert/8e7e28298bd004738c0ce9b52e8a03fb.png\\",\\"https://img-blog.csdnimg.cn/img_convert/2a789ec160915dc07d0cdb7b93507f7e.png\\",\\"https://img-blog.csdnimg.cn/img_convert/9301330a3b0e772587380d2ec8d5a83d.png\\",\\"https://i-blog.csdnimg.cn/direct/ac4ef8ad35dc4f91b6778ec3671e2d3a.png\\",\\"https://img-blog.csdnimg.cn/img_convert/69d8f5db9cbf870f93ee2dbefe016b39.png\\",\\"https://img-blog.csdnimg.cn/img_convert/2fa52cade3e76efc247072e3275cb4a4.png\\",\\"https://img-blog.csdnimg.cn/img_convert/ce2b9a93215f8aac1b36fb496c67ca92.png\\",\\"https://img-blog.csdnimg.cn/img_convert/b000fdd2d035a5ab78c64d83f5bd57e8.png\\",\\"https://img-blog.csdnimg.cn/img_convert/802da43c14e1039c432cccc3aec17dd0.png\\",\\"https://img-blog.csdnimg.cn/img_convert/f2c4802ee82a9ae50ae3aff75365edbd.png\\",\\"https://img-blog.csdnimg.cn/img_convert/56b2071a645583eea12f548335cf5374.png\\",\\"https://img-blog.csdnimg.cn/img_convert/290a45dd7fd02830f0da0aa1496a8aa1.png\\",\\"https://i-blog.csdnimg.cn/direct/9c9bed0ab21f4a9f822353c841540c33.png\\",\\"https://i-blog.csdnimg.cn/direct/d8f1a7a7493d435683462e75053b8fec.png\\",\\"https://img-blog.csdnimg.cn/img_convert/dcdd1bd57a06f8e39a0658c2309dad42.png\\",\\"https://img-blog.csdnimg.cn/img_convert/1c33ad4f9105c999703a136a07c1c415.png\\",\\"https://img-blog.csdnimg.cn/img_convert/c416d96104d0cbef627c50c248e79087.png\\",\\"https://i-blog.csdnimg.cn/direct/9349a33b53944dad916d4f2e73ca40e0.png\\",\\"https://img-blog.csdnimg.cn/img_convert/3604c7fd9f06e63be12fd0e187752154.png\\",\\"https://img-blog.csdnimg.cn/img_convert/dfefbc21688194b372ad6b166a9239fd.png\\",\\"https://img-blog.csdnimg.cn/img_convert/8465efefdb9ddcfdd80e960160fbcd58.png\\",\\"https://intranetproxy.alipay.com/skylark/lark/0/2024/png/135356742/1727346395904-e353b890-d2b9-4908-b3d3-d1552c7050ed.png\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Piglet\\",\\"url\\":\\"https://zzq8.cn\\"}]}"]]},"headers":[{"level":2,"title":"操作流程","slug":"操作流程","link":"#操作流程","children":[]},{"level":2,"title":"碰到的问题集","slug":"碰到的问题集","link":"#碰到的问题集","children":[]},{"level":2,"title":"✨ Mock 方式两种 - 复习反射部分应用场景","slug":"✨-mock-方式两种-复习反射部分应用场景","link":"#✨-mock-方式两种-复习反射部分应用场景","children":[{"level":3,"title":"注解方式","slug":"注解方式","link":"#注解方式","children":[]},{"level":3,"title":"代码方式","slug":"代码方式","link":"#代码方式","children":[]}]},{"level":2,"title":"TODO测试 - mock污染问题","slug":"todo测试-mock污染问题","link":"#todo测试-mock污染问题","children":[]}],"git":{"createdTime":1748101959000,"contributors":[{"name":"MacAir","email":"1024zzq@gmail.com","commits":1}]},"readingTime":{"minutes":19.41,"words":5824},"filePathRelative":"code/ZOther/@Test.md","localizedDate":"2025年5月24日","excerpt":"\\n<h1>风格问题</h1>\\n<ol>\\n<li>根据项目配置代码格式化风格，提交之前整体格式化代码。</li>\\n<li>起名要做到清晰明了，有具体业务含义。</li>\\n<li>方法起名规则  动词 + 名词。eg: queryOrderDetail, publishPrize。</li>\\n<li>所有定义(接口，实现类，字段，方法，枚举等等)注释完备, 提高可读性。</li>\\n<li>所有提供给外部的服务接口，保证注释明确，编写完整使用文档说明。</li>\\n<li>静态变量建议使用统一的static在当前类或者公共类中维护，便于后续引用和重构维护。</li>\\n<li>禁止魔法值逻辑。</li>\\n<li>单个方法功能不宜太多，包含内容太多不容易复用，可读性变差。尽量按照简单的逻辑拆分。</li>\\n<li>\\n。</li>\\n</ol>","autoDesc":true}')}}]);