"use strict";(self.webpackChunklearn_data=self.webpackChunklearn_data||[]).push([[5965],{9874:(i,s)=>{s.A=(i,s)=>{const a=i.__vccOpts||i;for(const[i,e]of s)a[i]=e;return a}},5852:(i,s,a)=>{a.r(s),a.d(s,{comp:()=>n,data:()=>h});var e=a(2360);const t=[(0,e.Fv)('<h1 id="黑马点评" tabindex="-1"><a class="header-anchor" href="#黑马点评"><span><a href="https://www.bilibili.com/video/BV1PG4y1s7io/?spm_id_from=333.788&amp;vd_source=0f3bf62c50d57c4a7d85b89b4d2633e0" target="_blank" rel="noopener noreferrer">黑马点评</a></span></a></h1><blockquote><p><a href="https://www.bilibili.com/video/BV1cr4y1671t/?spm_id_from=333.337.search-card.all.click&amp;vd_source=0f3bf62c50d57c4a7d85b89b4d2633e0" target="_blank" rel="noopener noreferrer">一个专门学习 Redis 而生的项目</a>，参考大众点评做的。理论+实战 42h / 3 = 14 Here the link is an instructional video, and the title link is a navigation video</p><p>set: 共同关注 zset: 排行榜应用实现，取Top N Geospatial 地理位置</p></blockquote><h2 id="一、基础篇" tabindex="-1"><a class="header-anchor" href="#一、基础篇"><span>一、基础篇</span></a></h2><h3 id="_1-课程内容" tabindex="-1"><a class="header-anchor" href="#_1-课程内容"><span>1.课程内容</span></a></h3><blockquote><p>实战篇性价比高，高级篇偏运维一点（高级、原理面试前整）</p></blockquote><figure><img src="https://pub-83c20763effa4ac69b4d6a9e22c9936e.r2.dev/img/202303041510042.png" alt="image-20230304151001878" tabindex="0" loading="lazy"><figcaption>image-20230304151001878</figcaption></figure><h3 id="_2-redis的java客户端" tabindex="-1"><a class="header-anchor" href="#_2-redis的java客户端"><span>2.Redis的JAVA客户端</span></a></h3><blockquote><p>单单使用 Jedis 的话记得配 <code>JedisPool</code> 使用Spring Data Redis的话默认实现的 lettuce，如想用 Jedis 需要单独引一下</p><p>需要注意的是，如果你需要对连接池进行更高级的配置，或者使用其他的连接池实现，可能需要手动引入 commons-pool2 依赖，并进行相应的配置。但通常情况下，使用 spring-boot-starter-data-redis 默认提供的配置已经足够满足大部分需求了。 实测：还是需要引入commons-pool2，因为data-redis里面这个依赖是optional true 总之，使用 <code>&lt;optional&gt;</code> 标签可以控制依赖的传递性，避免不必要的依赖冲突和版本冲突，但是需要注意，它的传递性也会被取消，需要手动处理相关的依赖。 <strong>之所以有这个问题，是因为springboot版本低了的原因，导致有这个optional。后面高版本没有这个optional了！</strong></p></blockquote><figure><img src="https://pub-83c20763effa4ac69b4d6a9e22c9936e.r2.dev/img/202303041526511.png" alt="image-20230304152602369" tabindex="0" loading="lazy"><figcaption>image-20230304152602369</figcaption></figure><h4 id="_2-1-redistemplate" tabindex="-1"><a class="header-anchor" href="#_2-1-redistemplate"><span>2.1.RedisTemplate</span></a></h4><blockquote><p>RedisTemplate 记得设置一下序列化对象，直接看这个类源码有四个属性要设 可以看这个四个属性的类型 <code>RedisSerializer</code> 接口有哪些实现类！<strong>一般key用RedisSerializer.string、value用json对象</strong>，<mark>但有下面问题！</mark></p></blockquote><p>优势：自动处理序列化问题，不用自己代码层面转来转去了</p><p>弊端：如下，占用额外内控空间去记录该反序列化的那个类的全路径类名</p><img src="https://pub-83c20763effa4ac69b4d6a9e22c9936e.r2.dev/img/202303041658585.png" alt="image-20230304165847419" style="zoom:50%;"><h4 id="_2-2-反序列化问题-stringredistemplate" tabindex="-1"><a class="header-anchor" href="#_2-2-反序列化问题-stringredistemplate"><span>2.2.反序列化问题-StringRedisTemplate</span></a></h4><blockquote><p>使用上述配置序列化时，反序列化有浪费内存的问题。</p></blockquote><h5 id="_1-问题" tabindex="-1"><a class="header-anchor" href="#_1-问题"><span>1）问题：</span></a></h5><figure><img src="https://pub-83c20763effa4ac69b4d6a9e22c9936e.r2.dev/img/202303041711043.png" alt="image-20230304171121214" tabindex="0" loading="lazy"><figcaption>image-20230304171121214</figcaption></figure><h5 id="_2-解决" tabindex="-1"><a class="header-anchor" href="#_2-解决"><span>2）解决</span></a></h5><p>为了节省内存空间,我们并不会使用JSON序列化器来处理value,而是统一使用String序列化器,要求只能存储String类型的key和value.当需要存储java对象时,手动完成对象的序列化和反序列化. <strong>代码复杂了点多了两个手动序列化操作，但是空间省了</strong></p><p><code>StringRedisTemplate</code>：Spring默认提供了一个StringRedisTemplate类,它的key和value的序列化方式默认就是String方式.省去了我们自定义RedisTemplate的过程</p><h2 id="二、实战篇" tabindex="-1"><a class="header-anchor" href="#二、实战篇"><span>二、实战篇</span></a></h2><figure><img src="https://pub-83c20763effa4ac69b4d6a9e22c9936e.r2.dev/img/202303060954783.png" alt="image-20230306095441886" tabindex="0" loading="lazy"><figcaption>image-20230306095441886</figcaption></figure><h2 id="_1-短信登录" tabindex="-1"><a class="header-anchor" href="#_1-短信登录"><span>1.短信登录</span></a></h2><h3 id="_1-1-这里使用hash保存用户信息" tabindex="-1"><a class="header-anchor" href="#_1-1-这里使用hash保存用户信息"><span>1.1.这里使用Hash保存用户信息</span></a></h3><blockquote><p>JSON串的格式，引号冒号还需保存，如果想加一个还得把整个串干掉</p><p>所以从优化的角度，推荐使用hash</p></blockquote><img src="https://pub-83c20763effa4ac69b4d6a9e22c9936e.r2.dev/img/202303071617889.png" alt="image-20230307161347386" style="zoom:67%;"><blockquote><p>注意 Hash 结构跟 String 结构区分，这里有Redis的一个 key 而 value（K、V）才是真正的 Hash 结构</p><p><mark>StringRedisTemplate 对象可以创建 Hash！！！</mark> stringRedisTemplate.opsForHash().putAll(tokenKey, userMap);【HASH，KV】</p><p>Note：一般存 key 会加上业务前缀做区分</p></blockquote><figure><img src="https://pub-83c20763effa4ac69b4d6a9e22c9936e.r2.dev/img/202303071617089.png" alt="image-20230307161729539" tabindex="0" loading="lazy"><figcaption>image-20230307161729539</figcaption></figure><figure><img src="https://pub-83c20763effa4ac69b4d6a9e22c9936e.r2.dev/img/202303071620766.png" alt="image-20230307162022703" tabindex="0" loading="lazy"><figcaption>image-20230307162022703</figcaption></figure><h2 id="_2-商户查询缓存" tabindex="-1"><a class="header-anchor" href="#_2-商户查询缓存"><span>2.商户查询缓存</span></a></h2><blockquote><p>场景：想着自己使用spring cache技术整合Redis，用注解简化</p><p>问题：反序列化报错：我的解决 -&gt; return list / map / String Could not read JSON: Cannot construct instance of <code>java.time.LocalDateTime</code></p><p>XX：衍生出的问题：缓存每次都不会命中</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>之前以为控制台输出了sql就是没有命中缓存，自己方法里加了log来甄别方法到底执行没。发现还是按照预期来了的</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></blockquote><p><a href="../GuliMall/Advanced">自己 Gulimall 笔记</a></p><p><a href="./Redis">三种问题场景笔记 Redis</a></p><p>亮点：缓存穿透/击穿 可以封装成工具类，给后面复用。 例如heima的视频，就活用泛型+lambda写这个工具类</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> &lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">R</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">ID</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> R</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> queryWithPassThrough</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">(</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">            String</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> keyPrefix</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> ID</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> Class</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">R</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> Function</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">ID</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> R</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> dbFallback</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> Long</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> time</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> TimeUnit</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> unit){</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    </span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    //因为查询数据库是一段函数！！！这里就可以配合lambda这么用  有一个参数一个返回值</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">    R</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> r </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> dbFallback</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">apply</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(id);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-优惠券秒杀" tabindex="-1"><a class="header-anchor" href="#_3-优惠券秒杀"><span>3.优惠券秒杀</span></a></h2><p>到这里我暂时中断了，因为我发现自己并没有那么想学！</p><p>感觉不想学还是不要强行学这一块了，就学自己想学感兴趣的时间片小的东西吧。例如尝试融入leetcode拿成就感的这种。。。</p><h2 id="hutools-utils" tabindex="-1"><a class="header-anchor" href="#hutools-utils"><span>Hutools Utils</span></a></h2><ol><li><p>复制Bean的属性，好像同Spring有个工具类一样 <code>BeanUtil.copyProperties</code></p></li><li><p>将User对象转为HashMap存储到Redis <code>BeanUtil.beanToMap</code> org.springframework.beans的是 <code>BeanUtils</code></p><ul><li><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//由于UserDTO类有属性是Long的，而StringRedisTemplate&lt;String, String&gt;，所以这里用hutools构造函数定制化全给String</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//也可笨方法new map自己转成String</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">Map</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;"> Object</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> userMap </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> BeanUtil</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">beanToMap</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(userDTO, </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> HashMap</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;&gt;(),</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">                CopyOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">create</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">                        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">setIgnoreNullValue</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">                        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">setFieldValueEditor</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">((fieldName, fieldValue) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> fieldValue</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()));</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>弹幕: 就这个错误，我在谷粒商城的springsession的序列化器转换异常搞了半天，也是Long类型的！！！！！！</strong></p></li><li><p>有个问题 BeanUtil.copyProperties的ignoreNullValue不生效</p></li><li><p>setFieldValueEditor优先级要高于ignoreNullValue导致前者首先被触发，因此出现空指针问题。你在setFieldValueEditor中也需要判空。</p><p>这么设计的原因主要是，如果原值确实是null，但是你想给一个默认值，在此前过滤掉就不合理了，而你的值编辑后转换为null，后置的判断就会过滤掉。</p></li></ul></li><li><p>和上面反着来，<code>JSONUtil.toBean(shopJson,Shop.class);</code></p></li><li><p>将Redis拿到的Hash填充到Bean <code>BeanUtil.fitlBeanWithMap</code></p></li><li><p><code>JSONUtil.toJsonStr</code></p></li><li><p>判断字符串是否为null及size小于0 <code>StrUtil.isNotBlank(shopJson)</code></p></li><li><p><code>BooleanUtil.isTrue(flag)</code></p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">Boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> flag </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> stringRedisTemplate</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">opsForValue</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">setIfAbsent</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(key, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">TimeUnit</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">SECONDS</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//因为这里自动拆箱有可能null，所以用hutools</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> BooleanUtil</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">isTrue</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(flag);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol>',41)],l={},n=(0,a(9874).A)(l,[["render",function(i,s){return(0,e.uX)(),(0,e.CE)("div",null,t)}]]),h=JSON.parse('{"path":"/code/NoSQL/RedisAdvanced.html","title":"黑马点评","lang":"zh-CN","frontmatter":{"article":false,"description":"黑马点评 一个专门学习 Redis 而生的项目，参考大众点评做的。理论+实战 42h / 3 = 14 Here the link is an instructional video, and the title link is a navigation video set: 共同关注 zset: 排行榜应用实现，取Top N Geospatial 地...","head":[["meta",{"property":"og:url","content":"https://zzq8.cn/code/NoSQL/RedisAdvanced.html"}],["meta",{"property":"og:site_name","content":"Piglet"}],["meta",{"property":"og:title","content":"黑马点评"}],["meta",{"property":"og:description","content":"黑马点评 一个专门学习 Redis 而生的项目，参考大众点评做的。理论+实战 42h / 3 = 14 Here the link is an instructional video, and the title link is a navigation video set: 共同关注 zset: 排行榜应用实现，取Top N Geospatial 地..."}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:image","content":"https://pub-83c20763effa4ac69b4d6a9e22c9936e.r2.dev/img/202303041510042.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"Piglet"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"黑马点评\\",\\"description\\":\\"黑马点评 一个专门学习 Redis 而生的项目，参考大众点评做的。理论+实战 42h / 3 = 14 Here the link is an instructional video, and the title link is a navigation video set: 共同关注 zset: 排行榜应用实现，取Top N Geospatial 地...\\"}"]]},"headers":[{"level":2,"title":"一、基础篇","slug":"一、基础篇","link":"#一、基础篇","children":[{"level":3,"title":"1.课程内容","slug":"_1-课程内容","link":"#_1-课程内容","children":[]},{"level":3,"title":"2.Redis的JAVA客户端","slug":"_2-redis的java客户端","link":"#_2-redis的java客户端","children":[]}]},{"level":2,"title":"二、实战篇","slug":"二、实战篇","link":"#二、实战篇","children":[]},{"level":2,"title":"1.短信登录","slug":"_1-短信登录","link":"#_1-短信登录","children":[{"level":3,"title":"1.1.这里使用Hash保存用户信息","slug":"_1-1-这里使用hash保存用户信息","link":"#_1-1-这里使用hash保存用户信息","children":[]}]},{"level":2,"title":"2.商户查询缓存","slug":"_2-商户查询缓存","link":"#_2-商户查询缓存","children":[]},{"level":2,"title":"3.优惠券秒杀","slug":"_3-优惠券秒杀","link":"#_3-优惠券秒杀","children":[]},{"level":2,"title":"Hutools Utils","slug":"hutools-utils","link":"#hutools-utils","children":[]}],"git":{"createdTime":1712997543000,"contributors":[{"name":"Fighting","email":"1024zzq@gmail.com","commits":2},{"name":"MacAir","email":"1024zzq@gmail.com","commits":1},{"name":"MiniPC","email":"1024zzq@gmail.com","commits":1}]},"readingTime":{"minutes":4.83,"words":1449},"filePathRelative":"code/NoSQL/RedisAdvanced.md","localizedDate":"2024年4月13日","excerpt":"\\n<blockquote>\\n<p><a href=\\"https://www.bilibili.com/video/BV1cr4y1671t/?spm_id_from=333.337.search-card.all.click&amp;vd_source=0f3bf62c50d57c4a7d85b89b4d2633e0\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">一个专门学习 Redis 而生的项目</a>，参考大众点评做的。理论+实战   42h / 3 = 14\\nHere the link is an instructional video, and the title link is a navigation video</p>\\n<p>set: 共同关注\\nzset: 排行榜应用实现，取Top N\\nGeospatial 地理位置</p>\\n</blockquote>","autoDesc":true}')}}]);