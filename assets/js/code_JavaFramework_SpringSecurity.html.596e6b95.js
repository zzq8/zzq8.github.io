"use strict";(self.webpackChunklearn_data=self.webpackChunklearn_data||[]).push([[2766],{9874:(i,s)=>{s.A=(i,s)=>{const e=i.__vccOpts||i;for(const[i,a]of s)e[i]=a;return e}},6985:(i,s,e)=>{e.r(s),e.d(s,{comp:()=>h,data:()=>d});var a=e(2360);const n=(0,a.Fv)('<h1 id="springsecurity" tabindex="-1"><a class="header-anchor" href="#springsecurity"><span><a href="https://www.bilibili.com/video/BV1mm4y1X7Hc/?spm_id_from=333.337.search-card.all.click&amp;vd_source=0f3bf62c50d57c4a7d85b89b4d2633e0" target="_blank" rel="noopener noreferrer">SpringSecurity</a></span></a></h1><blockquote><p>6 h SpringSecurity + JWT 核心：认证 &amp; 授权</p><p><a href="https://www.yuque.com/huanfqc/springsecurity/springsecurity#WkaHz" target="_blank" rel="noopener noreferrer">别人笔记</a></p><p>题外话：ali 的 SpringBoot 启动模板真不错，还带测试Controller+html https://start.aliyun.com/</p></blockquote><h2 id="一、铺垫" tabindex="-1"><a class="header-anchor" href="#一、铺垫"><span>一、铺垫</span></a></h2><h3 id="_1-介绍" tabindex="-1"><a class="header-anchor" href="#_1-介绍"><span>1.介绍</span></a></h3><p>springsecurity是安全框架，准确来说是安全管理框架。相比与另外一个安全框架<strong>Shiro</strong>，springsecurity提供了更丰富的功能，社区资源也比Shiro丰富</p><p>springsecurity框架用于Web应用的需要进行<code>认证</code>和<code>授权</code></p><p>认证：验证当前访问系统的是不是本系统的用户，并且要确认具体是哪个用户</p><p>授权：经过认证后判断当前用户是否有权限进行某个操作。认证和授权也是SpringSecurity作为安全框架的核心功能</p><p><strong>认证和授权也是SpringSecurity作为安全框架的核心功能</strong></p><h3 id="_2-项目流程" tabindex="-1"><a class="header-anchor" href="#_2-项目流程"><span>2.项目流程</span></a></h3><ol><li><p>搭SpringBoot项目（aliyun 模板好用）</p></li><li><p>引入 SpringSecurity 依赖</p><ul><li>这时进入 localhost:8080 会跳到这个框架会自带一个登陆静态页面！ 会拦截你所有 /* 请求，需要登陆后才能访问到</li><li><code>username</code>：user，<code>password</code>：idea控制台有 登陆了才能访问到</li></ul></li></ol><p>ps: 除了拦截所有请求到登陆页面，也有 https://localhost:8080/logout 登出 API</p><h3 id="_3-流程图" tabindex="-1"><a class="header-anchor" href="#_3-流程图"><span>3.流程图</span></a></h3><p>springsecurity的权限管理，是先授权后认证，所以我们先学习认证这一部分</p><p>流程图如下，注意下图的jwt指的是 <code>json web token</code>，jwt是登录校验的时候用的技术，可以根据指定的算法进行信息的加密和解密</p><figure><img src="https://pub-83c20763effa4ac69b4d6a9e22c9936e.r2.dev/img/1689586875709-6eb3d7ed-ee86-4245-9b5f-5bbe49b7144b.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h5 id="需要调整的点-默认帮我们实现很多东西-我们需要定制改" tabindex="-1"><a class="header-anchor" href="#需要调整的点-默认帮我们实现很多东西-我们需要定制改"><span>需要调整的点：默认帮我们实现很多东西，我们需要定制改</span></a></h5><ol><li>登陆界面得换成系统的，肯定不能用 SpringSecutiry 默认的了</li><li>账号密码不能用默认的，得和真实 user 表关联</li><li>前后端不分离好像用的是后端的 Session 存的Tonken，分离的话肯定不能这样。</li></ol><h3 id="_4-springsecurity原理" tabindex="-1"><a class="header-anchor" href="#_4-springsecurity原理"><span>4.springsecurity原理</span></a></h3><p>SpringSecurity的原理其实就是一个过滤器链(10+)，内部包含了提供各种功能的过滤器。例如快速入门案例里面使用到的三种过滤器，如下图</p><p>监听器 -&gt; 过滤器链 -&gt; dispatcherservlet(前置拦截器 -&gt; mapperHandle -&gt; 后置拦截器 -&gt; 最终拦截器)</p><figure><img src="https://pub-83c20763effa4ac69b4d6a9e22c9936e.r2.dev/img/1689586875966-f65f8796-6a23-4978-bfe1-ee7bc9eb3f8c.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>一、UsernamePasswordAuthenticationFilter: 负责处理我们在登陆页面填写了用户名密码后的登陆请求。入门案例的认证工作主要有它负责</p><p>二、ExceptionTranslationFilter：处理过滤器链中抛出的任何AccessDeniedException和AuthenticationException</p><p>三、FilterSecurityInterceptor：负责权限校验的过滤器</p><p><code>注意上图，橙色部分表示认证，黄色部分表示异常处理，红色部分表示授权</code></p><h2 id="二、认证" tabindex="-1"><a class="header-anchor" href="#二、认证"><span>二、认证</span></a></h2><blockquote><p>需要结合上面的 <code>流程图 &amp; 原理</code> 部分看</p></blockquote><h3 id="_1-认证流程图-橙色部分" tabindex="-1"><a class="header-anchor" href="#_1-认证流程图-橙色部分"><span>1.认证流程图（橙色部分）</span></a></h3><p><code>UsernamePasswordAuthenticationFilter</code><code>UserDetailsService</code></p><p>我们来详细学一下上面 &#39;1. springsecurity原理&#39; 的橙色部分，也就是认证那部分的知识</p><ol><li>Authentication接口: 它的实现类，表示当前访问系统的用户，封装了用户相关信息</li><li>AuthenticationManager接口：定义了认证Authentication的方法</li><li>UserDetailsService接口：加载用户特定数据的核心接口。里面定义了一个根据用户名查询用户信息的方法</li><li>UserDetails接口：提供核心用户信息。通过UserDetailsService根据用户名获取处理的用户信息要封装成UserDetails对象返回。然后将这些信息封装到Authentication对象中</li></ol><figure><img src="https://pub-83c20763effa4ac69b4d6a9e22c9936e.r2.dev/img/1689586876374-c2b3efaa-da08-48b1-85b9-f862639ddf9d.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>',33),t=(0,a.Fv)('<p>ps: 第 10 步好像是通过 ThreadLocal 存给红色授权过滤器拿信息</p><h3 id="_2-思路分析" tabindex="-1"><a class="header-anchor" href="#_2-思路分析"><span>2.思路分析</span></a></h3><p><code>第一步和第四步换成自己的代码：</code></p><p>「4」对应流程图调整点 2，需要重写该类从数据库去对比认证</p><p>「1」对应流程图调整点 1、3，第 10 步校验通过反 Token。用户提交账号密码时候提交到我们自己的 Controller，后续流程依旧是掉系统的【重点】</p><p>引入 <code>Redis</code>、<code>JWT</code> 依赖（不用对 JWT 有太过深入的了解，基本调用工具类就可以了！！！）</p><h4 id="后端" tabindex="-1"><a class="header-anchor" href="#后端"><span>- 后端：</span></a></h4><figure><img src="https://pub-83c20763effa4ac69b4d6a9e22c9936e.r2.dev/img/image-20231222154855650.png" alt="image-20231222154855650" tabindex="0" loading="lazy"><figcaption>image-20231222154855650</figcaption></figure><h4 id="前端" tabindex="-1"><a class="header-anchor" href="#前端"><span>- 前端：</span></a></h4><figure><img src="https://pub-83c20763effa4ac69b4d6a9e22c9936e.r2.dev/img/image-20231222155309514.png" alt="image-20231222155309514" tabindex="0" loading="lazy"><figcaption>image-20231222155309514</figcaption></figure><h3 id="_3-认证实现-userdetailsservice" tabindex="-1"><a class="header-anchor" href="#_3-认证实现-userdetailsservice"><span>3.认证实现-UserDetailsService</span></a></h3><blockquote><p>重写流程图-第四个类 认证登陆接口的账号、密码的后台默认实现改为落库查询</p></blockquote><p>被security拦截业务接口，出现登录页面之后，我们需要通过输入数据库里的用户和密码来登录，而不是使用security默认的用户和密码进行登录</p><p>思路: 只需要新建一个实现类，在这个实现类里面实现Security官方的UserDetailsService接口，然后重写里面的loadUserByUsername方法</p><p>注意: 重写好loadUserByUsername方法之后，我们需要把拿到 &#39;数据库与用户输入的数据&#39; 进行比对的结果，也就是user对象这个结果封装成能被 &#39;Security官方的UserDetailsService接口&#39; 接收的类型。所以可以自定义的 JavaBean 类去继承官方的 <code>UserDetails</code> 类对象</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">Service</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> UserDetailsServiceImpl</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> UserDetailsService</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">Autowired</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">    UserMapper</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> userMapper</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">Override</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> UserDetails</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> loadUserByUsername</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> username</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> UsernameNotFoundException</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">        LambdaQueryWrapper</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">User</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">wrapper</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> LambdaQueryWrapper</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;&gt;();</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">        wrapper</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">eq</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(User</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">::</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">getUserName,username);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">        User</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> user</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> userMapper</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">selectOne</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(wrapper);</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">Objects</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">isNull</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(user)) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">            throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> RuntimeException</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;用户名密码错误！&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        }</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        //TODO 根据用户查询权限信息 添加到Loginuser中</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> LoginUser</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(user);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">----------------------------</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">  </span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> LoginUser</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> UserDetails</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">{</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  private</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> xxuser</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  @</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">Override</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  //用于获取用户密码。由于使用的实体类是User，所以获取的是数据库的用户密码</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  public</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> getPassword</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> xxuser</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">getPassword</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  ...</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-1-密码加密校验问题" tabindex="-1"><a class="header-anchor" href="#_3-1-密码加密校验问题"><span>3.1.密码加密校验问题</span></a></h4><p><strong>注意：如果要测试，需要往用户表中写入用户数据，并且如果你想让用户的密码是明文存储，需要在密码前加｛noop｝。</strong> Username：Admin，Password：{noop}123456</p><p>不然 Error: <code>There is no PasswordEncoder mapped for the id &quot;null&quot;</code></p><p>具体为什么会这样，看流程图 7.</p><p>^^^</p><p>实际项目中我们不会把密码明文存储在数据库中。</p><p>默认使用的PasswordEncoder要求数据库中的密码格式为：｛id};password。它会根据id去判断密码的加密方式。但是我们一般不会采用这种方式。所以就需要替換PasswordEncoder。</p><p>我们一般使用SpringSecurity为我们提供的BCryptPasswordEncoder。</p><p><strong>我们只需要使用把BCryptPasswordEncoder对象注入Spring容器中，SpringSecurity就会使用该PasswordEncoder来进行密码校验</strong>。我们可以定义一个SpringSecurity的配置类，SpringSecurity要求这个配置类要继承WebSecurityConfigurerAdapter。</p><p>默认密码加密器是一个工厂方法创建的，包含了多个加密类型，所以需要用{加密类型id}区分，自己创建bean就不需要了</p><blockquote><p>疑问：1）必须实现Security提供的WebSecurityConfigurerAdapter类，2）并提供一个PasswordEncoder.class类型Bean到Spring容器才能修改SpringSecurity的默认密码规则吗</p><p>为什么需要实现WebSecurityConfigurerAdapter才能替换PasswordEncoder Bean，我直接提供一个PasswordEncoder Bean到Spring容器不行吗</p><p>A: 实际上，你可以直接提供一个 <code>PasswordEncoder</code> Bean 到 Spring 容器中，而无需实现 <code>WebSecurityConfigurerAdapter</code> 类。</p><p>在 Spring Security 中，<code>WebSecurityConfigurerAdapter</code> 是一个方便的基类，用于配置和自定义安全相关的设置。但它不是必需的，特别是当你只想替换 <code>PasswordEncoder</code> Bean 时。</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">Configuration</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> SecurityConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">Bean</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> PasswordEncoder</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> passwordEncoder</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        // 返回自定义的 PasswordEncoder Bean</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> MyPasswordEncoder</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // 其他配置...</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ps:</p><p>1）这个 Title 只需这一处代码即可解决，此时登陆校验数据库密码就会根据指定的 PasswordEncoder 去解密校验</p><p>2）BCryptPasswordEncoder 使用</p><figure><img src="https://cdn.nlark.com/yuque/0/2023/jpg/35597420/1689586878080-d2e1f168-a4c4-4ff7-8e53-a7bc7dfb1788.jpg?x-oss-process=image%2Finterlace%2C1" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>',32),l=(0,a.Fv)('<h3 id="_4-登陆接口-xxx-jwt" tabindex="-1"><a class="header-anchor" href="#_4-登陆接口-xxx-jwt"><span>4.登陆接口-xxx（JWT）</span></a></h3><blockquote><p>重写流程图-第一个类，自定义登录接口实现这个功能需要使用到jwt 用到上面 3.认证 后台实现落库查Form</p></blockquote><p>jwt不叫加密，是编码和摘要</p><p>jwt里面会有一个特有的秘钥 这个秘钥是用户自己设定的 会保存到token里面 校验时会根据这个秘钥校验（jwtUtil 两个方法一个create 一个parse 创建的时候有过期时间的，parse时候会解析这个 token String是否过期！）</p><p>XD：</p><ol><li><code>SecurityConfig</code> 放开 <code>/user/login</code> 的访问，自己去写登陆接口</li><li><code>authenticationManager.authenticate(UsernamePasswordAuthenticationToken.class);</code> 来校验当前 Form 表单用户信息</li><li>成功给 Token。。。存 Redis</li></ol><h3 id="_5-校验其他接口-定义jwt认证过滤器" tabindex="-1"><a class="header-anchor" href="#_5-校验其他接口-定义jwt认证过滤器"><span>5.校验其他接口-定义jwt认证过滤器</span></a></h3><blockquote><p>配置只放开了登录接口，其他接口全到这个过滤器来。有 Token 遍走 Redis 拿用户信息放 <code>SecurityContextHolder</code> 里即可！</p><p>个人对这里jwt作用理解： 区分概念 <strong>登陆接口 vs 其他接口</strong> 先登陆有了 Token 其他接口携带此 Token 进行访问是否 403</p><ol><li>TTL（jwt Token字符串解析会判断有无过期，不关注原理只要只要jwt能做就行）</li><li>有 Token 代表用户已经登陆过 解析 Token 得到 id 通过 id 去 Redis 拿用户信息比如 username 设置SpringSecurity的UsernamePasswordAuthenticationToken</li></ol><p>ps：相当于登陆接口只会一次查库，其他接口都是走的 Token</p></blockquote><p>对4.登陆实现的延续</p><p><a href="#4.springsecurity%E5%8E%9F%E7%90%86">SpringSecurity过滤器链-图</a> 结合这个图，这个过滤器应该放在第一个粉色的块（即 <code>UsernamePasswordAuthenticationFilter</code> 前面！）</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//把token校验过滤器添加到过滤器链中</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//第一个参数是上面注入的我们在filter目录写好的类，第二个参数表示你想添加到哪个过滤器之前</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">http</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">addFilterBefore</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(jwtAuthenticationTokenFilter, </span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">UsernamePasswordAuthenticationFilter</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><blockquote><p><code>SecurityContextHolder.getContext().setAuthentication(authenticationToken);</code> 图片过滤链会用这个取上下文登陆信息, 即访问其他接口会判断你这里存的用户信息有没有</p></blockquote><p>上面我们实现登录接口的时，当某个用户登录之后，该用户就会有一个token值，我们可以通过认证过滤器，由于有token值，并且token值认证通过，也就是证明是这个用户的token值，那么该用户访问我们的业务接口时，就不会被Security拦截。简单理解作用就是登录过的用户可以访问我们的业务接口，拿到对应的资源</p></blockquote><ol><li>获取token</li><li>解析token获取其中的userid</li><li>从redis中获取用户信息</li><li>存入SecurityContextHolder</li></ol><p>我的理解是jwt不可能放全量的用户信息，要么查数据库，要么查缓存</p><p>Q: 为什么之前视频里UsernamePasswordAuthenticationToken存的是username和password，而这里存的是loginUser和null？</p><p>一个是登录，一个是验证两个场景，不要混在一起看 因为这里封装的是已经认证过的了。这里应该是只要验证这个用户有无 Token 有 Token 肯定就是验证过密码的可以直接放行的只关心 id</p><p>Q：那为什么不只放 ID</p><p>我也只放了 ID 也行</p><h3 id="_6-退出登录" tabindex="-1"><a class="header-anchor" href="#_6-退出登录"><span>6.退出登录</span></a></h3><blockquote><p>XD: 感觉 Token 也只是为了拿 ID，然后数据有无还得看 Redis，例如下面注销登录就是删 Redis 就行了</p><p>我们怎么退出登录呢，也就是让某个用户的登录状态消失，也就是让token失效 ?</p><p>实现起来也比较简单，只需要定义一个登陆接口，然后获取SecurityContextHolder中的认证信息，删除redis中对应的数据即可</p></blockquote><h2 id="三、授权" tabindex="-1"><a class="header-anchor" href="#三、授权"><span>三、授权</span></a></h2><blockquote><p>相当于只是在认证的基础上，jwt认证过滤器上 set 上权限的 List</p></blockquote><h3 id="_1-实现" tabindex="-1"><a class="header-anchor" href="#_1-实现"><span>1.实现</span></a></h3><p>在SpringSecurity中，会使用默认的FilterSecurityInterceptor来进行权限校验。在FilterSecurityInterceptor中会从SecurityContextHolder获取其中的Authentication，然后获取其中的权限信息。当前用户是否拥有访问当前资源所需的权限</p><figure><img src="https://pub-83c20763effa4ac69b4d6a9e22c9936e.r2.dev/img/1689586875966-f65f8796-6a23-4978-bfe1-ee7bc9eb3f8c.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>',25),p=(0,a.Fv)('<p>所以我们在项目中只需要把当前登录用户的权限信息也存入Authentication，然后设置我们的资源所需要的权限即可</p><p>使用：</p><ol><li>启动类 <code>@EnableGlobalMethodSecurity(prePostEnabled = true)</code></li><li>Controller URL_API Method <code>@RequestMapping(&quot;/hello&quot;)</code><code>@PreAuthorize(&quot;hasAnyAuthority(&#39;test&#39;)&quot;)</code> //有test权限才能访问指定接口</li></ol><p>实现：</p><ol><li>查库的时候 User JavaBean 权限属性 set 进去</li><li>认证过滤器 set 到 <code>SecurityContextHolder</code></li></ol><h3 id="_2-rbac权限模型" tabindex="-1"><a class="header-anchor" href="#_2-rbac权限模型"><span>2.RBAC权限模型</span></a></h3><p>RBAC权限模型 (Role-Based Access Control) ，是权限系统用到的经典模型，基于角色的权限控制。该模型由以下五个主要组成部分构成:</p><p>一、用户: 在系统中代表具体个体的实体，可以是人员、程序或其他实体。用户需要访问系统资源</p><p>二、角色: 角色是权限的集合，用于定义一组相似权限的集合。角色可以被赋予给用户，从而授予用户相应的权限</p><p>三、权限: 权限表示系统中具体的操作或功能，例如读取、写入、执行等。每个权限定义了对系统资源的访问规则</p><p>四、用户-角色映射: 用户-角色映射用于表示用户与角色之间的关系。通过为用户分配适当的角色，用户可以获得与角色相关联的权限</p><p>五、角色-权限映射: 角色-权限映射表示角色与权限之间的关系。每个角色都被分配了一组权限，这些权限决定了角色可执行的操作</p><h2 id="四、自定义异常处理" tabindex="-1"><a class="header-anchor" href="#四、自定义异常处理"><span>四、自定义异常处理</span></a></h2><p>上面的我们学习了 &#39;认证&#39; 和 &#39;授权&#39;，实现了基本的权限管理，然后也学习了从数据库获取授权的 &#39;授权-RBAC权限模型&#39;，实现了从数据库获取用户具备的权限字符串。到此，我们完整地实现了权限管理的功能。</p><p>但是，当认证或授权出现报错时，我们希望响应回来的json数据有实体类的code、msg、data这三个字段，怎么实现呢</p><p>我们需要学习Spring Security的异常处理机制，就可以在认证失败或者是授权失败的情况下也能和我们的接口一样返回相同结构的json，这样可以让前端能对响应进行统一的处理</p><figure><img src="https://pub-83c20763effa4ac69b4d6a9e22c9936e.r2.dev/img/1689586875966-f65f8796-6a23-4978-bfe1-ee7bc9eb3f8c.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>在SpringSecurity中，如果我们在认证或者授权的过程中出现了异常会被ExceptionTranslationFilter捕获到，如上图。在ExceptionTranslationFilter中会去判断是认证失败还是授权失败出现的异常，其中有如下两种情况</p><p>一、如果是<code>认证过程中</code>出现的异常会被封装成AuthenticationException然后调用AuthenticationEntryPoint对象的方法去进行异常处理。</p><p>二、如果是<code>授权过程中</code>出现的异常会被封装成AccessDeniedException然后调用AccessDeniedHandler对象的方法去进行异常处理。</p><p>总结: <strong>如果我们需要自定义异常处理，我们只需要创建AuthenticationEntryPoint和AccessDeniedHandler的实现类对象，然后配置给SpringSecurity即可</strong></p><h2 id="五、其他" tabindex="-1"><a class="header-anchor" href="#五、其他"><span>五、其他</span></a></h2><h3 id="_1-一些其他的过滤器" tabindex="-1"><a class="header-anchor" href="#_1-一些其他的过滤器"><span>1.一些其他的过滤器</span></a></h3><p>&#39;登录成功的处理器&#39; AuthenticationSuccessHandler</p><p>failureHandler表示 &#39;登录认证失败的处理器&#39;</p><p>LogoutSuccessHandlerr &#39;登出成功的处理器&#39;</p><p>这三个处理器，然后在config再一配就行</p><h3 id="_2-以前没这么用过-postman测" tabindex="-1"><a class="header-anchor" href="#_2-以前没这么用过-postman测"><span>2.以前没这么用过，postman测</span></a></h3><p>由于 <code>HttpServletRequest</code> 和 <code>HttpServletResponse</code> 对象是局部对象，它们的作用域仅限于当前请求的处理过程中。一旦请求处理完成，这些对象将被销毁。</p><p>需要注意的是，虽然 <code>HttpServletRequest</code> 和 <code>HttpServletResponse</code> 对象是局部的，但您可以在Servlet中将它们传递给其他方法或对象，以便在请求处理过程中共享和操作它们的内容。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> //WebUtils是我们在utils目录写好的类</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> WebUtils</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">renderString</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(response,json);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">----------------------</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> renderString</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">HttpServletResponse</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> response</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> string) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    try</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">{</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">        response</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">setStatus</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">        response</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">setContentType</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;application/json&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">        response</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">setCharacterEncoding</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;utf-8&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">        response</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">getWriter</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(string);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    }</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">IOException</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> e</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">){</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">        e</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">printStackTrace</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    }</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',31),r={},h=(0,e(9874).A)(r,[["render",function(i,s){const e=(0,a.g2)("center");return(0,a.uX)(),(0,a.CE)("div",null,[n,(0,a.bF)(e,null,{default:(0,a.k6)((()=>[(0,a.eW)("认证流程图（!important）")])),_:1}),t,(0,a.bF)(e,null,{default:(0,a.k6)((()=>[(0,a.eW)("BCryptPasswordEncoder.class 随机加盐（即每次 encode 都会不一样，，，，，不可逆）")])),_:1}),l,(0,a.bF)(e,null,{default:(0,a.k6)((()=>[(0,a.eW)("认证过滤器-可理解为第一个粉块")])),_:1}),p])}]]),d=JSON.parse('{"path":"/code/JavaFramework/SpringSecurity.html","title":"SpringSecurity","lang":"zh-CN","frontmatter":{"article":false,"description":"SpringSecurity 6 h SpringSecurity + JWT 核心：认证 & 授权 别人笔记 题外话：ali 的 SpringBoot 启动模板真不错，还带测试Controller+html https://start.aliyun.com/ 一、铺垫 1.介绍 springsecurity是安全框架，准确来说是安全管理框架。相比与另...","head":[["meta",{"property":"og:url","content":"https://zzq8.cn/code/JavaFramework/SpringSecurity.html"}],["meta",{"property":"og:site_name","content":"Piglet"}],["meta",{"property":"og:title","content":"SpringSecurity"}],["meta",{"property":"og:description","content":"SpringSecurity 6 h SpringSecurity + JWT 核心：认证 & 授权 别人笔记 题外话：ali 的 SpringBoot 启动模板真不错，还带测试Controller+html https://start.aliyun.com/ 一、铺垫 1.介绍 springsecurity是安全框架，准确来说是安全管理框架。相比与另..."}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:image","content":"https://pub-83c20763effa4ac69b4d6a9e22c9936e.r2.dev/img/1689586875709-6eb3d7ed-ee86-4245-9b5f-5bbe49b7144b.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"Piglet"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"SpringSecurity\\",\\"description\\":\\"SpringSecurity 6 h SpringSecurity + JWT 核心：认证 & 授权 别人笔记 题外话：ali 的 SpringBoot 启动模板真不错，还带测试Controller+html https://start.aliyun.com/ 一、铺垫 1.介绍 springsecurity是安全框架，准确来说是安全管理框架。相比与另...\\"}"]]},"headers":[{"level":2,"title":"一、铺垫","slug":"一、铺垫","link":"#一、铺垫","children":[{"level":3,"title":"1.介绍","slug":"_1-介绍","link":"#_1-介绍","children":[]},{"level":3,"title":"2.项目流程","slug":"_2-项目流程","link":"#_2-项目流程","children":[]},{"level":3,"title":"3.流程图","slug":"_3-流程图","link":"#_3-流程图","children":[]},{"level":3,"title":"4.springsecurity原理","slug":"_4-springsecurity原理","link":"#_4-springsecurity原理","children":[]}]},{"level":2,"title":"二、认证","slug":"二、认证","link":"#二、认证","children":[{"level":3,"title":"1.认证流程图（橙色部分）","slug":"_1-认证流程图-橙色部分","link":"#_1-认证流程图-橙色部分","children":[]},{"level":3,"title":"2.思路分析","slug":"_2-思路分析","link":"#_2-思路分析","children":[]},{"level":3,"title":"3.认证实现-UserDetailsService","slug":"_3-认证实现-userdetailsservice","link":"#_3-认证实现-userdetailsservice","children":[]},{"level":3,"title":"4.登陆接口-xxx（JWT）","slug":"_4-登陆接口-xxx-jwt","link":"#_4-登陆接口-xxx-jwt","children":[]},{"level":3,"title":"5.校验其他接口-定义jwt认证过滤器","slug":"_5-校验其他接口-定义jwt认证过滤器","link":"#_5-校验其他接口-定义jwt认证过滤器","children":[]},{"level":3,"title":"6.退出登录","slug":"_6-退出登录","link":"#_6-退出登录","children":[]}]},{"level":2,"title":"三、授权","slug":"三、授权","link":"#三、授权","children":[{"level":3,"title":"1.实现","slug":"_1-实现","link":"#_1-实现","children":[]},{"level":3,"title":"2.RBAC权限模型","slug":"_2-rbac权限模型","link":"#_2-rbac权限模型","children":[]}]},{"level":2,"title":"四、自定义异常处理","slug":"四、自定义异常处理","link":"#四、自定义异常处理","children":[]},{"level":2,"title":"五、其他","slug":"五、其他","link":"#五、其他","children":[{"level":3,"title":"1.一些其他的过滤器","slug":"_1-一些其他的过滤器","link":"#_1-一些其他的过滤器","children":[]},{"level":3,"title":"2.以前没这么用过，postman测","slug":"_2-以前没这么用过-postman测","link":"#_2-以前没这么用过-postman测","children":[]}]}],"git":{"createdTime":1712997543000,"contributors":[{"name":"Fighting","email":"1024zzq@gmail.com","commits":1},{"name":"MacAir","email":"1024zzq@gmail.com","commits":1},{"name":"MiniPC","email":"1024zzq@gmail.com","commits":1}]},"readingTime":{"minutes":13.11,"words":3934},"filePathRelative":"code/JavaFramework/SpringSecurity.md","localizedDate":"2024年4月13日","excerpt":"\\n<blockquote>\\n<p>6 h   SpringSecurity + JWT   核心：认证 &amp; 授权</p>\\n<p><a href=\\"https://www.yuque.com/huanfqc/springsecurity/springsecurity#WkaHz\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">别人笔记</a></p>\\n<p>题外话：ali 的 SpringBoot 启动模板真不错，还带测试Controller+html\\nhttps://start.aliyun.com/</p>\\n</blockquote>","autoDesc":true}')}}]);