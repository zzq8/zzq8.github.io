"use strict";(self.webpackChunklearn_data=self.webpackChunklearn_data||[]).push([[1177],{9874:(i,a)=>{a.A=(i,a)=>{const s=i.__vccOpts||i;for(const[i,e]of a)s[i]=e;return s}},9673:(i,a,s)=>{s.r(a),s.d(a,{comp:()=>l,data:()=>p});var e=s(2360);const n=[(0,e.Fv)('<h1 id="jvm" tabindex="-1"><a class="header-anchor" href="#jvm"><span>JVM</span></a></h1><blockquote><p>JVM 相关的知识点，一般是大厂才会问到，面试中小厂就没必要准备了。JVM 面试中比较常问的是 <a href="https://javaguide.cn/java/jvm/memory-area.html" target="_blank" rel="noopener noreferrer">Java 内存区域</a>、<a href="https://javaguide.cn/java/jvm/jvm-garbage-collection.html" target="_blank" rel="noopener noreferrer">JVM 垃圾回收</a>、<a href="https://javaguide.cn/java/jvm/classloader.html" target="_blank" rel="noopener noreferrer">类加载器和双亲委派模型</a> 以及 JVM 调优和问题排查（我之前分享过一些<a href="https://t.zsxq.com/0bsAac47U" target="_blank" rel="noopener noreferrer">常见的线上问题案例</a>，里面就有 JVM 相关的）。</p></blockquote><figure><img src="https://pub-83c20763effa4ac69b4d6a9e22c9936e.r2.dev/img/331425-20160623115845438-670228585.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h4 id="双亲委派模型" tabindex="-1"><a class="header-anchor" href="#双亲委派模型"><span># 双亲委派模型</span></a></h4><p>Java有哪些类加载器，双亲委派模型是什么，为什么要这样设计？怎么打破双亲委派模型？ 看了jvm笔记的link地址 javaguide</p><p>​ Bootstrap\\extension\\application<br> ​ 针对JVM提供的三个内置的类加载器 <code>【自底向上查找判断类是否被加载，自顶向下尝试加载类】</code><br> ​ <code>可以避免类的重复加载（JVM 区分不同类的方式不仅仅根据类名，相同的类文件被不同的类加载器加载产生的是两个不同的类），也保证了 Java 的核心 API 不被篡改。</code></p><p>​ 类加载器在进行类加载的时候，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成（调用父加载器 <code>loadClass()</code>方法来加载类）。 如果想打破双亲委派模型则需要重写 <code>loadClass()</code> 方法。</p><h4 id="jvm-参数" tabindex="-1"><a class="header-anchor" href="#jvm-参数"><span><mark># JVM 参数</mark></span></a></h4><p>先分析一下里面各个参数的含义：</p><ul><li><p>-Xms：1G ， 就是说初始堆大小为1G</p></li><li><p>-Xmx：2G ， 就是说最大堆大小为2G</p></li><li><p>-Xmn：500M ，就是说年轻代大小是500M（包括一个Eden和两个Survivor S0、S1）</p></li><li><p>-XX:MaxPermSize：64M ， 就是说设置持久代（永久代）最大值为64M</p><ul><li><blockquote><p>在 JDK 8 及更高版本中，<code>-XX:MaxPermSize</code> 参数不再起作用。在 JDK 8 之前的版本中，Java 虚拟机使用永久代（Permanent Generation）来存储类的元数据、静态变量等信息。<code>-XX:MaxPermSize</code> 参数用于配置永久代的最大大小。</p><p>然而，从 JDK 8 开始，永久代被称为元空间（Metaspace），并且不再受到固定大小的限制。元空间的大小由系统的可用内存决定，并且可以根据需要自动扩展。因此，<code>-XX:MaxPermSize</code> 参数不再适用于 JDK 8 及更高版本。</p><p>取而代之的是使用 <code>-XX:MaxMetaspaceSize</code> 参数来配置元空间的最大大小。你可以使用该参数来限制元空间的增长，防止应用程序使用过多的内存。</p><p>例如，可以使用以下命令行参数来设置元空间的最大大小为 256MB：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>-XX:MaxMetaspaceSize=256m</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>需要注意的是，元空间的大小不再计入 Java 堆内存的限制，因此你不再需要为永久代或元空间单独分配内存。Java 虚拟机会根据应用程序的需求自动管理元空间的内存使用。<mark>(XD 脑袋里想着那个三层的图就好。上两层可以看作是堆的，最下面一层就是这个参数点了)</mark></p></blockquote></li></ul></li><li><p>-XX:+UseConcMarkSweepGC ， 就是说使用使用CMS内存收集算法</p></li><li><p>-XX:SurvivorRatio=3 ， 就是说Eden区与Survivor区的大小比值为3：1：1</p><ul><li>在默认情况下，<code>Eden区和Survivor0、Survivor1的比例是8:1:1</code></li></ul></li></ul><p>题目中所问的Eden区的大小是指年轻代的大小，直接根据-Xmn：500M和-XX:SurvivorRatio=3可以直接计算得出 500M*(3/(3+1+1)) =500M*（3/5） =500M*0.6 =300M 所以Eden区域的大小为300M。</p><hr><p>先说VM选项， 三种：</p><ul><li>- : 标准VM选项，VM规范的选项</li><li>-X: 非标准VM选项，不保证所有VM支持</li><li>-XX: 高级选项，高级特性，但属于不稳定的选项</li></ul><p>参见 <a href="https://link.zhihu.com/?target=http%3A//www.oracle.com/technetwork/java/javase/tech/vmoptions-jsp-140102.html%23Options" target="_blank" rel="noopener noreferrer">Java HotSpot VM Options</a></p><p>题主提到的参数前缀为X，显然属于第二类</p><p>再说这几个参数，其语义分别是：</p><ul><li>-Xmx: 堆的最大内存数，等同于-XX:MaxHeapSize</li><li>-Xms: 堆的初始化初始化大小</li><li>-Xmn: 堆中新生代初始及最大大小，如果需要进一步细化，初始化大小用-XX:NewSize，最大大小用-XX:MaxNewSize</li><li>-Xss: 线程栈大小，等同于-XX:ThreadStackSize</li></ul><p>命名应该非简称，助记的话： memory maximum, memory startup, memory nursery/new, stack size.</p><p>作者：Home3k 链接：https://www.zhihu.com/question/59957834/answer/170775050 来源：知乎 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p><h4 id="java-内存区域" tabindex="-1"><a class="header-anchor" href="#java-内存区域"><span># Java 内存区域</span></a></h4><h5 id="堆结构" tabindex="-1"><a class="header-anchor" href="#堆结构"><span>堆结构</span></a></h5><ol><li>新生代内存/ 年轻代 (Young Generation) ：1 个 Eden 2 个 Survivor (<code>Eden区和Survivor0、Survivor1的比例是8:1:1</code>)</li><li>老生代(Old Generation) 2/3 的堆空间</li></ol><p><strong>---------Young + Old = Heap---------</strong></p><ol><li>永久代(Permanent Generation)</li></ol><p>大部分情况，对象都会首先在 Eden 区域分配。如果对象在 Eden 出生并经过第一次 Minor GC后仍然能够存活，并且能被 Survivor 容纳的话，将被移动到 Survivor 空间（SO 或者s1）中，并将对象年龄设为 1（Eden 区-&gt;Survivor 区后对象的初始年龄变为1）。</p><p>对象在 Survivor 中每熬过一次 MinorGC，年龄就增加1岁，当它的年龄增加到一定程度（默认为15岁），就会被晋升到老年代中。对象晋升到老年代的年龄阈值，可以通过参数一XX: MaxTenuringThreshold来设置。</p><figure><img src="http://pub-83c20763effa4ac69b4d6a9e22c9936e.r2.dev/img/hotspot-heap-structure.png" alt="堆内存结构" tabindex="0" loading="lazy"><figcaption>堆内存结构</figcaption></figure><p>复制算法用于年轻代（大部分对象的生命周期较短），标记-整理算法用于老年代。</p><ol><li>标记-清除算法（Mark and Sweep）：该算法分为两个阶段。首先，通过根对象开始，标记所有从根对象可达的存活对象。然后，在清除阶段，清除未被标记的对象，释放其占用的内存空间。标记-清除算法可能导致内存碎片化问题。</li><li>复制算法（Copying）：该算法将内存分为两个区域，通常是年轻代的Eden区和存活区域。在垃圾回收时，将存活的对象从一个区域复制到另一个区域，同时清除已经复制的对象。复制算法解决了内存碎片化问题，但需要额外的复制操作。</li><li>标记-整理算法（Mark and Compact）：是根据老年代的特点提出的一种标记算法, 让所有存活的对象向一端移动，然后直接清理掉端边界以外的内存。</li><li>分代收集算法（Generational）：该算法基于一种观察，即大部分对象很快变成垃圾。根据对象的生命周期，将内存划分为不同的代（例如年轻代和老年代），并针对不同代采用不同的收集算法，如复制算法用于年轻代，标记-压缩算法用于老年代。</li></ol><p>内存连续空间：eden区通过复制/清除算法保证了读写连续性(因为新生代的对象产生和销毁非常频繁,所以才采用了清空的方式)</p><h5 id="方法区" tabindex="-1"><a class="header-anchor" href="#方法区"><span>方法区</span></a></h5><blockquote><p>JIT 代码缓存 TODO description</p><p>虽然 Java 虚拟机规范把<code>方法区</code>描述为堆的一个逻辑部分，但是它却有一个别名叫做 <code>Non-Heap（非堆）</code>，目的应该是与 Java 堆区分开来。</p></blockquote><p>当程序运行时被加载到内存后，这些符号才有对应的内存地址信息。这些常量一旦被转入内存就会变成<strong>运行时</strong>常量池。运行时常量池在方法区中。</p><figure><img src="http://pub-83c20763effa4ac69b4d6a9e22c9936e.r2.dev/img/method-area-jdk1.7.png" alt="method-area-jdk1.7" tabindex="0" loading="lazy"><figcaption>method-area-jdk1.7</figcaption></figure><h4 id="类加载器" tabindex="-1"><a class="header-anchor" href="#类加载器"><span># 类加载器</span></a></h4><figure><img src="https://pub-83c20763effa4ac69b4d6a9e22c9936e.r2.dev/img/8468A0AF-362C-40A8-A0D9-D3837C925B83_1_101_o.jpeg" alt="8468A0AF-362C-40A8-A0D9-D3837C925B83_1_101_o" tabindex="0" loading="lazy"><figcaption>8468A0AF-362C-40A8-A0D9-D3837C925B83_1_101_o</figcaption></figure><h4 id="other" tabindex="-1"><a class="header-anchor" href="#other"><span># Other</span></a></h4><blockquote><p><a href="https://www.nowcoder.com/test/question/done?tid=61464656&amp;qid=373226#summary" target="_blank" rel="noopener noreferrer">牛客</a></p></blockquote><p>不是局部变量在该方法被执行/调用时创建，而是应该为在该变量被声明并赋值时创建，可以理解为“当代码执行到该变量被赋值的代码时才被创建”</p><p>栈会为每个方法在运行的时候分配一块独立的栈帧内存区域，栈帧又包含“局部变量表”、“操作数栈”、“动态链接”以及“方法出口”四个部分。</p><p>举例说明：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> Demo</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">\t</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">\tpublic</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> test</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">\t\tint</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> a</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">\t\tint</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> b</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">\t\tint</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> c</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 4</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">\t\ta </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">\t}</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">\t</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">\tpublic</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">\t\tDemo</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> demo</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> Demo</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">\t\tdemo</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">\t}</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>定义了一个Demo类，其中有一个测试主方法main以及一个test()方法</p><p>那么在执行main的时候，内存分配如下</p><figure><img src="https://uploadfiles.nowcoder.com/images/20200205/485624_1580891157784_3DD0DA0218194FD23BAC5814DA8F14BA" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>其中我们只看test()桢栈中具体的流程</p><p>首先我们使用javac Demo.java来生成Demo.class文件，然后通过执行javap -c Demo来查看执行原理，这里我只截取test()方法部分</p><figure><img src="https://uploadfiles.nowcoder.com/images/20200205/485624_1580891263623_B8166EB1304331CD7854588099E99780" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>其中</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>0：iconst_5,表示将一个int类型的常量5，压入操作数栈中</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://uploadfiles.nowcoder.com/images/20200205/485624_1580891292940_9B3F52E23FB28410347F16F9B2D96E41" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>1：istore_2,表示将这个int值从栈中取出，存储到局部变量_2中（代码为变量b）</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://uploadfiles.nowcoder.com/images/20200205/485624_1580891318707_F14B6B01F2647CE0D153CE718DBE20AA" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>2：iload_2,表示将变量2，int类型的值取出，压到操作数栈</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://uploadfiles.nowcoder.com/images/20200205/485624_1580891414111_342F72ACDB0A2FC43FDD620952377BBD" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>3：iconst_4,表示将一个int类型的常量4，压入操作数栈中</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://uploadfiles.nowcoder.com/images/20200205/485624_1580891477241_2B0C2777E38CE8FB0D5809442C3F8E88" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><code>4：iadd,执行int类型的加***将操作数栈的4和5从栈中弹出并相加，将结果压入操作数栈中</code><img src="https://uploadfiles.nowcoder.com/images/20200205/485624_1580891609647_BD6DE153D00C4B6F7BB262515A2FD6B3" alt="img" loading="lazy"></p><p><code>5：istore_3,表示将这个int值从栈中取出，存储到局部变量_3中（代码为变量c）</code><img src="https://uploadfiles.nowcoder.com/images/20200205/485624_1580891808414_991A0E856CFBBDCEB8ED7E72357D339D" alt="img" loading="lazy"><code>6：iconst_2,表示将一个int类型的常量2，压入操作数栈中</code><img src="https://uploadfiles.nowcoder.com/images/20200205/485624_1580891848424_C465F8B7B5089C0CB19F73D2C57A6043" alt="img" loading="lazy"><code>7：istore_1,表示将这个int值从栈中取出，存储到局部变量_1中（代码为变量a）</code><img src="https://uploadfiles.nowcoder.com/images/20200205/485624_1580891886190_CB3E70551ACE141002352B35BFE19E4D" alt="img" loading="lazy"><code>8：return,方法结束，返回</code> 以上可以看出，虽然int a;在第一行就声明了a变量，但是直到给a赋值之后，才会在局部变量表中给a分配内存空间我们可以把赋值的代码删掉，再看看执行流程</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> Demo</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">\t</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">\tpublic</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> test</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">\t\tint</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> a</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">\t\tint</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> b</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">\t\tint</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> c</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 4</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">\t}</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">\t</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">\tpublic</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">\t\tDemo</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> demo</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> Demo</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">\t\tdemo</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">\t}</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://uploadfiles.nowcoder.com/images/20200205/485624_1580892048902_FCF7E6AE4A2FC0DD82B2B93900E92E03" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>这次我们可以看出，并没有对a就行任何操作，也就证明了“只有当给变量赋值的时候才会分配内存空间”的说法。以上</p><p>ps：我也是刚刚学到这里，如有说的不对之处望大家指出，一起探讨学习</p><blockquote><p>参考：</p><p>[小白都能看得懂的Java虚拟机内存模型]https://zhuanlan.zhihu.com/p/98337005</p><p>[通过javap命令分析java汇编指令]https://www.jianshu.com/p/6a8997560b05</p></blockquote><h4 id="面试题" tabindex="-1"><a class="header-anchor" href="#面试题"><span># 面试题</span></a></h4><blockquote><p>默认的栈大小</p></blockquote><p>Hotspot x64 印象中是 1MB 1024kb</p><p>也就是如果方法栈累加超过这个大小就会报错栈溢出</p><blockquote><p>Eden survival0 survival1</p></blockquote><p>Eden 新生代垃圾回收 --&gt; survivor 区 (S0, S1都有可能)</p><p>==&gt; Eden 区-&gt; Survivor 区后对象的初始年龄变为 1</p><p>年龄范畴 0 ~ 15, 因为 记录年龄的区域在对象头中，这个区域的大小通常是 4 位 (1111)</p><p>.new创建的对象一定在java堆吗，局部变量是基本类型创建在哪，如果基本类型是成员变量呢</p><p>不一定内存逃逸？？？ 栈 堆？</p><blockquote><p>是的一定在堆</p></blockquote><p>3.jvm堆内存详细说说，为什么要这么划分，用的垃圾回收算法</p><blockquote><p>JVM笔记，新生代用coping 算法，老年代用 mark-compact 分代收集算法-根据每个内存块的特性分配不同的收集算法（新生代死亡多，老年代存活多）</p></blockquote><p>4.什么时候会发生full gc</p><blockquote><p><strong>1.</strong> <strong>调用</strong> <strong>System.gc()</strong> 只是建议虚拟机执行 Full GC，但是虚拟机不一定真正去执行。不建议使用这种方式，而是让虚拟机管理内存。</p><p><strong>2. 未指定老年代和新生代大小，堆伸缩时会产生fullgc,所以一定要配置-Xmx、-Xms</strong></p><p><strong>3.</strong> <strong>老年代空间不足</strong></p></blockquote><p>5.full gc对程序的影响</p><blockquote><ol><li>会导致应用程序的暂停</li><li>消耗较大的系统资源，包括CPU和内存 降低应用程序的执行效率</li></ol></blockquote><p>6.怎么解决full gc</p><blockquote><ol><li>堆内存调整</li><li>尽量减少无用的对象创建和引用 检查内存泄漏（Threadlocal）</li><li>对象生命周期管理：合理管理对象的生命周期，尽量让对象能够在新生代中被回收，减少进入老年代的对象数量。通过调整新生代的大小、Survivor区的比例等参数，可以控制对象在各个内存区域的流动，避免频繁触发Full GC。</li><li>分析和调优工具</li></ol></blockquote><h4 id="场景题" tabindex="-1"><a class="header-anchor" href="#场景题"><span># 场景题</span></a></h4><h5 id="oom常见原因" tabindex="-1"><a class="header-anchor" href="#oom常见原因"><span>OOM常见原因：</span></a></h5><ol><li>内存资源耗尽未释放（死循环、ThreadLocal？）</li><li>本身资源不够 <ol><li>Linux 用 <code>jmap -heap</code> 分析</li><li>Windows 用 <code>jvisualvm</code> 图形化分析</li></ol></li></ol><h5 id="排查" tabindex="-1"><a class="header-anchor" href="#排查"><span>排查</span></a></h5><ol><li>linux 的话通过设置参数设置 dump 文件输出到磁盘</li><li>dump 文件放到 win 的 jvisualvm</li><li>分析 GCroot 的堆栈信息定位业务代码 <ol><li>at UserService.getUsers（UserService.java：17） Local Variable:java.util.ArrayList#18</li></ol></li></ol><figure><img src="http://pub-83c20763effa4ac69b4d6a9e22c9936e.r2.dev/img/image-20240326115638077.png" alt="image-20240326115638077" tabindex="0" loading="lazy"><figcaption>image-20240326115638077</figcaption></figure>',90)],t={},l=(0,s(9874).A)(t,[["render",function(i,a){return(0,e.uX)(),(0,e.CE)("div",null,n)}]]),p=JSON.parse('{"path":"/code/JVM/JVM.html","title":"JVM","lang":"zh-CN","frontmatter":{"article":false,"updated":"2025-09-20T17:48:42.000Z","description":"JVM JVM 相关的知识点，一般是大厂才会问到，面试中小厂就没必要准备了。JVM 面试中比较常问的是 Java 内存区域、JVM 垃圾回收、类加载器和双亲委派模型 以及 JVM 调优和问题排查（我之前分享过一些常见的线上问题案例，里面就有 JVM 相关的）。 imgimg # 双亲委派模型 Java有哪些类加载器，双亲委派模型是什么，为什么要这样设计...","head":[["meta",{"property":"og:url","content":"https://zzq8.cn/code/JVM/JVM.html"}],["meta",{"property":"og:site_name","content":"Piglet"}],["meta",{"property":"og:title","content":"JVM"}],["meta",{"property":"og:description","content":"JVM JVM 相关的知识点，一般是大厂才会问到，面试中小厂就没必要准备了。JVM 面试中比较常问的是 Java 内存区域、JVM 垃圾回收、类加载器和双亲委派模型 以及 JVM 调优和问题排查（我之前分享过一些常见的线上问题案例，里面就有 JVM 相关的）。 imgimg # 双亲委派模型 Java有哪些类加载器，双亲委派模型是什么，为什么要这样设计..."}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:image","content":"https://pub-83c20763effa4ac69b4d6a9e22c9936e.r2.dev/img/331425-20160623115845438-670228585.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"Piglet"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"JVM\\",\\"description\\":\\"JVM JVM 相关的知识点，一般是大厂才会问到，面试中小厂就没必要准备了。JVM 面试中比较常问的是 Java 内存区域、JVM 垃圾回收、类加载器和双亲委派模型 以及 JVM 调优和问题排查（我之前分享过一些常见的线上问题案例，里面就有 JVM 相关的）。 imgimg # 双亲委派模型 Java有哪些类加载器，双亲委派模型是什么，为什么要这样设计...\\"}"]]},"headers":[],"git":{"createdTime":1712997543000,"contributors":[{"name":"MacAir","email":"1024zzq@gmail.com","commits":2},{"name":"Fighting","email":"1024zzq@gmail.com","commits":1},{"name":"MiniPC","email":"1024zzq@gmail.com","commits":1}]},"readingTime":{"minutes":10.73,"words":3218},"filePathRelative":"code/JVM/JVM.md","localizedDate":"2024年4月13日","excerpt":"\\n<blockquote>\\n<p>JVM 相关的知识点，一般是大厂才会问到，面试中小厂就没必要准备了。JVM 面试中比较常问的是 <a href=\\"https://javaguide.cn/java/jvm/memory-area.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Java 内存区域</a>、<a href=\\"https://javaguide.cn/java/jvm/jvm-garbage-collection.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">JVM 垃圾回收</a>、<a href=\\"https://javaguide.cn/java/jvm/classloader.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">类加载器和双亲委派模型</a> 以及 JVM 调优和问题排查（我之前分享过一些<a href=\\"https://t.zsxq.com/0bsAac47U\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">常见的线上问题案例</a>，里面就有 JVM 相关的）。</p>\\n</blockquote>","autoDesc":true}')}}]);