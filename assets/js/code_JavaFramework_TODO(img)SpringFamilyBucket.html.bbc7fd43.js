"use strict";(self.webpackChunklearn_data=self.webpackChunklearn_data||[]).push([[2508],{9874:(i,s)=>{s.A=(i,s)=>{const a=i.__vccOpts||i;for(const[i,n]of s)a[i]=n;return a}},6558:(i,s,a)=>{a.r(s),a.d(s,{comp:()=>u,data:()=>y});var n=a(2360);const e=(0,n.Fv)('<h1 id="todo-img-spring全家桶" tabindex="-1"><a class="header-anchor" href="#todo-img-spring全家桶"><span>TODO(img) Spring全家桶</span></a></h1><blockquote><p>TODO：笔记太松散了，比较少 可以筛选 拿营养部分</p><h4 id="重要-没看完一节一定去极客的对应视频底下的评论过一下" tabindex="-1"><a class="header-anchor" href="#重要-没看完一节一定去极客的对应视频底下的评论过一下"><span>重要：没看完一节一定去<a href="https://time.geekbang.org/course/detail/100023501-80193" target="_blank" rel="noopener noreferrer">极客的对应视频</a>底下的评论过一下</span></a></h4><p>有问题就要带着问题去解决！ 240403 再回顾，慢就是快。 要主动学习这样学习内容的留存率更高</p><p>20h -&gt; 2h/Day ===&gt; 10 Day expect April 19th Finished</p><h4 id="pdf-课件和源代码下载地址" tabindex="-1"><a class="header-anchor" href="#pdf-课件和源代码下载地址"><span>PDF 课件和源代码下载地址：</span></a></h4><p><a href="https://gitee.com/geektime-geekbang/geektime-spring-family" target="_blank" rel="noopener noreferrer">https://gitee.com/geektime-geekbang/geektime-spring-family</a></p><p><a href="https://github.com/digitalsonic/geektime-spring-family" target="_blank" rel="noopener noreferrer">https://github.com/digitalsonic/geektime-spring-family</a></p><p>ps：2019年制作的课程，虽然版本已经跟不上现在的步子了，但还是希望能给你带去一些帮助。 架构发展：单机 - 集群 - 云</p></blockquote><h2 id="线上咖啡项目-springbucks" tabindex="-1"><a class="header-anchor" href="#线上咖啡项目-springbucks"><span>线上咖啡项目-SpringBucks</span></a></h2><p>金额相关不用浮点类型, 而是引用 joda-money jar包 + usertype.core jar来实现映射</p><p>Q: 老师，请问金融项目，使用浮点数 double 会出什么问题吗？</p><p>作者回复: 比如精度、货币转换、单位等等的，还是建议用 Money 类，不要用 Double</p><p>BigDecimal只是处理精度而已，对于货币而言，还有货币种类、货币单位、货币转换等很多东西需要考虑的。比如元转分，分转元这些Money都提供了支持。</p><p>你想啊，不同的币种他们的单位不同，小数的位数也不同，以人民币为例，我可以用元表示，也可以用分表示，后者数字是前者的100倍，如果我换个币种呢，也许是1000倍，比如伊拉克第纳尔，金额要和货币绑定在一起。你也许还会碰上货币转换等等工作，所以还是用专门的API比较方便。</p><h2 id="jdbc" tabindex="-1"><a class="header-anchor" href="#jdbc"><span>｜JDBC</span></a></h2><h3 id="h2" tabindex="-1"><a class="header-anchor" href="#h2"><span>H2</span></a></h3><blockquote><p>h2 内存数据库举例（可初始化内嵌数据库 Config/Code 中可指定 schema&amp;data SQL文件）</p></blockquote><h4 id="q-如何查看-h2-内存数据库的内容" tabindex="-1"><a class="header-anchor" href="#q-如何查看-h2-内存数据库的内容"><span>Q: 如何查看 H2 内存数据库的内容？</span></a></h4><blockquote><p>一开始跟着视频走, 只能 commandLine 启动类 log 一下看, 现在能 Web</p></blockquote><p>你应该在应用程序中运行 H2 web server，这样就可以通过 H2 Console 来访问内存数据库。在 Spring 应用程序中，你可以在应用上下文中声明了一个 web server bean：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> org.h2.tools.Server</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">...</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">Configuration</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> DataConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">Bean</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">initMethod</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;start&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> destroyMethod</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;stop&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">)</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> Server</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> h2WebServer</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> SQLException</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> Server</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">createWebServer</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;-web&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;-webAllowOthers&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;-webDaemon&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;-webPort&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;8082&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，在应用程序运行期间，你可以在浏览器中输入 <a href="http://localhost:8082" target="_blank" rel="noopener noreferrer">http://localhost:8082</a> 来访问数据库了。</p><p>参考 <a href="https://stackoverflow.com/questions/7309359/view-content-of-h2-or-hsqldb-in-memory-database" target="_blank" rel="noopener noreferrer">View content of H2 or HSQLDB in-memory database</a>。</p><p>补充:</p><ul><li><code>spring.h2.console.enabled=true</code><ul><li>log - <code>jdbc:h2:mem:3e44a043-0e60-4cc1-9491-117ff59842fz</code>(这里 dbname 可以配置的)</li></ul></li><li>Web JDBC URL 填以下 Log 的 &#39;jdbc:h2:mem:testdb&#39; (搞了很久这个地方)</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">2024</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">04</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">15</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 16</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">50</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">32.481</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">  INFO </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">44526</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> --</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> [           main] </span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">o</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">s</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">h2</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">H2ConsoleAutoConfiguration</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    :</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> H2</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> console available at </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;/h2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> Database</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> available at </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;jdbc:h2:mem:testdb&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="方法一-手工" tabindex="-1"><a class="header-anchor" href="#方法一-手工"><span>方法一：手工</span></a></h4><blockquote><p>代码方式 - 显式的配置一些参数</p></blockquote><blockquote><p>DIY 3 个 Bean, MODE=MySQL</p><p>重点只有 DataSource，其他其实只是辅助</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">Value</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;classpath:db/schema.sql&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">)</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">private</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> Resource</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> schemaScripts</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">Value</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;classpath:db/data.sql&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">)</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">private</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> Resource</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> dataScripts</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">Value</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;classpath*:mapper/*.xml&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">)</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">private</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;"> Resource</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">[] mappers</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">Bean</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">ConfigurationCustomizer</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> mybatisConfigurationCustomizer</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">() {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> configuration </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">        configuration</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">setUseGeneratedKeys</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">        configuration</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">setUseGeneratedKeys</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">        configuration</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">setCacheEnabled</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">        configuration</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">setLazyLoadingEnabled</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">        configuration</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">setDefaultExecutorType</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">ExecutorType</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">BATCH</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">        configuration</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">setUseColumnLabel</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">        configuration</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">setLogImpl</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">StdOutImpl</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    }</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">Bean</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> DataSource</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> dataSource</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">() {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">    JdbcDataSource</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> ds </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> JdbcDataSource</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">    ds</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">setURL</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;jdbc:h2:mem:testdb;MODE=MySQL;DB_CLOSE_DELAY=-1;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">    ds</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">setUser</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;sa&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">    ds</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">setPassword</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;sa&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">    ResourceDatabasePopulator</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> initializer </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> ResourceDatabasePopulator</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">    initializer</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">setScripts</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(schemaScripts, dataScripts);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">    DatabasePopulatorUtils</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">execute</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(initializer, ds);</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> ds</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">Bean</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> org</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">mybatis</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">spring</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">SqlSessionFactoryBean</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> inmemSessionFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">() {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">    org</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">mybatis</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">spring</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">SqlSessionFactoryBean</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> sessionFactoryBean </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> org</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">mybatis</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">spring</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">SqlSessionFactoryBean</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">    sessionFactoryBean</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">setDataSource</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">dataSource</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">());</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">    sessionFactoryBean</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">setMapperLocations</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(mappers);</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> sessionFactoryBean</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://img-blog.csdnimg.cn/img_convert/b479191fb8035facdcd089735d56d011.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>Q：启动时候 DIY 打印 DataSource#toString 为什么能看到 DB 的 URL 信息</p><p>A：由于 DataSource ds = new JdbcDataSource();</p><p>所以 ds.toString() 调用的是 JdbcDataSource#toString</p><p>即 return this.getTraceObjectName() + &quot;: url=&quot; + this.url + &quot; user=&quot; + this.userName;<br> 可以看到 url 信息，及其 user 信息！</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">datasource</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=====</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">ds0</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> url</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">jdbc</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">h2</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">mem</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">testdb</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">MODE</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">MySQL</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">DB_CLOSE_DELAY</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=-</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> user</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">sa</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">connection</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=====</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">conn3</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> url</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">jdbc</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">h2</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">mem</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">testdb user</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">SA</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>如果没有配数据源 JdbcDataSource，则默认的<br> &quot;dataSource&quot;: {&quot;type&quot;: &quot;com.zaxxer.hikari.HikariDataSource&quot;}<br> 具体可以通过 actuator 核实！</li><li>除了 DataSource，SpringBoot 还帮我们配了 &quot;transactionTemplate&quot;、&quot;jdbcTemplate&quot;</li></ul><p>Total：SpringBoot 帮我们配置了 DataSource、DataSourceTransactionManager、JdbcTemplate都是由他们的 xx+AutoConfiguration 配置的，例如 DataSourceAutoConfiguration -&gt; DataSource</p><p>都是按需装配的，用户 DIY 的优先级在前</p><h4 id="方法二-自动" tabindex="-1"><a class="header-anchor" href="#方法二-自动"><span><a href="https://gitee.com/geektime-geekbang/geektime-spring-family/blob/master/Chapter%202/datasource-demo/src/main/resources/data.sql" target="_blank" rel="noopener noreferrer">方法二</a>：自动</span></a></h4><p>除了上面代码方式配置外：</p><p>直接 SpringBoot 全管理，schema.sql 等 sql 文件放 resource 根目录</p><h3 id="多数据源" tabindex="-1"><a class="header-anchor" href="#多数据源"><span><a href="https://gitee.com/geektime-geekbang/geektime-spring-family/blob/master/Chapter%202/multi-datasource-demo/src/main/java/geektime/spring/data/multidatasourcedemo/MultiDataSourceDemoApplication.java" target="_blank" rel="noopener noreferrer">多数据源</a></span></a></h3><blockquote><p>Q: 为什么要 exclude, 第5节中提到：如果自行配置了数据源，那么spring不会再自动配置数据源。这边也是自行配置数据源，spring应该不会再自动配置数据源。所以，为什么还需要exclude三个自动配置的类。</p><p>A: 作者回复: 我在其他同学的留言中解释过这个问题了，可以翻一下哈。的确不exclude的是可以的，但明确不使用的东西就从项目依赖中去掉，是个不错的习惯。</p><p>第5节是在讲如果要配置多个数据源该怎么办，SpringBoot的自动配置多数都是针对只有一个DataSource的，所以我在课程中提了，要么给主要的DataSource Bean增加@Primary注解，要么就把几个自动配置类排除掉。</p><blockquote><p>略懂，更偏向 a1 Good habit</p></blockquote></blockquote><blockquote><p>⭐️ Q： spring boot 是如何保证 bean 的生成顺序是：fooDataSourceProperties -&gt; fooDataSource -&gt; fooTxManager，否则最先生成的是 fooTxManager，其依赖的 fooTxManager 仍未生成，这不就报错了么？</p><p>A：Spring自己会计算依赖关系，把依赖最底层的Bean先创建出来</p></blockquote><blockquote><p>⭐️ Q: 为啥生成 fooDataSource 时，是方法内直接调用 fooDataSourceProperties() 方法，而非在方法入参注入 fooDataSourceProperties 变量？</p><p>A：注入和调用方法的效果是一样的，这里有些小小的黑魔法，Spring对这里的调用做了处理。官方文档里有这么一句话：All @Configuration classes are subclassed at startup-time with CGLIB. In the subclass, the child method checks the container first for any cached (scoped) beans before it calls the parent method and creates a new instance.<br> Translate: 子方法在调用父方法并创建新实例之前，首先检查容器中是否有任何缓存（作用域）bean</p></blockquote><blockquote><p>Q： 如果要生成 fooJdbcTemplate 和 barJdbcTemplate，代码要如何写呢？我参照了 fooTxManager 生成方式，并且按照上一节课“如何配置单数据源”读取数据的方式，程序报错： Caused by: org.h2.jdbc.JdbcSQLSyntaxErrorException: Table &quot;FOO&quot; not found; SQL statement: SELECT * FROM FOO [42102-200]。</p><p>A: 因为你排除了SpringBoot的数据源自动配置，所以SpringBoot不会为你初始化Schema和Data，因此就没有你要的数据表。</p><blockquote><p>其实也可 Code 自定义这两个的路径配置</p></blockquote></blockquote><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//-------初始化数据库脚本代码</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">/*</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> * 这个bean只是为了在多数据源环境初始化schema即data</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> */</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">Bean</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> DataSourceInitializer</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> fooDataSourceInitializer</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">Qualifier</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;fooDataSource&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">) </span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">DataSource</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> dataSource) {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">    ResourceDatabasePopulator</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> resourceDatabasePopulator </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> ResourceDatabasePopulator</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">    resourceDatabasePopulator</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">addScript</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> ClassPathResource</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;foo-schema.sql&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">));</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">    resourceDatabasePopulator</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">addScript</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> ClassPathResource</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;foo-data.sql&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">));</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">    DataSourceInitializer</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> dataSourceInitializer </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> DataSourceInitializer</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">    dataSourceInitializer</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">setDataSource</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(dataSource);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">    dataSourceInitializer</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">setDatabasePopulator</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(resourceDatabasePopulator);</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> dataSourceInitializer</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>Q：是版本还是什么问题，去掉了第三个excluded的JDBCTemplate类，两个其中一个bean加上@Primary才跑通</p><p>A: JdbcTemplateAutoConfiguration要求只有一个DataSource Bean，我们的代码里配置了两个，自然运行会报错，在指定了@Primary后，就有了主Bean，就能正常运行了。</p></blockquote><blockquote><p>Q：两个数据源都加载进去了，怎么使用呢，比如说怎么使用第一个 ，怎么使用第二个？</p><p>A：作者回复: 这个就是要你自己来实现的了，有两个数据源，就会有两套事务的配置，两个JdbcTemplate，什么都是两个，你自己选择用哪个。我们在答疑课里针对多数据源做了些说明，你可以跳过去看看。</p></blockquote><p>配置多数据源的两种方式：</p><p><strong>方法一：</strong></p><ol><li>配置 @Primary 类型的Bean <ol><li>第一种比较简单，所以没做Demo</li></ol></li></ol><hr><p>方<strong>法二：</strong></p>',46),l=(0,n.Lk)("li",null,"DataSourceAutoConfiguration",-1),t=(0,n.Fv)('<h3 id="db-连接池" tabindex="-1"><a class="header-anchor" href="#db-连接池"><span>DB 连接池</span></a></h3><p>SpringBoot 1.x 是 tomcat-jdbc 的连接池（如想用2.x的需排除这个）</p><p>2.x 就是 HikariCP (好处: 官方自带, 快! )</p><p>ps: Tomcat不是服务器么？ A: Tomcat也有数据库连接池</p><p>Druid 好处</p><ul><li><strong>监控功能</strong>, 仅仅小的性能开销</li><li>SQL 防注入</li><li>数据库密码加密 (yml 配置加密后的就行)</li><li>慢查询日志 <ul><li>可以启动时候配置 -Ddruid.stat.logSlowSql=true (默认 3s 也可以设)</li></ul></li></ul><blockquote><h3 id="扩展参数配置-todo-notes" tabindex="-1"><a class="header-anchor" href="#扩展参数配置-todo-notes"><span>扩展参数配置 TODO Notes</span></a></h3><p>常用: 命令行参数</p><p>通过java -jar app.jar --name=&quot;Spring&quot; --server.port=9090方式来传递参数。</p><p>参数用--xxx=xxx的形式传递。</p><p>其实还有 -D</p><p>注意Java系统属性位置java -Dname=&quot;isea533&quot; -jar app.jar，可以配置的属性都是一样的，优先级不同。</p></blockquote><p>两个网址: 很好</p><blockquote><p><a href="https://blog.csdn.net/isea533/article/details/50281151" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/isea533/article/details/50281151</a></p><p><a href="https://blog.51cto.com/u_16213381/7078734" target="_blank" rel="noopener noreferrer">https://blog.51cto.com/u_16213381/7078734</a></p></blockquote><h3 id="事务抽象" tabindex="-1"><a class="header-anchor" href="#事务抽象"><span>事务抽象</span></a></h3><p>编程式事务 vs 声明式事务 (AOP)</p><p>Q: 开始事务好像不需要@EnableTransactionManagement注解，老师里面的代码，我试了一下，去掉这个注解，事务回滚也是生效的。</p><p>作者回复: 你不需要添加，是因为Spring Boot自动配置里加上了。如果不在Spring Boot的工程里，你还是需要加的。</p><p>补充 SpringBoot 笔记</p><p>在@Transactional注解中如果不配置rollbackFor属性,那么事物只会在遇到RuntimeException的时候才会回滚,加上rollbackFor=Exception.class,可以让事物在遇到非运行时异常时也回滚</p>',15),h=(0,n.Fv)('<p>方法二(TODO RecordNotes): 声明式事务除了用 AopContext 掉外, 还可以 注入调用</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">Autowired</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">    FooService</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> fooService</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">Override</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> invokeInsertThenRollback</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">() throws RollbackException {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//        insertThenRollback();   //这里事务不会生效</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//        ((FooService)(AopContext.currentProxy())).insertThenRollback();</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">        fooService</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">insertThenRollback</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="actuator" tabindex="-1"><a class="header-anchor" href="#actuator"><span>actuator</span></a></h3><blockquote><p>beans 用的多些, 看 bean 有无在, 依赖谁</p></blockquote><p>management.endpoints.web.exposure.include=* //*可以换成以下值 可多个 ,号隔开</p><p>health, beans, info env</p><h2 id="o-r-mapping" tabindex="-1"><a class="header-anchor" href="#o-r-mapping"><span>| O/R Mapping</span></a></h2><h3 id="jpa-vs-mybatis" tabindex="-1"><a class="header-anchor" href="#jpa-vs-mybatis"><span>JPA vs MyBatis</span></a></h3>',8),p=(0,n.Lk)("p",null,"JPA是规范，Hibernate是JPA的一种实现，Spring Data JPA可以帮助大家更方便地使用JPA，它底层用了Hibernate。Hibernate替我们做了ORM的工作，简单的场景中，你并不需要手写SQL",-1),k=(0,n.Fv)('<p>JDBC是各种操作的基础，</p><blockquote><p>JPA是个规范，</p><p>Hibernate是JPA的一种实现，</p><p>Spring Data JPA用的是Hibernate，</p><p>MyBatis是另一种ORM的框架，</p><p>Hibernate不用自己手写SQL，但其实复杂的HQL写到最后跟写SQL也没啥大差别了。</p><p>三年前用过JPA，简单SQL还行，复杂的用mybatis更爽，试试就知道啦!</p></blockquote><figure><img src="https://img-blog.csdnimg.cn/img_convert/e0e7b70a664bec8260b7cfe9d1cdaddb.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="mybatis" tabindex="-1"><a class="header-anchor" href="#mybatis"><span>MyBatis</span></a></h3><p><strong>该注解用于 insert 时候, auto_increment 处理</strong></p><p>@Options(useGeneratedKeys = true)</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">id bigint not </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> auto_increment</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">------------------------------------</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">Insert</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;insert into t_coffee (name, price, create_time, update_time)&quot;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">        +</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;values (#{name}, #{price}, now(), now())&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">Options</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">useGeneratedKeys</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">)     </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//自增长主键id，在插入数据后自动获取到该主键值</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>**以下处理是金额落库与代码层面的 Mapping **</p><p>mybatis.type-handlers-package=geektime.spring.data.mybatisdemo.handler</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">price bigint not </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">------------------------</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">-</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">/**</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> * 在 Money 与 Long 之间转换的 TypeHandler，处理 CNY 人民币</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> */</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> MoneyTypeHandler</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> BaseTypeHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">Money</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="nosql" tabindex="-1"><a class="header-anchor" href="#nosql"><span>| NoSQL</span></a></h2><h3 id="redis" tabindex="-1"><a class="header-anchor" href="#redis"><span>Redis</span></a></h3><blockquote><p>线上用的比较多的两种部署方式：</p><ul><li>哨兵</li><li>集群</li></ul><p>主要作分布式缓存，不能 A 机器取旧值 B 取新值</p><p>写一次可以读十次 1:10 我们可以考虑放缓存</p></blockquote><p>启动类 @EnableCaching(proxyTargetClass = true) ，由此可见，我们整个缓存的运行机制是基于 AOP 的<br> 联想：声明式事务 也是一样基于 AOP</p><blockquote><p>重要：对 Redis 的操作一定要设置一个过期时间（重要的事情讲三遍的那种）<br> 作者回复: 我们一般的用法是把Redis当缓存来用，既然是缓存就要有个失效时间，不然缓存的内容越来越多，内存相对磁盘而言还是很昂贵的。Redis里的数据一旦没了，我们要求有手段能够补偿回来。其实，显示情况也可能是这样的，Redis扛不住压力挂了，背后的DB更扛不住……</p></blockquote><h4 id="哨兵" tabindex="-1"><a class="header-anchor" href="#哨兵"><span>哨兵</span></a></h4><blockquote><p>通知、监控、故障迁移、服务发现</p><p>Q：所以什么时候用哨兵，什么时候用集群呢？</p><p>作者回复: 如果可以，我建议都用集群模式吧</p></blockquote><h4 id="集群" tabindex="-1"><a class="header-anchor" href="#集群"><span>集群</span></a></h4><blockquote><p>数据自动分片（Hash Slot）</p></blockquote><h4 id="redistemplate-vs-repository" tabindex="-1"><a class="header-anchor" href="#redistemplate-vs-repository"><span>redisTemplate VS Repository</span></a></h4><blockquote><p>Q：能否再讲讲既然有了redisTemplate,什么情况下需要使用Redis Repository</p><p>作者回复: 比如，你按ID存了一个数据到Redis里，但又希望能按别的维度来查询时，一种方式就是自己维护二级索引，而RedisRepository可以帮你做这个二级索引，让你根据自己需要来查询。</p></blockquote><p>Q：老师，教程中介绍了Redis多种调用方式，RedisTemplate、RedisRepository、@Cachexxx注解。能介绍一下这几种方式的使用场景吗？碰到什么情况应该使用什么方式？</p><p>作者回复: RedisTemplate是万能的，各种情况下都能用，不过是手工操作的；@Cachable用在把某个方法的返回值缓存的情况，可以不用自己写，Spring替你做了，这个就会比较方便。Repository这个就比较少用到，像操作数据库的Repository一样来操作Redis，如果你针对一些数据有二级索引的需求，不妨看看这个，它替你做了主键以外的索引。</p><h2 id="数据访问进阶" tabindex="-1"><a class="header-anchor" href="#数据访问进阶"><span>| 数据访问进阶</span></a></h2><h3 id="aop" tabindex="-1"><a class="header-anchor" href="#aop"><span>AOP</span></a></h3><blockquote><p>官网蛮好看，注意 AOP 是看 SpringFramework 不是 SpringBoot<br><a href="https://docs.spring.io/spring-framework/reference/core/aop/ataspectj.html" target="_blank" rel="noopener noreferrer">https://docs.spring.io/spring-framework/reference/core/aop/ataspectj.html</a></p></blockquote><p>@AspectJ 指的是一种将切面声明为带有注释的常规 Java 类的风格。<br> 所以带注解的 AOP 都是 AspectJ support</p><ul><li>@Order 数字越小优先级越高</li><li>@Aspect 说明这是一个切面类，注意还需 @Componet 修饰这个类成 Bean</li><li>@Around vs @Pointcut（可复用，Blog 使用的是这种）</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//    @Around(&quot;execution(* geektime.spring.springbucks.repository..*(..))&quot;)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">Around</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;repositoryOps()&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">)</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> Object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> logPerformance</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">ProceedingJoinPoint</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> pjp)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">Pointcut</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;execution(* geektime.spring.springbucks.repository..*(..))&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">)</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> repositoryOps</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">() {}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',29),r={href:"https://docs.spring.io/spring-framework/reference/core/aop/ataspectj/pointcuts.html",target:"_blank",rel:"noopener noreferrer"},d={id:"stopwatch",tabindex:"-1"},o={class:"header-anchor",href:"#stopwatch"},g=(0,n.Fv)('<p>Q: 为什么要用Threadlocal来包装stopwatch呢？</p><p>作者回复: 我在执行前后需要使用同一个StopWatch，所以需要有个地方暂存一下，而且每次为请求计时都需要一个不同的StopWatch，不能共用一个，既然是一个线程在处理一个请求，那比较简单的方法就是放在ThreadLocal里。</p><p>Q：为什么要在postHandle里start又stop呢</p><p>作者回复: 为了分段计时，StopWatch就跟秒表一下，可以记几段时间</p><h3 id="p6spy" tabindex="-1"><a class="header-anchor" href="#p6spy"><span>P6Spy</span></a></h3><blockquote><p>为什么需要这么多的日志？<br> 在产线中遇到各种问题的时候，你唯一能够依靠的就是你的日志！</p><p>生产会将日志分类，有针对数据访问层 DAL 的 digest 的日志，专门就是拦截 DAO方法的执行</p><p>sql 的执行会放在 sql.log</p></blockquote><p>HikariCP 数据源本身是不支持 log 打印的，可以加一个 P6Spy 来做一个 SQL 的输出（具体还是看文档，有 Integrationg p6Spy catalog）</p><ul><li>引入 jar</li><li>配置 p6spy 的 driverName，url，username&amp;password</li><li>配置 spy.properties 比如单行日志、用SLF4J记录sql、开启慢查询</li></ul><p>Druid 本身就有内置 SQL 输出</p><ul><li>可以禁用日志输出，自定义一个 Filter 比如对敏感信息的一个脱敏</li></ul><p>Q: 老师，请问一下log4j日志的原理和aop日志的原理的区别是什么</p><p>作者回复: 你说的是两个完全不同的东西，不是很理解你想问的点。Log4j就是用来打印日志的框架；AOP是用来做面向切面编程的，我们在切面里用日志框架打印了日志。</p><h2 id="spring-mvc" tabindex="-1"><a class="header-anchor" href="#spring-mvc"><span>| Spring MVC</span></a></h2><blockquote><p>核心：DispatcherServlet，是所有请求的入口。核心组成部分如下：</p><ul><li>Controller</li><li>xxxResolver <ul><li>ViewResolver</li><li>HandlerExceptionResolver</li><li>MultipartResolver</li></ul></li><li>HandlerMapping (请求映射处理逻辑)</li></ul><p>这个章节讲解 DispatcherServlet 是怎么处理一个请求的</p></blockquote><p>@ResponseStatus(HttpStatus.CREATED)</p><ul><li>可以指定 response status 的状态码，这里会是 201</li></ul><h3 id="spring-的应用程序上下文" tabindex="-1"><a class="header-anchor" href="#spring-的应用程序上下文"><span>Spring 的应用程序上下文</span></a></h3><p>关于上下文常用的接口及其实现：「先有个印象」</p><ul><li>BeanFactory（一般不直接使用） <ul><li>DefaltListableBeanFactory</li></ul></li><li>ApplicationContext（使用这个） <ul><li>ClassPathXmLApplicationContext</li><li>FileSystemXmlApplicationContext</li><li>AnnotationConfigApplicationContext</li></ul></li><li>WebApplicationContext</li></ul><p>扩展：传统的Spring MVC工程的确是有两个上下文的</p><ul><li>DispatcherServlet（Servlet WebApplicationContext -&gt; Root WebApplicationContext）</li></ul><h3 id="spring-mvc-请求处理流程-大致" tabindex="-1"><a class="header-anchor" href="#spring-mvc-请求处理流程-大致"><span>Spring MVC 请求处理流程（大致）</span></a></h3><blockquote><p>Front controller 就是 DispatcherServlet</p><ol><li>org.springframework.web.servlet.DispatcherServlet#doService</li><li>this.doDispatch(request, response); <ol><li>处理 handle</li></ol></li></ol></blockquote><figure><img src="https://img-blog.csdnimg.cn/img_convert/905612521d1014eb63d9b95af7d37862.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>扩展：大家可能会在代码当中看到像 render 这样的，大家可能把它称作是渲染（会有争议） 所以在文档当中用 “呈现” 这个词来代表我们的 render</p><h3 id="如何定义处理方法" tabindex="-1"><a class="header-anchor" href="#如何定义处理方法"><span>如何定义处理方法</span></a></h3><p>看 Cotoller 支持哪些方法参数、返回参数：（文档是个好东西！！！）</p><p><a href="https://docs.spring.io/spring-framework/reference/web/webmvc/mvc-controller/ann-methods/arguments.html" target="_blank" rel="noopener noreferrer">https://docs.spring.io/spring-framework/reference/web/webmvc/mvc-controller/ann-methods/arguments.html</a></p><ul><li>PostMapping() <ul><li>Mapping Requiests (xxxMapping 里的参数可以限定请求/响应的 context-Type 类型「consumes / produces = MediaType.xxx」)</li></ul></li></ul><h3 id="" tabindex="-1"><a class="header-anchor" href="#"><span></span></a></h3><h2 id="springboot" tabindex="-1"><a class="header-anchor" href="#springboot"><span>| SpringBoot</span></a></h2><p>Program arguments (CLl arguments to your application. ) 添加 --debug</p><p>就可以看到那些类自动配置上了，可以看 bean ！！！</p><h1 id="todo-第九章03" tabindex="-1"><a class="header-anchor" href="#todo-第九章03"><span>TODO-第九章03</span></a></h1><p>这个视频并不是Ant独有学习资料，暂时告一段落以后学完</p><p>优先级降低！！！</p>',36),c={},u=(0,a(9874).A)(c,[["render",function(i,s){const a=(0,n.g2)("font");return(0,n.uX)(),(0,n.CE)("div",null,[e,(0,n.Lk)("ol",null,[(0,n.Lk)("li",null,[(0,n.eW)("Springboot 注解 Exclude SpringBoot 自动配置以下三个类 "),(0,n.Lk)("ul",null,[l,(0,n.Lk)("li",null,[(0,n.eW)("DataSourceTransactionManager"),(0,n.bF)(a,{style:{color:"#262626"}},{default:(0,n.k6)((()=>[(0,n.eW)("AutoConfiguration")])),_:1}),(0,n.Lk)("ul",null,[(0,n.Lk)("li",null,[(0,n.bF)(a,{style:{color:"#262626"}},{default:(0,n.k6)((()=>[(0,n.eW)("父接口 PlatformTransactionManager")])),_:1})])])]),(0,n.Lk)("li",null,[(0,n.eW)("JdbcTemplate"),(0,n.bF)(a,{style:{color:"#262626"}},{default:(0,n.k6)((()=>[(0,n.eW)("AutoConfiguration")])),_:1})])])]),(0,n.Lk)("li",null,[(0,n.bF)(a,{style:{color:"#262626"}},{default:(0,n.k6)((()=>[(0,n.eW)("自定义 @Bean ")])),_:1}),(0,n.eW)("DataSourceProperties, DataSource, PlatformTransactionManager")])]),t,(0,n.Lk)("p",null,[(0,n.eW)("XD 这一点可以看源码注释! "),(0,n.bF)(a,{style:{color:"#DF2A3F","background-color":"rgb(246, 247, 251)"}},{default:(0,n.k6)((()=>[(0,n.eW)("也就是说如果我 throw 的异常不是 RuntimeException 类型的, 我注解这里就要额外配置一下!!!")])),_:1})]),(0,n.bF)(a,{style:{color:"#DF2A3F","background-color":"rgb(246, 247, 251)"}}),(0,n.bF)(a,{style:{color:"#DF2A3F","background-color":"rgb(246, 247, 251)"}},{default:(0,n.k6)((()=>[(0,n.eW)("Section: 不带事务的方法调用一个带事务的方法 使得事务生效的两种方法: ")])),_:1}),h,(0,n.Lk)("blockquote",null,[p,(0,n.Lk)("p",null,[(0,n.eW)("MyBatis是另一种ORM的框架, "),(0,n.bF)(a,{style:{color:"#DF2A3F","background-color":"rgb(246, 247, 251)"}},{default:(0,n.k6)((()=>[(0,n.eW)("DBA对SQL能有更大的把控力度")])),_:1}),(0,n.eW)("，然后大部分工程都用MyBatis，那渐渐规范就变成了用MyBatis。但这并不是说Hibernate不好，其实它作为老牌ORMapping框架，还是很不错的。")])]),k,(0,n.Lk)("p",null,[(0,n.eW)("ps: execution 最常使用切入点指示符，还可以 bean(idOrNameOfBean) 。具体看"),(0,n.Lk)("a",r,[(0,n.bF)(a,{style:{"background-color":"rgb(246, 248, 250)"}},{default:(0,n.k6)((()=>[(0,n.eW)("官网")])),_:1})])]),(0,n.Lk)("h3",d,[(0,n.Lk)("a",o,[(0,n.Lk)("span",null,[(0,n.bF)(a,{style:{"background-color":"rgb(246, 248, 250)"}},{default:(0,n.k6)((()=>[(0,n.eW)("stopwatch")])),_:1})])])]),g])}]]),y=JSON.parse('{"path":"/code/JavaFramework/TODO(img)SpringFamilyBucket.html","title":"TODO(img) Spring全家桶","lang":"zh-CN","frontmatter":{"description":"TODO(img) Spring全家桶 TODO：笔记太松散了，比较少 可以筛选 拿营养部分 重要：没看完一节一定去极客的对应视频底下的评论过一下 有问题就要带着问题去解决！ 240403 再回顾，慢就是快。 要主动学习这样学习内容的留存率更高 20h -> 2h/Day ===> 10 Day expect April 19th Finished P...","head":[["meta",{"property":"og:url","content":"https://zzq8.cn/code/JavaFramework/TODO(img)SpringFamilyBucket.html"}],["meta",{"property":"og:site_name","content":"Piglet"}],["meta",{"property":"og:title","content":"TODO(img) Spring全家桶"}],["meta",{"property":"og:description","content":"TODO(img) Spring全家桶 TODO：笔记太松散了，比较少 可以筛选 拿营养部分 重要：没看完一节一定去极客的对应视频底下的评论过一下 有问题就要带着问题去解决！ 240403 再回顾，慢就是快。 要主动学习这样学习内容的留存率更高 20h -> 2h/Day ===> 10 Day expect April 19th Finished P..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://img-blog.csdnimg.cn/img_convert/b479191fb8035facdcd089735d56d011.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"Piglet"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"TODO(img) Spring全家桶\\",\\"image\\":[\\"https://img-blog.csdnimg.cn/img_convert/b479191fb8035facdcd089735d56d011.png\\",\\"https://img-blog.csdnimg.cn/img_convert/e0e7b70a664bec8260b7cfe9d1cdaddb.png\\",\\"https://img-blog.csdnimg.cn/img_convert/905612521d1014eb63d9b95af7d37862.png\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Piglet\\",\\"url\\":\\"https://zzq8.cn\\"}]}"]]},"headers":[{"level":2,"title":"线上咖啡项目-SpringBucks","slug":"线上咖啡项目-springbucks","link":"#线上咖啡项目-springbucks","children":[]},{"level":2,"title":"｜JDBC","slug":"jdbc","link":"#jdbc","children":[{"level":3,"title":"H2","slug":"h2","link":"#h2","children":[]},{"level":3,"title":"多数据源","slug":"多数据源","link":"#多数据源","children":[]},{"level":3,"title":"DB 连接池","slug":"db-连接池","link":"#db-连接池","children":[]},{"level":3,"title":"事务抽象","slug":"事务抽象","link":"#事务抽象","children":[]},{"level":3,"title":"actuator","slug":"actuator","link":"#actuator","children":[]}]},{"level":2,"title":"| O/R Mapping","slug":"o-r-mapping","link":"#o-r-mapping","children":[{"level":3,"title":"JPA vs MyBatis","slug":"jpa-vs-mybatis","link":"#jpa-vs-mybatis","children":[]},{"level":3,"title":"MyBatis","slug":"mybatis","link":"#mybatis","children":[]}]},{"level":2,"title":"| NoSQL","slug":"nosql","link":"#nosql","children":[{"level":3,"title":"Redis","slug":"redis","link":"#redis","children":[]}]},{"level":2,"title":"| 数据访问进阶","slug":"数据访问进阶","link":"#数据访问进阶","children":[{"level":3,"title":"AOP","slug":"aop","link":"#aop","children":[]},{"level":3,"title":"stopwatch","slug":"stopwatch","link":"#stopwatch","children":[]},{"level":3,"title":"P6Spy","slug":"p6spy","link":"#p6spy","children":[]}]},{"level":2,"title":"| Spring MVC","slug":"spring-mvc","link":"#spring-mvc","children":[{"level":3,"title":"Spring 的应用程序上下文","slug":"spring-的应用程序上下文","link":"#spring-的应用程序上下文","children":[]},{"level":3,"title":"Spring MVC 请求处理流程（大致）","slug":"spring-mvc-请求处理流程-大致","link":"#spring-mvc-请求处理流程-大致","children":[]},{"level":3,"title":"如何定义处理方法","slug":"如何定义处理方法","link":"#如何定义处理方法","children":[]},{"level":3,"title":"","slug":"","link":"#","children":[]}]},{"level":2,"title":"| SpringBoot","slug":"springboot","link":"#springboot","children":[]}],"git":{"createdTime":1748101959000,"contributors":[{"name":"MacAir","email":"1024zzq@gmail.com","commits":4}]},"readingTime":{"minutes":14.34,"words":4303},"filePathRelative":"code/JavaFramework/TODO(img)SpringFamilyBucket.md","localizedDate":"2025年5月24日","excerpt":"\\n<blockquote>\\n<p>TODO：笔记太松散了，比较少     可以筛选  拿营养部分</p>\\n<h4><a class=\\"header-anchor\\" href=\\"#重要-没看完一节一定去极客的对应视频底下的评论过一下\\"><span>重要：没看完一节一定去</span></a><a href=\\"https://time.geekbang.org/course/detail/100023501-80193\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">极客的对应视频</a>底下的评论过一下</h4>\\n<p>有问题就要带着问题去解决！\\n240403 再回顾，慢就是快。   要主动学习这样学习内容的留存率更高</p>\\n<p>20h -&gt; 2h/Day    ===&gt;    10 Day    expect April 19th Finished</p>\\n<h4>PDF 课件和源代码下载地址：</h4>\\n<p><a href=\\"https://gitee.com/geektime-geekbang/geektime-spring-family\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://gitee.com/geektime-geekbang/geektime-spring-family</a></p>\\n<p><a href=\\"https://github.com/digitalsonic/geektime-spring-family\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://github.com/digitalsonic/geektime-spring-family</a></p>\\n<p>ps：2019年制作的课程，虽然版本已经跟不上现在的步子了，但还是希望能给你带去一些帮助。     架构发展：单机 - 集群 - 云</p>\\n</blockquote>","autoDesc":true}')}}]);