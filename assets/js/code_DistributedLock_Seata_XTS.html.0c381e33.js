"use strict";(self.webpackChunklearn_data=self.webpackChunklearn_data||[]).push([[2537],{9874:(a,e)=>{e.A=(a,e)=>{const t=a.__vccOpts||a;for(const[a,l]of e)t[a]=l;return t}},8009:(a,e,t)=>{t.r(e),t.d(e,{comp:()=>r,data:()=>p});var l=t(2360);const i=[(0,l.Fv)('<h1 id="seata-xts" tabindex="-1"><a class="header-anchor" href="#seata-xts"><span>Seata&amp;XTS</span></a></h1><h2 id="vs" tabindex="-1"><a class="header-anchor" href="#vs"><span>vs</span></a></h2><h3 id="对比与选择" tabindex="-1"><a class="header-anchor" href="#对比与选择"><span>对比与选择</span></a></h3><ol><li><strong>性能</strong>： <ul><li>Seata的AT模式性能较高，因为其对数据源的拦截和日志生成进行了优化。</li><li>XTS在2PC模式下性能稍低，但在复杂事务一致性需求下更加可靠。</li></ul></li><li><strong>易用性</strong>： <ul><li>Seata与Spring等生态系统集成度高，使用起来较为简单。</li><li>XTS提供简洁的API，但需要开发者更深入理解TCC模型。</li></ul></li><li><strong>场景适配</strong>： <ul><li>Seata适用于需要高性能且事务模型灵活的场景。</li><li>XTS适用于对事务一致性要求较高的场景，如金融系统。</li></ul></li></ol><h3 id="选择建议" tabindex="-1"><a class="header-anchor" href="#选择建议"><span>选择建议</span></a></h3><ul><li>如果你需要一个高性能且易用的分布式事务框架，可以考虑使用Seata。</li><li>如果你对事务一致性有严格要求，且能接受更复杂的实现，可以选择XTS。</li></ul><h1 id="seata" tabindex="-1"><a class="header-anchor" href="#seata"><span><a href="https://seata.io/zh-cn/docs/overview/what-is-seata.html" target="_blank" rel="noopener noreferrer">Seata</a></span></a></h1><blockquote><p><a href="../gulimall/%E5%88%86%E5%B8%83%E5%BC%8F%E9%AB%98%E7%BA%A7#%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1">复习Gulimall的本地事务对照着笔记来学习！</a></p><p>看标题的官网链接！！！中文的通俗易懂 下面自己码的也可以看看抄过来的图带点自己好理解的逻辑去理解 <code>@GlobalTransactional</code></p><p><a href="../gulimall/03%E3%80%81%E6%9C%AC%E5%9C%B0%E4%BA%8B%E5%8A%A1&amp;%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1.pdf#%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E5%87%A0%E7%A7%8D%E6%96%B9%E6%A1%88">2PC（Seata是这个的一个变形）</a> 这里具体看 PDF！注意方案是方案框架是框架（落地实现这个方案）</p></blockquote><h2 id="概念" tabindex="-1"><a class="header-anchor" href="#概念"><span>概念</span></a></h2><p>分布式架构肯定是多数据库、多数据源！（买家库，卖家库）甚至在不同的机房。单个就搞笑了</p><p>单体应用被拆分成微服务应用，原来的三个模块被拆分成三个独立的应用,分别使用三个独立的数据源，业务操作需要调用三三 个服务来完成。此时<strong>每个服务内部的数据一致性由本地事务来保证， 但是全局的数据一致性问题没法保证</strong>。</p><figure><img src="https://pub-83c20763effa4ac69b4d6a9e22c9936e.r2.dev/img/202207081440609.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>一句话：<strong>一次业务操作需要跨多个数据源或需要跨多个系统进行远程调用，就会产生分布式事务问题</strong>。</p><p>**一带三：**分布式事务处理过程的一ID+三组件模型</p><ul><li>Transaction ID XID 全局唯一的事务ID</li><li>三组件概念 <ul><li>TC (Transaction Coordinator) - 事务协调者：维护 全局和分支事务的状态，驱动全局事务提交或回滚。</li><li>TM (Transaction Manager) - 事务管理器：定义全局事务的范围：开始全局事务、提交或回滚全局事务。</li><li>RM (Resource Manager) - 资源管理器：管理分支事务处理的资源，与TC交谈以注册分支事务和报告分支事务的状态，并驱动分支事务提交或回滚。</li></ul></li></ul><p>处理过程：</p><ol><li>TM向TC申请开启一个全局事务，全局事务创建成功并生成一个全局唯一的XID；</li><li>XID在微服务调用链路的上下文中传播；</li><li>RM向TC注册分支事务，将其纳入XID对应全局事务的管辖；</li><li>TM向TC发起针对XID的全局提交或回滚决议；</li><li>TC调度XID下管辖的全部分支事务完成提交或回滚请求。</li></ol><figure><img src="https://pub-83c20763effa4ac69b4d6a9e22c9936e.r2.dev/img/202207081513288.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><mark><code>My Understand：</code>看图说话</mark> 我这里好理解</p><blockquote><p>Seata 分 TC、TM 和 RM 三个角色，TC（Server 端）为单独服务端部署，TM 和 RM（Client 端）由业务系统集成。</p></blockquote><p>TC 协调TM全局事务中的各个分支事务，这个全局调控的人就是Seata服务器（官网下下来运行）</p><p>TM 全局事务看成订单模块 其它小事务RM看成feign调用的</p><blockquote><p>Q：AT 模式（自动） 假如 Account 失败了，但是Stock &amp; Order成功了 那么怎么回滚？？？</p><p>A：UNDO_LOG Table（回滚日志表） 假如提交的是 +2 那就 -2 给补回来回复以前的状态。因为前面事务提交了没办法回滚了（魔改数据库）</p></blockquote><figure><img src="https://user-images.githubusercontent.com/68344696/145942191-7a2d469f-94c8-4cd2-8c7e-46ad75683636.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="快速开始" tabindex="-1"><a class="header-anchor" href="#快速开始"><span><a href="https://seata.io/zh-cn/docs/user/quickstart.html" target="_blank" rel="noopener noreferrer">快速开始</a></span></a></h2><blockquote><p>官方文档很清楚了！！！Git也有很多场景示例。Seata支持很多模式.. <strong>AT 模式：两阶段提交<a href="../gulimall/%E5%88%86%E5%B8%83%E5%BC%8F%E9%AB%98%E7%BA%A7">协议</a>的演变</strong></p></blockquote><p><strong>本地@Transactional Spring的注解</strong></p><p><strong>全局@GlobalTransactional SpringCloud的注解（控制分布式事务）：代表这个订单服务是一个全局事务，分支事务用@Transactional就行了</strong></p><p>ps：做项目订单这个全局事务需要把这两个注解都写</p><blockquote><p><a href="../gulimall/03%E3%80%81%E6%9C%AC%E5%9C%B0%E4%BA%8B%E5%8A%A1&amp;%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1.pdf">这里具体看 PDF！</a>注意方案是方案框架是框架（落地实现这个方案） <strong>✔是高并发优先考虑的，用MQ</strong> 订单用异步确保型/商品保存可2PC</p></blockquote><ul><li><p>2PC（Seata是这个的一个变形）还有3PC 注意和MySQL写日志的两阶段提交区分，是不一样的东西。Seata AT是第一阶段提交+2第二阶段看要不要补偿-2 只适合一般的分布式事务不合适高并发</p></li><li><p>柔性事务-TCC 事务补偿型方案：相当于3PC的手动版 商城项目用的很多，也有很多框架给你去用。把正常的业务代码按照框架要求拆成z和三部分就行 Try+2/add Cancel-2/delete</p></li><li><p>柔性事务-最大努力通知型方案（弹幕有公司是这个）✔ 支付宝告诉你有没有支付成功，MQ 一会发个消息告诉你成了 一会发个消息告诉你成了</p></li><li><p>柔性事务-<strong>可靠消息</strong>+最终一致性方案（异步确保型，视频是这个）✔ 也是借助 MQ 总结一句：异步下单，提高并发，提升响应，提升购物体验。</p></li></ul><h2 id="举例-at-模式-自动" tabindex="-1"><a class="header-anchor" href="#举例-at-模式-自动"><span>举例 AT 模式（自动）</span></a></h2><blockquote><p>只适用一般的分布式事务控制（例如保存商品会有几次feign优惠券之类的这里不要求高并发），<strong>不适合高并发。下单其实不适合（用MQ）</strong></p></blockquote><ol><li><p>需要数据库加一个回滚表（哪个微服务需要回滚的就得加上）</p></li><li><p><a href="https://github.com/seata/seata/releases" target="_blank" rel="noopener noreferrer">解压并启动seata-server</a>（TC 事务协调器）</p><ol><li><p>导入依赖spring-cloud-starter-alibaba-seata 会自动带上 seata-all-0.7.1</p></li><li><p>注意下载的Seata服务器版本要和 seata-all-0.7.1 对应！！</p><ul><li>registry.conf：服务注册/注册中心配置/事务日志存储位置（global_table&amp;branch_table&amp;lock_table） 修改 registrytype=nacos 或使用本地文件 file.conf 配置</li></ul></li><li><p>所有想要用到分布式事务的微服务使用seataDataSourceProxy代理自己的数据源</p><ul><li>1.4.1版不用配置数据源，在yaml中开启自动代理数据源，默认是开启的</li></ul></li><li><p><strong>每个微服务,都必须导入 registry.conf file.conf 配置服务名</strong></p><ul><li><p>问题一：<a href="https://www.cnblogs.com/LinQingYang/p/13723779.html" target="_blank" rel="noopener noreferrer">no available server to connect解决</a>（Application要配置seata： spring.cloud.alibaba.seata.tx-service-group: <strong>my_test_tx_group</strong>）</p></li><li><p><a href="https://juejin.cn/post/7163549166746992676" target="_blank" rel="noopener noreferrer">问题二：同一无法连接</a></p></li><li><p>1.4.2直接注册到nacos上 现在的没这么麻烦了吧 可能只需要一个registry.conf了</p></li></ul></li><li><p>给分布式大事务的入口标注@GLobalTransactional 每一个远程的小事务用@Transactional</p></li></ol></li></ol><p>​ P290避个坑，staea0.7不支持批量保存，我是遍历插入的，体验要stata的效果就好了，不使用高版本的stata也可以</p><p><mark>特别注意：Seata 为用户提供了 AT、TCC、SAGA 和 XA 事务模式</mark></p><blockquote><h4 id="后面看javaguide《面试指北》补充" tabindex="-1"><a class="header-anchor" href="#后面看javaguide《面试指北》补充"><span>后面看JavaGuide《<a href="https://www.yuque.com/snailclimb/mf2z3k/ng9vmg" target="_blank" rel="noopener noreferrer">面试指北</a>》补充：</span></a></h4><p>简单总结一下 2PC 两阶段中比较重要的一些点：</p><ol><li>准备阶段 的主要目的是测试 RM 能否执行 本地数据库事务 操作（!!!注意：这一步并不会提交事务）。</li><li>提交阶段 中 TM 会根据 准备阶段 中 RM 的消息来决定是执行事务提交还是回滚操作。</li><li>提交阶段 之后一定会结束当前的分布式事务</li></ol><p>2PC 的优点：</p><ul><li>实现起来非常简单，各大主流数据库比如 MySQL、Oracle 都有自己实现。</li><li>针对的是数据强一致性。不过，仍然可能存在数据不一致的情况。</li></ul><p>2PC 存在的问题：</p><ul><li>同步阻塞 ：事务参与者会在正式提交事务之前会一直占用相关的资源。比如用户小明转账给小红，那其他事务也要操作用户小明或小红的话，就会阻塞。(XD：所以谷粒商城<strong>高并发</strong>的接口没用Seata，用的是MQ柔性事务)</li><li>数据不一致 ：由于网络问题或者TM宕机都有可能会造成数据不一致的情况。比如在第2阶段（提交阶段），部分网络出现问题导致部分参与者收不到 Commit/Rollback 消息的话，就会导致数据不一致。</li><li>单点问题 ：TM在其中也是一个很重要的角色，如果TM在准备(Prepare)阶段完成之后挂掉的话，事务参与者就会一直卡在提交(Commit)阶段。</li></ul></blockquote><h1 id="xts" tabindex="-1"><a class="header-anchor" href="#xts"><span>XTS</span></a></h1><blockquote><blockquote><ul><li>XTS（eXtended Transaction Service）是一个基于2PC的分布式事务框架，用来保障在大规模分布式环境下数据的一致性</li></ul></blockquote><ul><li>在支付宝广泛使用，涉及到账务、资金的操作，都要使用XTS来确保事务最终一致性</li></ul><p>2010 TCC分库分表（用的最多接触最多） 2020 XA模式</p><p><a href="https://study.antgroup-inc.cn/learn/course/293000055/content/367000437/367000438?tenant=metastudy" target="_blank" rel="noopener noreferrer">很棒的Movie</a>，视频 PPT 巨好。下面的标注很详细我懂了！ ～～～</p><p>联想 seata <a href="https://aliyuque.antfin.com/middleware/xts" target="_blank" rel="noopener noreferrer">https://aliyuque.antfin.com/middleware/xts</a> TODO 永毅：现在打算去 XTS 了，XTS 太慢了 其他组会议也提到：他们好像都没用分布式锁，性能差？用的事物模板 <img src="http://pub-83c20763effa4ac69b4d6a9e22c9936e.r2.dev/img/09175e8024e7028c76cd05eff7628be7.png" alt="image.png" loading="lazy"></p></blockquote><p><strong>分布式事务：解决数据一致性问题（例如转账A扣钱，B加钱）</strong></p><h2 id="cap" tabindex="-1"><a class="header-anchor" href="#cap"><span>CAP</span></a></h2><p>单机事务：ACID 分布式事务：CAP（多了网络原因，ACID不适用） CP / AP 不能同时存在原因：</p><blockquote><p><strong>分布式系统一定是存在网络传输的</strong> 就会出现网络延迟/不可达的问题，所以 P 分区容错性一定要满足</p></blockquote><p>分区隔离多个数据副本还没同步完，即节点间数据不一致！ 此时只能在 CP / AP 权衡： 强一致：等网络恢复同步完，<strong>对外不可用</strong>（zookeeper） 可用性：读到的数据不一致，可能是还没同步好的节点数据（注册中心）</p><h2 id="base" tabindex="-1"><a class="header-anchor" href="#base"><span>BASE</span></a></h2><p>我们大多数的业务系统是对用户提供服务的，一般衡量标准是几个9，对可用性要求是很高的，所以分布式事务对CAP理论中的AP做了延伸，就是BASE理论，它是一种柔性事务理念，它要求分布式系统是基本可用的，允许存在中间态数据，但是一定时间后可以达到最终一致性。这里的基本可用可以理解为响应时间上的增加和非必要功能的降级，中间态数据可以理解是引入了提交过程中的中间状态或者同步过程的延迟。</p><p>ps：几个9的意思问了GPT 在计算机系统特别是分布式系统领域，当提到系统的可用性时，&quot;几个9&quot; 是衡量系统可用性的一种常用方式，即所谓的 &quot;nine&#39;s&quot; 模型。这种表示法指的是系统在一段时间内保持可用状态的百分比。具体来说：</p><ul><li><strong>1个9（90%）</strong>：系统在 100%的时间里，保证 90%的时间是可用的。</li><li><strong>2个9（99%）</strong>：系统在 100%的时间里，保证 99%的时间是可用的。</li></ul><p>以此类推。 具体来说，&quot;几个9&quot; 反映了系统的可靠性和可用性级别。例如：</p><ul><li><strong>99.9% 可用性</strong>（3个9）：意味着每年只有大约 8.76 小时的不可用时间，这是较高的可用性要求。</li><li><strong>99.999% 可用性</strong>（5个9）：意味着每年只有大约 5.26 分钟的不可用时间，这是非常高的可用性要求，通常应用于对可靠性要求极高的系统，如金融交易系统、航空控制系统等。</li></ul><h2 id="目标-一致性" tabindex="-1"><a class="header-anchor" href="#目标-一致性"><span>目标 - 一致性</span></a></h2><h3 id="_1pc-无法完成" tabindex="-1"><a class="header-anchor" href="#_1pc-无法完成"><span>1PC：无法完成</span></a></h3><blockquote><p>目标就是所有节点的提交状态达到一致，要么全部提交、要么全部回滚， 但是当节点1和节点2都提交完成时，节点3出现异常没有提交，因为只有一个阶段，这样整体就不一致了，因为节点可能在任意时刻出现异常，所以 1PC 是没办法的。</p></blockquote><figure><img src="http://pub-83c20763effa4ac69b4d6a9e22c9936e.r2.dev/img/57c20af0e574e766247d7f4e2b70e27a.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h3 id="_2pc-即二阶段有个反悔的机会" tabindex="-1"><a class="header-anchor" href="#_2pc-即二阶段有个反悔的机会"><span>2PC：即二阶段有个反悔的机会</span></a></h3><blockquote><p>所以我们必须把提交过程拆成两个部分，也就是两阶段提交，在一阶段完成后可以有一个“反悔”的机会 - 既可以继续提交、也可以撤消 前面说我们的目标就是让所有节点的提交状态达到一致，要么全部提交、要么全部回滚。其实这个目标就等价于： 从所有节点中选定一个作为协调者，然后其他节点的状态和它保持一致，就可以了。 因为事务总会有一个发起者嘛，自然这个发起者就可以作为协调者，其他节点就被称为参与者。 通过这种方式，除了发起者以外的参与者节点就可以将选择的权力交给发起者来协调，这样发起者就决定了所有节点的状态，就一定是一致的。 注意这里有一个前提，就是一阶段完成后的中间状态一定可以向前提交，也可以回滚，如果不能满足，那就应该在一阶段就直接失败。 这就是两阶段提交，常见的分布式事务方法基本都是基于两阶段衍生出来的。</p></blockquote><figure><img src="http://pub-83c20763effa4ac69b4d6a9e22c9936e.r2.dev/img/f6c17e91b32b47b9752a94f17ca4260c.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h2 id="xts发展-四种模式" tabindex="-1"><a class="header-anchor" href="#xts发展-四种模式"><span>XTS发展-四种模式</span></a></h2><blockquote><p>接下来我们主要介绍的是<strong>TCC模式</strong>，蚂蚁大部分应用使用的都是TCC模式，大家以后接触最多的就是TCC，FMT，saga和XA模式会放到后边的扩展部分进行介绍。</p></blockquote><p><img src="http://pub-83c20763effa4ac69b4d6a9e22c9936e.r2.dev/img/eba3e9147240d1fe83ee3fc78f1f6e54.png" alt="image.png" loading="lazy"> TCC模式：二阶段提交模式，一阶段try内执行本地事务和远程调用，根据远程调用的成功和失败来决定后续调用 confirm 还是 cancel。 XA模式：需要数据库支持，实现2PC协议，这个时候数据库便能支持分布式事务了。</p><p>思考1：TCC模式需要设计者考虑中间状态，try的过程中并不直接对数据进行变更，而是通过中间值体现，在一阶段处理结束的时候，通过commit 或 cancel 来将中间值转化为最终值。需要有良好的设计思维来设计模型。 思考4：XA模式性能注定不会很好，分布式事务基本都具有RPC调用的特性，此时数据库便会存在长事务的情况。正常来说，开发规范都不允许事务内存在RPC调用就是防止长事务的存在。</p><p>总结：TCC业务侵入性大但是性能更优，FMT和XA模式无法满足高并发场景，但是这两者都无需开发者关注，配置即可用。SAGA模式个人不太喜欢，这种补偿机制问题颇多，事务补偿异常怎么处理？事务隔离性差导致的数据污染如何处理？这些都是开发者需要关注的东西。</p><h1 id="tcc模式" tabindex="-1"><a class="header-anchor" href="#tcc模式"><span>TCC模式</span></a></h1><h2 id="概念-1" tabindex="-1"><a class="header-anchor" href="#概念-1"><span>概念</span></a></h2><blockquote><p>先介绍一下TCC几个概念，其实TCC名字就是根据两阶段来起的，第一阶段执行try服务，所有检查操作，可能会导致事务提交失败的操作全都应该放到try中进行。 第二阶段是commit和cancel操作，提交就是commit，反悔了要回滚就是cancel操作，二阶段只会选其中一个执行。 <strong>发起方，是分布式事务的协调者，负责编排参与者，推进执行二阶段。将执行过程记录事务日志。</strong></p></blockquote><p><strong>帮助理解的 PointKey World：</strong><strong>主事务 &amp; 分支事务</strong><strong>TM：发起者</strong><strong>RM：参与者</strong><img src="http://pub-83c20763effa4ac69b4d6a9e22c9936e.r2.dev/img/fb36ae860874979dc1ac1eea159a650e.png" alt="image.png" loading="lazy"></p><h2 id="经典使用场景" tabindex="-1"><a class="header-anchor" href="#经典使用场景"><span>经典使用场景</span></a></h2><blockquote><p>首先看一个典型的使用场景，app1,app2,app3组成一个分布式系统， app1分别调用app2和app3做了insert和delete操作，同时app1本身 做了一个update操作，这样整个分布式事务包含3个系统，3个操作。</p></blockquote><p><img src="http://pub-83c20763effa4ac69b4d6a9e22c9936e.r2.dev/img/731b95aa4b87a3a410b67eaac6ba5ffd.png" alt="image.png" loading="lazy"><strong>那如何将这个事务设计成TCC二阶段呢？</strong> 比如针对insert这类增加的操作，一阶段就不能直接增加，而是应该在做完检查后，添加一个未达数据，二阶段将未达数据进行追加或者删除。对Delete这类减少操作，一阶段也是不能直接减少，而是应该先做业务检查，然后冻结住，在二阶段将冻结的数据彻底删除或者回滚解除冻结。</p><h2 id="实现原理-tcc两阶段提交" tabindex="-1"><a class="header-anchor" href="#实现原理-tcc两阶段提交"><span>实现原理：TCC两阶段提交</span></a></h2><blockquote><p>图 !important</p></blockquote><p><img src="http://pub-83c20763effa4ac69b4d6a9e22c9936e.r2.dev/img/7fa0b3259ae9f81eefacea36e8e1ecf4.png" alt="image.png" loading="lazy"> App1是整个事务的发起者，为了能够代表整个事务的状态，发起者必须要有一个本地事务，<strong>并且对所有参与者一阶段的调用，都需要在这个本地事务内发生</strong>，如果在一阶段有任意节点报错了，无法完成，发起者本地事务就需要回滚，如果所有节点一阶段都可以顺利完成，本地事务才能提交。 本地事务结束后表示一阶段已经完成，可以进入二阶段，由于本地事务ACID的原子性，本地事务是一定处于<strong>终态的</strong>，要么是提交状态，要么是回滚状态，就算超时也是回滚状态。 所以二阶段就可以根据本地事务的状态，来协调各个参与者二阶段，是提交还是回滚，二阶段的提交和回滚是不确定的，<strong>所以二阶段是由框架自动执行的</strong> 这个整个过程中会通过记录日志表的方式，持久化所有发生的动作，日志表都是记录到发起者的业务数据库中的，叫做同库模式，事务启动时，会生成一条主事务记录business_activity，表示这一次分布式事务，每调用一次参与者，会生成一条分支事务记录business_action，它和主事务记录是一对多的关系。 那一致性是怎么保证的呢？</p><h2 id="⭐事务一致性保证-重点" tabindex="-1"><a class="header-anchor" href="#⭐事务一致性保证-重点"><span>⭐事务一致性保证（重点）</span></a></h2><p><img src="http://pub-83c20763effa4ac69b4d6a9e22c9936e.r2.dev/img/8cfa32e52651e1a88351c1b024621975.png" alt="image.png" loading="lazy"> 这一页是对上一页的一个细化，也是说明<strong>xts如何实现一致性</strong>的核心重点。 发起者在启动事务的时候，先要启动一个本地事务，然后在这个本地事务中调用一下xts提供的start方法，这样xts会立即在<strong>独立的事务模板</strong>中插入一条主事务记录，状态为初始状态，紧接着xts在发起者本地事务中，对刚插入的主事务记录，执行一次状态更新操作，由初始状态更新为确定提交状态， 前面说过，发起者本地事务可以决定整体分布式事务的状态，注意这里的更新操作，通过这一步就可以将主事务日志记录和业务本地事务绑定到一起，所以主事务记录的状态就可以反应整个分布式事务的状态了。 <strong>那怎么绑在一起的？因为xts是在发起者本地事务中执行的更新，本地事务提交，主事务记录肯定就是确定提交状态了，如果本地事务回滚，刚才的更新操作也会跟着回滚到初始状态。</strong> 到这里xts的start方法内部就执行完成了，然后发起者本地事务中的业务代码开始调用各个参与者的一阶段，xts会拦截到每一次调用，还是在独立事务模板中插入一条分支事务记录，然后再执行调用，这样就可以把具体调用过哪些参与者持久化记录下来。 <strong>那主事务记录和分支事务记录的插入操作为什么需要独立事务模板</strong>？是为了本地事务回滚时不影响事务日志的持久化，如果在本地事务中插入事务日志，假如调用某个参与者失败了，本地事务回滚后，插入的事务记录也会一起回滚消失，就不知道整个事务的状态了，另外具体调用过哪些参与者也不知道了，这要是为什么要再加<strong>两张表记录</strong>的原因，不受本地事务的影响。 一阶段完成后，xts会自动执行二阶段，根据本地事务的状态决定调用参与者的commit方法还是cancel方法，二阶段完成后，直接删除事务日志。</p><p>疑问： 两条事务线： 绿色线使用单独的事务模板，事务传播特性为PROPAGATION_REQUIRES_NEW 红色线使用发起方本地事务模板，事务传播特性为PROPAGATION_REQUIRES 请问绿线先走红线后走，红线会不会加到绿线的事务</p><p>解答： 总结起来，红线事务会作为单独的事务存在，与绿线事务独立，互不影响。 当红线在绿线事务内部开始时，红线事务使用 PROPAGATION_REQUIRED规则，它会检索到当前存在的事务（即绿线的事务）。但是由于绿线的事务是独立的事务，不会发生嵌套，因此红线的事务实际上会是独立的事务（红线本地事务）。</p><h2 id="事务日志状态" tabindex="-1"><a class="header-anchor" href="#事务日志状态"><span>事务日志状态</span></a></h2><p><img src="http://pub-83c20763effa4ac69b4d6a9e22c9936e.r2.dev/img/f40bb7c561b498c208ebb6f3e273111d.png" alt="image.png" loading="lazy"> 再看一下在执行过程中，主事务日志状态的转化，在business_activity表中通过state列表示状态。 主事务记录是在独立事务中插入的，状态为初始化状态I，可以保证不管本地事务提交不提交，主事务记录一定存在，然后在发起者本地事务中更新为确定提交状态C。 接下来如果本地事务提交，更新操作也会提交，主事务记录状态就是确定提交C， 如果本地事务回滚，更新操作也会回滚，主事务记录状态就会回滚到初始化状态l。 这样有了主事务日志，如果执行过程中出现异常，就可以直接通过主事务日志的状态来表示整个分布式事务的状态了，实际上，事务日志就是为了出现异常时恢复用的，不做业务使用，<strong>如果二阶段正常可以完成，事务日志就用不到，可以直接删除</strong>，客户端执行过程中使用的日志信息都是放到内存中的，不查db，性能高。 那什么情况下会用到呢？</p><h2 id="xts事务兜底恢复" tabindex="-1"><a class="header-anchor" href="#xts事务兜底恢复"><span>XTS事务兜底恢复</span></a></h2><p><img src="http://pub-83c20763effa4ac69b4d6a9e22c9936e.r2.dev/img/387d323bff005e77a1b43838d95a11f0.png" alt="image.png" loading="lazy"> 接下来就是XTS事务兜底恢复，如果二阶段在执行参与者B的提交方法时机器断电了，虽然整体事务没有完成，但是发起者数据库中会有这条事务的主事务记录和两个分支事务记录。 <strong>Xts的恢复系统dtap就会到发起者的数据库中，定时捞取到这条主事务记录，发现状态为确定提交状态C，就可以判定这条事务是要提交的，再查询一下关联的business_action分支事务记录，查到这两个参与者信息后，顺序的调用参与者的confirm方法就可以完成恢复。同样的，如果主事务日志是初始化状态l，就调用参与者的cancel方法。</strong> 然后在二阶段完成后，直接删除发起者数据库中的这笔事务日志记录，就可以完成事务的恢复。 这里为了能让dtap可以查询发起者数据源和调用参与者服务，dtap提供了控制台来录入这两个信息，需要人工去录入。</p><p>思考：这里的第4步会出现什么问题呢？可能会调用两次，应用调用了一次后才断电（/ 超时），dtap恢复时，不知道是否调用过，只能再次调用，需要支持<strong>幂等</strong> 思考：如果dtap调用参与者B的二阶段confirm时也失败，如何操作？</p><ul><li>分布式事务的状态是由本地事务决定的！本地事务状态一定是一个终态</li><li>其他原因再ci</li></ul><h2 id="tcc使用规范" tabindex="-1"><a class="header-anchor" href="#tcc使用规范"><span>TCC使用规范</span></a></h2><ul><li>XTS分布式事务TCC是基于两阶段提交（2 phase commit，简称2pc）原理的。</li><li>分布式事务必须在本地事务模板中进行。</li><li>事务发起者是分布式事务的协调者，发起者本地事务的最终状态（提交或回滚）决定整个分布式事务的最终状态。</li><li>执行过程发起者会生成事务日志到业务库的business_activity，business_action表。</li><li>事务参与者的方法需要支持两阶段。发起方（使用者）只关注第一阶段的方法，第二阶段由框架自动调用。参与者需要保证：第一阶段如果成功了，第二阶段必须保证成功。</li><li>第一阶段完成，第二阶段没执行完的事务需要进行事务恢复，要到dtap去配置发起者和参与者信息，定时（每分钟）捞取发起者db数据business_acitvity进行第二阶段执行。</li></ul><p>一阶段一定能完成 恢复系统其实是做了应用客户端二阶段没完成的操作。</p><h2 id="todo-理论视频-案例" tabindex="-1"><a class="header-anchor" href="#todo-理论视频-案例"><span>TODO - 理论视频 &amp; 案例</span></a></h2><p>然后通过几个TCC典型金融案例实践加深对XTS的理解</p><h1 id="xa模式" tabindex="-1"><a class="header-anchor" href="#xa模式"><span>XA模式</span></a></h1><figure><img src="http://pub-83c20763effa4ac69b4d6a9e22c9936e.r2.dev/img/331a77d65115a134117aff63e2c3ce75.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure>',89)],n={},r=(0,t(9874).A)(n,[["render",function(a,e){return(0,l.uX)(),(0,l.CE)("div",null,i)}]]),p=JSON.parse('{"path":"/code/DistributedLock/Seata_XTS.html","title":"Seata&XTS","lang":"zh-CN","frontmatter":{"description":"Seata&XTS vs 对比与选择 性能： Seata的AT模式性能较高，因为其对数据源的拦截和日志生成进行了优化。 XTS在2PC模式下性能稍低，但在复杂事务一致性需求下更加可靠。 易用性： Seata与Spring等生态系统集成度高，使用起来较为简单。 XTS提供简洁的API，但需要开发者更深入理解TCC模型。 场景适配： Seata适用于需要高...","head":[["meta",{"property":"og:url","content":"https://zzq8.cn/code/DistributedLock/Seata_XTS.html"}],["meta",{"property":"og:site_name","content":"Piglet"}],["meta",{"property":"og:title","content":"Seata&XTS"}],["meta",{"property":"og:description","content":"Seata&XTS vs 对比与选择 性能： Seata的AT模式性能较高，因为其对数据源的拦截和日志生成进行了优化。 XTS在2PC模式下性能稍低，但在复杂事务一致性需求下更加可靠。 易用性： Seata与Spring等生态系统集成度高，使用起来较为简单。 XTS提供简洁的API，但需要开发者更深入理解TCC模型。 场景适配： Seata适用于需要高..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://pub-83c20763effa4ac69b4d6a9e22c9936e.r2.dev/img/202207081440609.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"Piglet"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Seata&XTS\\",\\"image\\":[\\"https://pub-83c20763effa4ac69b4d6a9e22c9936e.r2.dev/img/202207081440609.png\\",\\"https://pub-83c20763effa4ac69b4d6a9e22c9936e.r2.dev/img/202207081513288.png\\",\\"https://user-images.githubusercontent.com/68344696/145942191-7a2d469f-94c8-4cd2-8c7e-46ad75683636.png\\",\\"http://pub-83c20763effa4ac69b4d6a9e22c9936e.r2.dev/img/09175e8024e7028c76cd05eff7628be7.png\\",\\"http://pub-83c20763effa4ac69b4d6a9e22c9936e.r2.dev/img/57c20af0e574e766247d7f4e2b70e27a.png\\",\\"http://pub-83c20763effa4ac69b4d6a9e22c9936e.r2.dev/img/f6c17e91b32b47b9752a94f17ca4260c.png\\",\\"http://pub-83c20763effa4ac69b4d6a9e22c9936e.r2.dev/img/eba3e9147240d1fe83ee3fc78f1f6e54.png\\",\\"http://pub-83c20763effa4ac69b4d6a9e22c9936e.r2.dev/img/fb36ae860874979dc1ac1eea159a650e.png\\",\\"http://pub-83c20763effa4ac69b4d6a9e22c9936e.r2.dev/img/731b95aa4b87a3a410b67eaac6ba5ffd.png\\",\\"http://pub-83c20763effa4ac69b4d6a9e22c9936e.r2.dev/img/7fa0b3259ae9f81eefacea36e8e1ecf4.png\\",\\"http://pub-83c20763effa4ac69b4d6a9e22c9936e.r2.dev/img/8cfa32e52651e1a88351c1b024621975.png\\",\\"http://pub-83c20763effa4ac69b4d6a9e22c9936e.r2.dev/img/f40bb7c561b498c208ebb6f3e273111d.png\\",\\"http://pub-83c20763effa4ac69b4d6a9e22c9936e.r2.dev/img/387d323bff005e77a1b43838d95a11f0.png\\",\\"http://pub-83c20763effa4ac69b4d6a9e22c9936e.r2.dev/img/331a77d65115a134117aff63e2c3ce75.png\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Piglet\\",\\"url\\":\\"https://zzq8.cn\\"}]}"]]},"headers":[{"level":2,"title":"vs","slug":"vs","link":"#vs","children":[{"level":3,"title":"对比与选择","slug":"对比与选择","link":"#对比与选择","children":[]},{"level":3,"title":"选择建议","slug":"选择建议","link":"#选择建议","children":[]}]},{"level":2,"title":"概念","slug":"概念","link":"#概念","children":[]},{"level":2,"title":"快速开始","slug":"快速开始","link":"#快速开始","children":[]},{"level":2,"title":"举例 AT 模式（自动）","slug":"举例-at-模式-自动","link":"#举例-at-模式-自动","children":[]},{"level":2,"title":"CAP","slug":"cap","link":"#cap","children":[]},{"level":2,"title":"BASE","slug":"base","link":"#base","children":[]},{"level":2,"title":"目标 - 一致性","slug":"目标-一致性","link":"#目标-一致性","children":[{"level":3,"title":"1PC：无法完成","slug":"_1pc-无法完成","link":"#_1pc-无法完成","children":[]},{"level":3,"title":"2PC：即二阶段有个反悔的机会","slug":"_2pc-即二阶段有个反悔的机会","link":"#_2pc-即二阶段有个反悔的机会","children":[]}]},{"level":2,"title":"XTS发展-四种模式","slug":"xts发展-四种模式","link":"#xts发展-四种模式","children":[]},{"level":2,"title":"概念","slug":"概念-1","link":"#概念-1","children":[]},{"level":2,"title":"经典使用场景","slug":"经典使用场景","link":"#经典使用场景","children":[]},{"level":2,"title":"实现原理：TCC两阶段提交","slug":"实现原理-tcc两阶段提交","link":"#实现原理-tcc两阶段提交","children":[]},{"level":2,"title":"⭐事务一致性保证（重点）","slug":"⭐事务一致性保证-重点","link":"#⭐事务一致性保证-重点","children":[]},{"level":2,"title":"事务日志状态","slug":"事务日志状态","link":"#事务日志状态","children":[]},{"level":2,"title":"XTS事务兜底恢复","slug":"xts事务兜底恢复","link":"#xts事务兜底恢复","children":[]},{"level":2,"title":"TCC使用规范","slug":"tcc使用规范","link":"#tcc使用规范","children":[]},{"level":2,"title":"TODO - 理论视频  & 案例","slug":"todo-理论视频-案例","link":"#todo-理论视频-案例","children":[]}],"git":{"createdTime":1719648865000,"contributors":[{"name":"Fighting","email":"1024zzq@gmail.com","commits":1},{"name":"MacAir","email":"1024zzq@gmail.com","commits":1}]},"readingTime":{"minutes":21.67,"words":6502},"filePathRelative":"code/DistributedLock/Seata&XTS.md","localizedDate":"2024年6月29日","excerpt":"\\n<h2>vs</h2>\\n<h3>对比与选择</h3>\\n<ol>\\n<li><strong>性能</strong>：\\n<ul>\\n<li>Seata的AT模式性能较高，因为其对数据源的拦截和日志生成进行了优化。</li>\\n<li>XTS在2PC模式下性能稍低，但在复杂事务一致性需求下更加可靠。</li>\\n</ul>\\n</li>\\n<li><strong>易用性</strong>：\\n<ul>\\n<li>Seata与Spring等生态系统集成度高，使用起来较为简单。</li>\\n<li>XTS提供简洁的API，但需要开发者更深入理解TCC模型。</li>\\n</ul>\\n</li>\\n<li><strong>场景适配</strong>：\\n<ul>\\n<li>Seata适用于需要高性能且事务模型灵活的场景。</li>\\n<li>XTS适用于对事务一致性要求较高的场景，如金融系统。</li>\\n</ul>\\n</li>\\n</ol>","autoDesc":true}')}}]);